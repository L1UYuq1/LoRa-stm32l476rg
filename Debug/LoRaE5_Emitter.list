
LoRaE5_Emitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004040  08004040  00005040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004090  08004090  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004090  08004090  00005090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004098  08004098  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00005098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800409c  0800409c  0000509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080040ac  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080040ac  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e824  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002153  00000000  00000000  00014860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000169b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000971  00000000  00000000  000175f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002691a  00000000  00000000  00017f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ccc  00000000  00000000  0003e883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea629  00000000  00000000  0004f54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003168  00000000  00000000  00139bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013cd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004028 	.word	0x08004028

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004028 	.word	0x08004028

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b2b      	ldr	r3, [pc, #172]	@ (800057c <MX_GPIO_Init+0xc4>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d2:	4a2a      	ldr	r2, [pc, #168]	@ (800057c <MX_GPIO_Init+0xc4>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004da:	4b28      	ldr	r3, [pc, #160]	@ (800057c <MX_GPIO_Init+0xc4>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	4b25      	ldr	r3, [pc, #148]	@ (800057c <MX_GPIO_Init+0xc4>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a24      	ldr	r2, [pc, #144]	@ (800057c <MX_GPIO_Init+0xc4>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f2:	4b22      	ldr	r3, [pc, #136]	@ (800057c <MX_GPIO_Init+0xc4>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <MX_GPIO_Init+0xc4>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a1e      	ldr	r2, [pc, #120]	@ (800057c <MX_GPIO_Init+0xc4>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <MX_GPIO_Init+0xc4>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b19      	ldr	r3, [pc, #100]	@ (800057c <MX_GPIO_Init+0xc4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a18      	ldr	r2, [pc, #96]	@ (800057c <MX_GPIO_Init+0xc4>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b16      	ldr	r3, [pc, #88]	@ (800057c <MX_GPIO_Init+0xc4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2120      	movs	r1, #32
 8000532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000536:	f000 ff15 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800053a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000540:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	480b      	ldr	r0, [pc, #44]	@ (8000580 <MX_GPIO_Init+0xc8>)
 8000552:	f000 fd5d 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000556:	2320      	movs	r3, #32
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000570:	f000 fd4e 	bl	8001010 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3728      	adds	r7, #40	@ 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800

08000584 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <MX_I2C1_Init+0x74>)
 800058a:	4a1c      	ldr	r2, [pc, #112]	@ (80005fc <MX_I2C1_Init+0x78>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_I2C1_Init+0x74>)
 8000590:	4a1b      	ldr	r2, [pc, #108]	@ (8000600 <MX_I2C1_Init+0x7c>)
 8000592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000594:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <MX_I2C1_Init+0x74>)
 800059c:	2201      	movs	r2, #1
 800059e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005be:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <MX_I2C1_Init+0x74>)
 80005c0:	f000 fee8 	bl	8001394 <HAL_I2C_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ca:	f000 fa78 	bl	8000abe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4809      	ldr	r0, [pc, #36]	@ (80005f8 <MX_I2C1_Init+0x74>)
 80005d2:	f001 fb99 	bl	8001d08 <HAL_I2CEx_ConfigAnalogFilter>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005dc:	f000 fa6f 	bl	8000abe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_I2C1_Init+0x74>)
 80005e4:	f001 fbdb 	bl	8001d9e <HAL_I2CEx_ConfigDigitalFilter>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f000 fa66 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028
 80005fc:	40005400 	.word	0x40005400
 8000600:	10d19ce4 	.word	0x10d19ce4

08000604 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0ac      	sub	sp, #176	@ 0xb0
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2288      	movs	r2, #136	@ 0x88
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f003 fcd2 	bl	8003fce <memset>
  if(i2cHandle->Instance==I2C1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <HAL_I2C_MspInit+0xb0>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d13b      	bne.n	80006ac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000634:	2340      	movs	r3, #64	@ 0x40
 8000636:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000638:	2300      	movs	r3, #0
 800063a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fa5d 	bl	8002b00 <HAL_RCCEx_PeriphCLKConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800064c:	f000 fa37 	bl	8000abe <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <HAL_I2C_MspInit+0xb4>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000654:	4a18      	ldr	r2, [pc, #96]	@ (80006b8 <HAL_I2C_MspInit+0xb4>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065c:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <HAL_I2C_MspInit+0xb4>)
 800065e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000660:	f003 0302 	and.w	r3, r3, #2
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000668:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800066c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000670:	2312      	movs	r3, #18
 8000672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000682:	2304      	movs	r3, #4
 8000684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800068c:	4619      	mov	r1, r3
 800068e:	480b      	ldr	r0, [pc, #44]	@ (80006bc <HAL_I2C_MspInit+0xb8>)
 8000690:	f000 fcbe 	bl	8001010 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <HAL_I2C_MspInit+0xb4>)
 8000696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000698:	4a07      	ldr	r2, [pc, #28]	@ (80006b8 <HAL_I2C_MspInit+0xb4>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800069e:	6593      	str	r3, [r2, #88]	@ 0x58
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <HAL_I2C_MspInit+0xb4>)
 80006a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ac:	bf00      	nop
 80006ae:	37b0      	adds	r7, #176	@ 0xb0
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40005400 	.word	0x40005400
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400

080006c0 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	f043 030c 	orr.w	r3, r3, #12
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80006dc:	2380      	movs	r3, #128	@ 0x80
 80006de:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f043 0320 	orr.w	r3, r3, #32
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80006ec:	f107 0118 	add.w	r1, r7, #24
 80006f0:	230a      	movs	r3, #10
 80006f2:	2202      	movs	r2, #2
 80006f4:	486c      	ldr	r0, [pc, #432]	@ (80008a8 <lcd_init+0x1e8>)
 80006f6:	f002 ff0d 	bl	8003514 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80006fa:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80006fe:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8000700:	f107 0114 	add.w	r1, r7, #20
 8000704:	230a      	movs	r3, #10
 8000706:	2202      	movs	r2, #2
 8000708:	4867      	ldr	r0, [pc, #412]	@ (80008a8 <lcd_init+0x1e8>)
 800070a:	f002 ff03 	bl	8003514 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2205      	movs	r2, #5
 8000712:	217c      	movs	r1, #124	@ 0x7c
 8000714:	69f8      	ldr	r0, [r7, #28]
 8000716:	f000 fff1 	bl	80016fc <HAL_I2C_IsDeviceReady>
 800071a:	4603      	mov	r3, r0
 800071c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 800071e:	f107 0113 	add.w	r1, r7, #19
 8000722:	230a      	movs	r3, #10
 8000724:	2201      	movs	r2, #1
 8000726:	4860      	ldr	r0, [pc, #384]	@ (80008a8 <lcd_init+0x1e8>)
 8000728:	f002 fef4 	bl	8003514 <HAL_UART_Transmit>
	HAL_Delay(50);
 800072c:	2032      	movs	r0, #50	@ 0x32
 800072e:	f000 fb65 	bl	8000dfc <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000732:	f107 0218 	add.w	r2, r7, #24
 8000736:	f241 3388 	movw	r3, #5000	@ 0x1388
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	217c      	movs	r1, #124	@ 0x7c
 8000740:	69f8      	ldr	r0, [r7, #28]
 8000742:	f000 fec3 	bl	80014cc <HAL_I2C_Master_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800074a:	f107 0112 	add.w	r1, r7, #18
 800074e:	230a      	movs	r3, #10
 8000750:	2201      	movs	r2, #1
 8000752:	4855      	ldr	r0, [pc, #340]	@ (80008a8 <lcd_init+0x1e8>)
 8000754:	f002 fede 	bl	8003514 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000758:	2032      	movs	r0, #50	@ 0x32
 800075a:	f000 fb4f 	bl	8000dfc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800075e:	f107 0218 	add.w	r2, r7, #24
 8000762:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2302      	movs	r3, #2
 800076a:	217c      	movs	r1, #124	@ 0x7c
 800076c:	69f8      	ldr	r0, [r7, #28]
 800076e:	f000 fead 	bl	80014cc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000772:	2005      	movs	r0, #5
 8000774:	f000 fb42 	bl	8000dfc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000778:	f107 0218 	add.w	r2, r7, #24
 800077c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2302      	movs	r3, #2
 8000784:	217c      	movs	r1, #124	@ 0x7c
 8000786:	69f8      	ldr	r0, [r7, #28]
 8000788:	f000 fea0 	bl	80014cc <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2204      	movs	r2, #4
 8000790:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	b2db      	uxtb	r3, r3
 800079c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800079e:	f107 0218 	add.w	r2, r7, #24
 80007a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2302      	movs	r3, #2
 80007aa:	217c      	movs	r1, #124	@ 0x7c
 80007ac:	69f8      	ldr	r0, [r7, #28]
 80007ae:	f000 fe8d 	bl	80014cc <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80007b2:	2301      	movs	r3, #1
 80007b4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80007b6:	f107 0218 	add.w	r2, r7, #24
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2302      	movs	r3, #2
 80007c2:	217c      	movs	r1, #124	@ 0x7c
 80007c4:	69f8      	ldr	r0, [r7, #28]
 80007c6:	f000 fe81 	bl	80014cc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80007ca:	2002      	movs	r0, #2
 80007cc:	f000 fb16 	bl	8000dfc <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2202      	movs	r2, #2
 80007d4:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	789b      	ldrb	r3, [r3, #2]
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80007e2:	f107 0218 	add.w	r2, r7, #24
 80007e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2302      	movs	r3, #2
 80007ee:	217c      	movs	r1, #124	@ 0x7c
 80007f0:	69f8      	ldr	r0, [r7, #28]
 80007f2:	f000 fe6b 	bl	80014cc <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80007fe:	f107 0210 	add.w	r2, r7, #16
 8000802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21c4      	movs	r1, #196	@ 0xc4
 800080c:	69f8      	ldr	r0, [r7, #28]
 800080e:	f000 fe5d 	bl	80014cc <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8000812:	2308      	movs	r3, #8
 8000814:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8000816:	23ff      	movs	r3, #255	@ 0xff
 8000818:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800081a:	f107 0210 	add.w	r2, r7, #16
 800081e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2302      	movs	r3, #2
 8000826:	21c4      	movs	r1, #196	@ 0xc4
 8000828:	69f8      	ldr	r0, [r7, #28]
 800082a:	f000 fe4f 	bl	80014cc <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 800082e:	2301      	movs	r3, #1
 8000830:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000832:	2320      	movs	r3, #32
 8000834:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000836:	f107 0210 	add.w	r2, r7, #16
 800083a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2302      	movs	r3, #2
 8000842:	21c4      	movs	r1, #196	@ 0xc4
 8000844:	69f8      	ldr	r0, [r7, #28]
 8000846:	f000 fe41 	bl	80014cc <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800084a:	2304      	movs	r3, #4
 800084c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800084e:	23ff      	movs	r3, #255	@ 0xff
 8000850:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000852:	f107 020c 	add.w	r2, r7, #12
 8000856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2302      	movs	r3, #2
 800085e:	21c4      	movs	r1, #196	@ 0xc4
 8000860:	69f8      	ldr	r0, [r7, #28]
 8000862:	f000 fe33 	bl	80014cc <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000866:	2303      	movs	r3, #3
 8000868:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800086a:	23ff      	movs	r3, #255	@ 0xff
 800086c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800086e:	f107 020c 	add.w	r2, r7, #12
 8000872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2302      	movs	r3, #2
 800087a:	21c4      	movs	r1, #196	@ 0xc4
 800087c:	69f8      	ldr	r0, [r7, #28]
 800087e:	f000 fe25 	bl	80014cc <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000882:	2302      	movs	r3, #2
 8000884:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000886:	23ff      	movs	r3, #255	@ 0xff
 8000888:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800088a:	f107 020c 	add.w	r2, r7, #12
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2302      	movs	r3, #2
 8000896:	21c4      	movs	r1, #196	@ 0xc4
 8000898:	69f8      	ldr	r0, [r7, #28]
 800089a:	f000 fe17 	bl	80014cc <HAL_I2C_Master_Transmit>


}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000080 	.word	0x20000080

080008ac <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80008ba:	2340      	movs	r3, #64	@ 0x40
 80008bc:	733b      	strb	r3, [r7, #12]
    int i=0;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80008c2:	e011      	b.n	80008e8 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80008ce:	f107 020c 	add.w	r2, r7, #12
 80008d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2302      	movs	r3, #2
 80008da:	217c      	movs	r1, #124	@ 0x7c
 80008dc:	6938      	ldr	r0, [r7, #16]
 80008de:	f000 fdf5 	bl	80014cc <HAL_I2C_Master_Transmit>
            i++;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e7      	bne.n	80008c4 <lcd_print+0x18>
   }
}
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af02      	add	r7, sp, #8
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	460b      	mov	r3, r1
 8000908:	70fb      	strb	r3, [r7, #3]
 800090a:	4613      	mov	r3, r2
 800090c:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8000912:	78bb      	ldrb	r3, [r7, #2]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d104      	bne.n	8000922 <lcd_position+0x24>
    {
        col = col | 0x80;
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800091e:	70fb      	strb	r3, [r7, #3]
 8000920:	e003      	b.n	800092a <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000928:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800092a:	2380      	movs	r3, #128	@ 0x80
 800092c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000932:	f107 0208 	add.w	r2, r7, #8
 8000936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2302      	movs	r3, #2
 800093e:	217c      	movs	r1, #124	@ 0x7c
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f000 fdc3 	bl	80014cc <HAL_I2C_Master_Transmit>
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af02      	add	r7, sp, #8
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	460b      	mov	r3, r1
 800095c:	71bb      	strb	r3, [r7, #6]
 800095e:	4613      	mov	r3, r2
 8000960:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <reglagecouleur+0x74>)
 8000964:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000966:	2304      	movs	r3, #4
 8000968:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 800096e:	f107 0210 	add.w	r2, r7, #16
 8000972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2302      	movs	r3, #2
 800097a:	21c4      	movs	r1, #196	@ 0xc4
 800097c:	6978      	ldr	r0, [r7, #20]
 800097e:	f000 fda5 	bl	80014cc <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000982:	2303      	movs	r3, #3
 8000984:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 800098a:	f107 020c 	add.w	r2, r7, #12
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2302      	movs	r3, #2
 8000996:	21c4      	movs	r1, #196	@ 0xc4
 8000998:	6978      	ldr	r0, [r7, #20]
 800099a:	f000 fd97 	bl	80014cc <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 800099e:	2302      	movs	r3, #2
 80009a0:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 80009a6:	f107 0208 	add.w	r2, r7, #8
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2302      	movs	r3, #2
 80009b2:	21c4      	movs	r1, #196	@ 0xc4
 80009b4:	6978      	ldr	r0, [r7, #20]
 80009b6:	f000 fd89 	bl	80014cc <HAL_I2C_Master_Transmit>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000028 	.word	0x20000028

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 f99a 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f824 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f7ff fd70 	bl	80004b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009d8:	f000 f8de 	bl	8000b98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009dc:	f7ff fdd2 	bl	8000584 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1,&lcdData);
 80009e0:	490b      	ldr	r1, [pc, #44]	@ (8000a10 <main+0x48>)
 80009e2:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <main+0x4c>)
 80009e4:	f7ff fe6c 	bl	80006c0 <lcd_init>

  lcd_position(&hi2c1,0,0); // (&hi2c,row,colon)
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <main+0x4c>)
 80009ee:	f7ff ff86 	bl	80008fe <lcd_position>
  lcd_print(&hi2c1,"Hello");
 80009f2:	4909      	ldr	r1, [pc, #36]	@ (8000a18 <main+0x50>)
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <main+0x4c>)
 80009f6:	f7ff ff59 	bl	80008ac <lcd_print>
  reglagecouleur(200,100,100);
 80009fa:	2264      	movs	r2, #100	@ 0x64
 80009fc:	2164      	movs	r1, #100	@ 0x64
 80009fe:	20c8      	movs	r0, #200	@ 0xc8
 8000a00:	f7ff ffa6 	bl	8000950 <reglagecouleur>
  HAL_Delay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a08:	f000 f9f8 	bl	8000dfc <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <main+0x44>
 8000a10:	2000007c 	.word	0x2000007c
 8000a14:	20000028 	.word	0x20000028
 8000a18:	08004040 	.word	0x08004040

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b096      	sub	sp, #88	@ 0x58
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	2244      	movs	r2, #68	@ 0x44
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 facf 	bl	8003fce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a3e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a42:	f001 fa07 	bl	8001e54 <HAL_PWREx_ControlVoltageScaling>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a4c:	f000 f837 	bl	8000abe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a50:	2302      	movs	r3, #2
 8000a52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a6a:	230a      	movs	r3, #10
 8000a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fa3e 	bl	8001f00 <HAL_RCC_OscConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a8a:	f000 f818 	bl	8000abe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	230f      	movs	r3, #15
 8000a90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	2303      	movs	r3, #3
 8000a94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fe06 	bl	80026b8 <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ab2:	f000 f804 	bl	8000abe <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3758      	adds	r7, #88	@ 0x58
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac2:	b672      	cpsid	i
}
 8000ac4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac6:	bf00      	nop
 8000ac8:	e7fd      	b.n	8000ac6 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <HAL_MspInit+0x44>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 f927 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	@ (8000bf4 <MX_USART2_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f002 fc4c 	bl	8003478 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000be6:	f7ff ff6a 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000080 	.word	0x20000080
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0ac      	sub	sp, #176	@ 0xb0
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2288      	movs	r2, #136	@ 0x88
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 f9d8 	bl	8003fce <memset>
  if(uartHandle->Instance==USART2)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <HAL_UART_MspInit+0xb0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d13b      	bne.n	8000ca0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 ff63 	bl	8002b00 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c40:	f7ff ff3d 	bl	8000abe <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c44:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <HAL_UART_MspInit+0xb4>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c48:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <HAL_UART_MspInit+0xb4>)
 8000c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c50:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <HAL_UART_MspInit+0xb4>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_UART_MspInit+0xb4>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c60:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <HAL_UART_MspInit+0xb4>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <HAL_UART_MspInit+0xb4>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c74:	230c      	movs	r3, #12
 8000c76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9c:	f000 f9b8 	bl	8001010 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	37b0      	adds	r7, #176	@ 0xb0
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40021000 	.word	0x40021000

08000cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff ff5e 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f003 f97f 	bl	8003fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce2:	f7ff fe71 	bl	80009c8 <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf4:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cfc:	2000010c 	.word	0x2000010c

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <HAL_Init+0x3c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <HAL_Init+0x3c>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f944 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f80f 	bl	8000d44 <HAL_InitTick>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	e001      	b.n	8000d36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d32:	f7ff fecb 	bl	8000acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d023      	beq.n	8000da0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_InitTick+0x70>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <HAL_InitTick+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f941 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10f      	bne.n	8000d9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d809      	bhi.n	8000d94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f919 	bl	8000fbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <HAL_InitTick+0x74>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e007      	b.n	8000da4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e004      	b.n	8000da4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e001      	b.n	8000da4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000108 	.word	0x20000108

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	@ (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000108 	.word	0x20000108

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	@ (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	@ 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f7ff ff8e 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff47 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff5c 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff8e 	bl	8000efc <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5d 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb0 	bl	8000f64 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e17f      	b.n	8001320 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8171 	beq.w	800131a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b01      	cmp	r3, #1
 8001042:	d005      	beq.n	8001050 <HAL_GPIO_Init+0x40>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d130      	bne.n	80010b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001086:	2201      	movs	r2, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	f003 0201 	and.w	r2, r3, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d118      	bne.n	80010f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80ac 	beq.w	800131a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001340 <HAL_GPIO_Init+0x330>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001340 <HAL_GPIO_Init+0x330>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001340 <HAL_GPIO_Init+0x330>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011da:	4a5a      	ldr	r2, [pc, #360]	@ (8001344 <HAL_GPIO_Init+0x334>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x242>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4f      	ldr	r2, [pc, #316]	@ (8001348 <HAL_GPIO_Init+0x338>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x23e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	@ (800134c <HAL_GPIO_Init+0x33c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x23a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	@ (8001350 <HAL_GPIO_Init+0x340>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x236>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <HAL_GPIO_Init+0x344>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x232>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <HAL_GPIO_Init+0x348>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x22e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4a      	ldr	r2, [pc, #296]	@ (800135c <HAL_GPIO_Init+0x34c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x22a>
 8001236:	2306      	movs	r3, #6
 8001238:	e00c      	b.n	8001254 <HAL_GPIO_Init+0x244>
 800123a:	2307      	movs	r3, #7
 800123c:	e00a      	b.n	8001254 <HAL_GPIO_Init+0x244>
 800123e:	2305      	movs	r3, #5
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x244>
 8001242:	2304      	movs	r3, #4
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x244>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x244>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x244>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x244>
 8001252:	2300      	movs	r3, #0
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	f002 0203 	and.w	r2, r2, #3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001264:	4937      	ldr	r1, [pc, #220]	@ (8001344 <HAL_GPIO_Init+0x334>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <HAL_GPIO_Init+0x350>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001296:	4a32      	ldr	r2, [pc, #200]	@ (8001360 <HAL_GPIO_Init+0x350>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800129c:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <HAL_GPIO_Init+0x350>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c0:	4a27      	ldr	r2, [pc, #156]	@ (8001360 <HAL_GPIO_Init+0x350>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012c6:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <HAL_GPIO_Init+0x350>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <HAL_GPIO_Init+0x350>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <HAL_GPIO_Init+0x350>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001314:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <HAL_GPIO_Init+0x350>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	f47f ae78 	bne.w	8001020 <HAL_GPIO_Init+0x10>
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	371c      	adds	r7, #28
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	48000400 	.word	0x48000400
 800134c:	48000800 	.word	0x48000800
 8001350:	48000c00 	.word	0x48000c00
 8001354:	48001000 	.word	0x48001000
 8001358:	48001400 	.word	0x48001400
 800135c:	48001800 	.word	0x48001800
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001380:	e002      	b.n	8001388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e08d      	b.n	80014c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f922 	bl	8000604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2224      	movs	r2, #36	@ 0x24
 80013c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d107      	bne.n	800140e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e006      	b.n	800141c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800141a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d108      	bne.n	8001436 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	e007      	b.n	8001446 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001454:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001458:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001468:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69d9      	ldr	r1, [r3, #28]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1a      	ldr	r2, [r3, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2220      	movs	r2, #32
 80014ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	461a      	mov	r2, r3
 80014d8:	460b      	mov	r3, r1
 80014da:	817b      	strh	r3, [r7, #10]
 80014dc:	4613      	mov	r3, r2
 80014de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	f040 80fd 	bne.w	80016e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_I2C_Master_Transmit+0x30>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e0f6      	b.n	80016ea <HAL_I2C_Master_Transmit+0x21e>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001504:	f7ff fc6e 	bl	8000de4 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2319      	movs	r3, #25
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 fa00 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0e1      	b.n	80016ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2221      	movs	r2, #33	@ 0x21
 800152a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2210      	movs	r2, #16
 8001532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	893a      	ldrh	r2, [r7, #8]
 8001546:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	2bff      	cmp	r3, #255	@ 0xff
 8001556:	d906      	bls.n	8001566 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	22ff      	movs	r2, #255	@ 0xff
 800155c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800155e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e007      	b.n	8001576 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001570:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001574:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800157a:	2b00      	cmp	r3, #0
 800157c:	d024      	beq.n	80015c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	8979      	ldrh	r1, [r7, #10]
 80015ba:	4b4e      	ldr	r3, [pc, #312]	@ (80016f4 <HAL_I2C_Master_Transmit+0x228>)
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 fb6f 	bl	8001ca4 <I2C_TransferConfig>
 80015c6:	e066      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	4b48      	ldr	r3, [pc, #288]	@ (80016f4 <HAL_I2C_Master_Transmit+0x228>)
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fb64 	bl	8001ca4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015dc:	e05b      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	6a39      	ldr	r1, [r7, #32]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 f9f3 	bl	80019ce <I2C_WaitOnTXISFlagUntilTimeout>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e07b      	b.n	80016ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800160c:	b29b      	uxth	r3, r3
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d034      	beq.n	8001696 <HAL_I2C_Master_Transmit+0x1ca>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001630:	2b00      	cmp	r3, #0
 8001632:	d130      	bne.n	8001696 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	2200      	movs	r2, #0
 800163c:	2180      	movs	r1, #128	@ 0x80
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f96c 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e04d      	b.n	80016ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001652:	b29b      	uxth	r3, r3
 8001654:	2bff      	cmp	r3, #255	@ 0xff
 8001656:	d90e      	bls.n	8001676 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	22ff      	movs	r2, #255	@ 0xff
 800165c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001662:	b2da      	uxtb	r2, r3
 8001664:	8979      	ldrh	r1, [r7, #10]
 8001666:	2300      	movs	r3, #0
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fb18 	bl	8001ca4 <I2C_TransferConfig>
 8001674:	e00f      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001684:	b2da      	uxtb	r2, r3
 8001686:	8979      	ldrh	r1, [r7, #10]
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 fb07 	bl	8001ca4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d19e      	bne.n	80015de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	6a39      	ldr	r1, [r7, #32]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f9d9 	bl	8001a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e01a      	b.n	80016ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2220      	movs	r2, #32
 80016ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6859      	ldr	r1, [r3, #4]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <HAL_I2C_Master_Transmit+0x22c>)
 80016c8:	400b      	ands	r3, r1
 80016ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e000      	b.n	80016ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80016e8:	2302      	movs	r3, #2
  }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	80002000 	.word	0x80002000
 80016f8:	fe00e800 	.word	0xfe00e800

080016fc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	460b      	mov	r3, r1
 800170a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b20      	cmp	r3, #32
 800171a:	f040 80d6 	bne.w	80018ca <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800172c:	d101      	bne.n	8001732 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800172e:	2302      	movs	r3, #2
 8001730:	e0cc      	b.n	80018cc <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_I2C_IsDeviceReady+0x44>
 800173c:	2302      	movs	r3, #2
 800173e:	e0c5      	b.n	80018cc <HAL_I2C_IsDeviceReady+0x1d0>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2224      	movs	r2, #36	@ 0x24
 800174c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_I2C_IsDeviceReady+0x72>
 800175e:	897b      	ldrh	r3, [r7, #10]
 8001760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001768:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800176c:	e006      	b.n	800177c <HAL_I2C_IsDeviceReady+0x80>
 800176e:	897b      	ldrh	r3, [r7, #10]
 8001770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001774:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001778:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001782:	f7ff fb2f 	bl	8000de4 <HAL_GetTick>
 8001786:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	2b20      	cmp	r3, #32
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80017b4:	e034      	b.n	8001820 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d01a      	beq.n	80017f4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017be:	f7ff fb11 	bl	8000de4 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d302      	bcc.n	80017d4 <HAL_I2C_IsDeviceReady+0xd8>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10f      	bne.n	80017f4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e0:	f043 0220 	orr.w	r2, r3, #32
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e06b      	b.n	80018cc <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b20      	cmp	r3, #32
 8001800:	bf0c      	ite	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	2300      	movne	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b10      	cmp	r3, #16
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_I2C_IsDeviceReady+0x130>
 8001826:	7fbb      	ldrb	r3, [r7, #30]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0c4      	beq.n	80017b6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	2b10      	cmp	r3, #16
 8001838:	d01a      	beq.n	8001870 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	2120      	movs	r1, #32
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f869 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e03b      	b.n	80018cc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2220      	movs	r2, #32
 800185a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	e02d      	b.n	80018cc <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	2120      	movs	r1, #32
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f84e 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e020      	b.n	80018cc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2210      	movs	r2, #16
 8001890:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2220      	movs	r2, #32
 8001898:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f63f af56 	bhi.w	8001756 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f043 0220 	orr.w	r2, r3, #32
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80018ca:	2302      	movs	r3, #2
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d103      	bne.n	80018f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d007      	beq.n	8001910 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	619a      	str	r2, [r3, #24]
  }
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800192c:	e03b      	b.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f8d6 	bl	8001ae4 <I2C_IsErrorOccurred>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e041      	b.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d02d      	beq.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff fa4b 	bl	8000de4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnFlagUntilTimeout+0x44>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d122      	bne.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4013      	ands	r3, r2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	429a      	cmp	r2, r3
 800197c:	d113      	bne.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f043 0220 	orr.w	r2, r3, #32
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4013      	ands	r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d0b4      	beq.n	800192e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019da:	e033      	b.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f87f 	bl	8001ae4 <I2C_IsErrorOccurred>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e031      	b.n	8001a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d025      	beq.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f8:	f7ff f9f4 	bl	8000de4 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11a      	bne.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d013      	beq.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e007      	b.n	8001a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d1c4      	bne.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a68:	e02f      	b.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f838 	bl	8001ae4 <I2C_IsErrorOccurred>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e02d      	b.n	8001ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a7e:	f7ff f9b1 	bl	8000de4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d302      	bcc.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d11a      	bne.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d013      	beq.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f043 0220 	orr.w	r2, r3, #32
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e007      	b.n	8001ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d1c8      	bne.n	8001a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d068      	beq.n	8001be2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2210      	movs	r2, #16
 8001b16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b18:	e049      	b.n	8001bae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d045      	beq.n	8001bae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7ff f95f 	bl	8000de4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <I2C_IsErrorOccurred+0x54>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d13a      	bne.n	8001bae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b5a:	d121      	bne.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b62:	d01d      	beq.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b64:	7cfb      	ldrb	r3, [r7, #19]
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	d01a      	beq.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b7a:	f7ff f933 	bl	8000de4 <HAL_GetTick>
 8001b7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b80:	e00e      	b.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b82:	f7ff f92f 	bl	8000de4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b19      	cmp	r3, #25
 8001b8e:	d907      	bls.n	8001ba0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f043 0320 	orr.w	r3, r3, #32
 8001b96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001b9e:	e006      	b.n	8001bae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d1e9      	bne.n	8001b82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d003      	beq.n	8001bc4 <I2C_IsErrorOccurred+0xe0>
 8001bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0aa      	beq.n	8001b1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00b      	beq.n	8001c0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00b      	beq.n	8001c50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01c      	beq.n	8001c92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fe3b 	bl	80018d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <I2C_IsErrorOccurred+0x1bc>)
 8001c6a:	400b      	ands	r3, r1
 8001c6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001c92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3728      	adds	r7, #40	@ 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	fe00e800 	.word	0xfe00e800

08001ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	817b      	strh	r3, [r7, #10]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cbc:	7a7b      	ldrb	r3, [r7, #9]
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	0d5b      	lsrs	r3, r3, #21
 8001cde:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <I2C_TransferConfig+0x60>)
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	ea02 0103 	and.w	r1, r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	03ff63ff 	.word	0x03ff63ff

08001d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d138      	bne.n	8001d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e032      	b.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	@ 0x24
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d139      	bne.n	8001e28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e033      	b.n	8001e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2224      	movs	r2, #36	@ 0x24
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001df0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e3c:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40007000 	.word	0x40007000

08001e54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e62:	d130      	bne.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e64:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e70:	d038      	beq.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2232      	movs	r2, #50	@ 0x32
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	3301      	adds	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e98:	e002      	b.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eac:	d102      	bne.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f2      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec0:	d110      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e00f      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed2:	d007      	beq.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ed4:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001edc:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ee2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e3ca      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f12:	4b97      	ldr	r3, [pc, #604]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1c:	4b94      	ldr	r3, [pc, #592]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80e4 	beq.w	80020fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4a>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	f040 808b 	bne.w	8002058 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	f040 8087 	bne.w	8002058 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4a:	4b89      	ldr	r3, [pc, #548]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x62>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e3a2      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	4b82      	ldr	r3, [pc, #520]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_RCC_OscConfig+0x7c>
 8001f72:	4b7f      	ldr	r3, [pc, #508]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f7a:	e005      	b.n	8001f88 <HAL_RCC_OscConfig+0x88>
 8001f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d223      	bcs.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fd55 	bl	8002a40 <RCC_SetFlashLatencyFromMSIRange>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e383      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa0:	4b73      	ldr	r3, [pc, #460]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a72      	ldr	r2, [pc, #456]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b70      	ldr	r3, [pc, #448]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	496d      	ldr	r1, [pc, #436]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	4968      	ldr	r1, [pc, #416]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
 8001fd2:	e025      	b.n	8002020 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd4:	4b66      	ldr	r3, [pc, #408]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a65      	ldr	r2, [pc, #404]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b63      	ldr	r3, [pc, #396]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4960      	ldr	r1, [pc, #384]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	495b      	ldr	r1, [pc, #364]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fd15 	bl	8002a40 <RCC_SetFlashLatencyFromMSIRange>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e343      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002020:	f000 fc4a 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b52      	ldr	r3, [pc, #328]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	4950      	ldr	r1, [pc, #320]	@ (8002174 <HAL_RCC_OscConfig+0x274>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
 800203c:	4a4e      	ldr	r2, [pc, #312]	@ (8002178 <HAL_RCC_OscConfig+0x278>)
 800203e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002040:	4b4e      	ldr	r3, [pc, #312]	@ (800217c <HAL_RCC_OscConfig+0x27c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fe7d 	bl	8000d44 <HAL_InitTick>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d052      	beq.n	80020fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	e327      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d032      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002060:	4b43      	ldr	r3, [pc, #268]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a42      	ldr	r2, [pc, #264]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800206c:	f7fe feba 	bl	8000de4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002074:	f7fe feb6 	bl	8000de4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e310      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002086:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002092:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a36      	ldr	r2, [pc, #216]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b34      	ldr	r3, [pc, #208]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4931      	ldr	r1, [pc, #196]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	492c      	ldr	r1, [pc, #176]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
 80020c4:	e01a      	b.n	80020fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a29      	ldr	r2, [pc, #164]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020d2:	f7fe fe87 	bl	8000de4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020da:	f7fe fe83 	bl	8000de4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e2dd      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ec:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x1da>
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d074      	beq.n	80021f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b08      	cmp	r3, #8
 800210c:	d005      	beq.n	800211a <HAL_RCC_OscConfig+0x21a>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d10e      	bne.n	8002132 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d10b      	bne.n	8002132 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d064      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d160      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e2ba      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x24a>
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0b      	ldr	r2, [pc, #44]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	e026      	b.n	8002198 <HAL_RCC_OscConfig+0x298>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002152:	d115      	bne.n	8002180 <HAL_RCC_OscConfig+0x280>
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 800215a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a02      	ldr	r2, [pc, #8]	@ (8002170 <HAL_RCC_OscConfig+0x270>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x298>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	08004048 	.word	0x08004048
 8002178:	20000000 	.word	0x20000000
 800217c:	20000004 	.word	0x20000004
 8002180:	4ba0      	ldr	r3, [pc, #640]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a9f      	ldr	r2, [pc, #636]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b9d      	ldr	r3, [pc, #628]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a9c      	ldr	r2, [pc, #624]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe fe20 	bl	8000de4 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fe1c 	bl	8000de4 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	@ 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e276      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	4b92      	ldr	r3, [pc, #584]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2a8>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fe0c 	bl	8000de4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe fe08 	bl	8000de4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	@ 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e262      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e2:	4b88      	ldr	r3, [pc, #544]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2d0>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d060      	beq.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x310>
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d119      	bne.n	800223e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d116      	bne.n	800223e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002210:	4b7c      	ldr	r3, [pc, #496]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_OscConfig+0x328>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e23f      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b76      	ldr	r3, [pc, #472]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	4973      	ldr	r1, [pc, #460]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223c:	e040      	b.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d023      	beq.n	800228e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002246:	4b6f      	ldr	r3, [pc, #444]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6e      	ldr	r2, [pc, #440]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe fdc7 	bl	8000de4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7fe fdc3 	bl	8000de4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e21d      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	4b65      	ldr	r3, [pc, #404]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b62      	ldr	r3, [pc, #392]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	495f      	ldr	r1, [pc, #380]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e018      	b.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b5d      	ldr	r3, [pc, #372]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5c      	ldr	r2, [pc, #368]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe fda3 	bl	8000de4 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7fe fd9f 	bl	8000de4 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1f9      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b4:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d03c      	beq.n	8002346 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01c      	beq.n	800230e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022da:	4a4a      	ldr	r2, [pc, #296]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fd7e 	bl	8000de4 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7fe fd7a 	bl	8000de4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1d4      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fe:	4b41      	ldr	r3, [pc, #260]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ef      	beq.n	80022ec <HAL_RCC_OscConfig+0x3ec>
 800230c:	e01b      	b.n	8002346 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230e:	4b3d      	ldr	r3, [pc, #244]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002314:	4a3b      	ldr	r2, [pc, #236]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231e:	f7fe fd61 	bl	8000de4 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002326:	f7fe fd5d 	bl	8000de4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1b7      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002338:	4b32      	ldr	r3, [pc, #200]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1ef      	bne.n	8002326 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80a6 	beq.w	80024a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002358:	4b2a      	ldr	r3, [pc, #168]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b27      	ldr	r3, [pc, #156]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	4a26      	ldr	r2, [pc, #152]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002370:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237c:	2301      	movs	r3, #1
 800237e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002380:	4b21      	ldr	r3, [pc, #132]	@ (8002408 <HAL_RCC_OscConfig+0x508>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d118      	bne.n	80023be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800238c:	4b1e      	ldr	r3, [pc, #120]	@ (8002408 <HAL_RCC_OscConfig+0x508>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <HAL_RCC_OscConfig+0x508>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002396:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002398:	f7fe fd24 	bl	8000de4 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a0:	f7fe fd20 	bl	8000de4 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e17a      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <HAL_RCC_OscConfig+0x508>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4d8>
 80023c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023d6:	e029      	b.n	800242c <HAL_RCC_OscConfig+0x52c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d115      	bne.n	800240c <HAL_RCC_OscConfig+0x50c>
 80023e0:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e6:	4a07      	ldr	r2, [pc, #28]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f6:	4a03      	ldr	r2, [pc, #12]	@ (8002404 <HAL_RCC_OscConfig+0x504>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x52c>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	40007000 	.word	0x40007000
 800240c:	4b9c      	ldr	r3, [pc, #624]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002412:	4a9b      	ldr	r2, [pc, #620]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800241c:	4b98      	ldr	r3, [pc, #608]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	4a97      	ldr	r2, [pc, #604]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d016      	beq.n	8002462 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe fcd6 	bl	8000de4 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fcd2 	bl	8000de4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e12a      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b8b      	ldr	r3, [pc, #556]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ed      	beq.n	800243c <HAL_RCC_OscConfig+0x53c>
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fcbf 	bl	8000de4 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fcbb 	bl	8000de4 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e113      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002480:	4b7f      	ldr	r3, [pc, #508]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ed      	bne.n	800246a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248e:	7ffb      	ldrb	r3, [r7, #31]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b7a      	ldr	r3, [pc, #488]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002498:	4a79      	ldr	r2, [pc, #484]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80fe 	beq.w	80026a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	f040 80d0 	bne.w	8002654 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024b4:	4b72      	ldr	r3, [pc, #456]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d130      	bne.n	800252a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	3b01      	subs	r3, #1
 80024d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d127      	bne.n	800252a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d11f      	bne.n	800252a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024f4:	2a07      	cmp	r2, #7
 80024f6:	bf14      	ite	ne
 80024f8:	2201      	movne	r2, #1
 80024fa:	2200      	moveq	r2, #0
 80024fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fe:	4293      	cmp	r3, r2
 8002500:	d113      	bne.n	800252a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	3b01      	subs	r3, #1
 8002510:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d109      	bne.n	800252a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	3b01      	subs	r3, #1
 8002524:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d06e      	beq.n	8002608 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d069      	beq.n	8002604 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002530:	4b53      	ldr	r3, [pc, #332]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800253c:	4b50      	ldr	r3, [pc, #320]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0ad      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800254c:	4b4c      	ldr	r3, [pc, #304]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a4b      	ldr	r2, [pc, #300]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002552:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002556:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002558:	f7fe fc44 	bl	8000de4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fc40 	bl	8000de4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e09a      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002572:	4b43      	ldr	r3, [pc, #268]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257e:	4b40      	ldr	r3, [pc, #256]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	4b40      	ldr	r3, [pc, #256]	@ (8002684 <HAL_RCC_OscConfig+0x784>)
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800258e:	3a01      	subs	r2, #1
 8002590:	0112      	lsls	r2, r2, #4
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002598:	0212      	lsls	r2, r2, #8
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025a0:	0852      	lsrs	r2, r2, #1
 80025a2:	3a01      	subs	r2, #1
 80025a4:	0552      	lsls	r2, r2, #21
 80025a6:	4311      	orrs	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0652      	lsls	r2, r2, #25
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025b8:	0912      	lsrs	r2, r2, #4
 80025ba:	0452      	lsls	r2, r2, #17
 80025bc:	430a      	orrs	r2, r1
 80025be:	4930      	ldr	r1, [pc, #192]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 80025ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025dc:	f7fe fc02 	bl	8000de4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fbfe 	bl	8000de4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e058      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f6:	4b22      	ldr	r3, [pc, #136]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002602:	e050      	b.n	80026a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e04f      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002608:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d148      	bne.n	80026a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002614:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 800261a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002620:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a16      	ldr	r2, [pc, #88]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800262a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800262c:	f7fe fbda 	bl	8000de4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fbd6 	bl	8000de4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e030      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x734>
 8002652:	e028      	b.n	80026a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d023      	beq.n	80026a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <HAL_RCC_OscConfig+0x780>)
 8002660:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fbbd 	bl	8000de4 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266c:	e00c      	b.n	8002688 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fbb9 	bl	8000de4 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d905      	bls.n	8002688 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e013      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
 8002680:	40021000 	.word	0x40021000
 8002684:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_OscConfig+0x7b0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ec      	bne.n	800266e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_RCC_OscConfig+0x7b0>)
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	4905      	ldr	r1, [pc, #20]	@ (80026b0 <HAL_RCC_OscConfig+0x7b0>)
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_RCC_OscConfig+0x7b4>)
 800269c:	4013      	ands	r3, r2
 800269e:	60cb      	str	r3, [r1, #12]
 80026a0:	e001      	b.n	80026a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	feeefffc 	.word	0xfeeefffc

080026b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0e7      	b.n	800289c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b75      	ldr	r3, [pc, #468]	@ (80028a4 <HAL_RCC_ClockConfig+0x1ec>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d910      	bls.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b72      	ldr	r3, [pc, #456]	@ (80028a4 <HAL_RCC_ClockConfig+0x1ec>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4970      	ldr	r1, [pc, #448]	@ (80028a4 <HAL_RCC_ClockConfig+0x1ec>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b6e      	ldr	r3, [pc, #440]	@ (80028a4 <HAL_RCC_ClockConfig+0x1ec>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0cf      	b.n	800289c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	4b66      	ldr	r3, [pc, #408]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002714:	429a      	cmp	r2, r3
 8002716:	d908      	bls.n	800272a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002718:	4b63      	ldr	r3, [pc, #396]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4960      	ldr	r1, [pc, #384]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d04c      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	4b5a      	ldr	r3, [pc, #360]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d121      	bne.n	800278e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0a6      	b.n	800289c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002756:	4b54      	ldr	r3, [pc, #336]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d115      	bne.n	800278e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e09a      	b.n	800289c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276e:	4b4e      	ldr	r3, [pc, #312]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e08e      	b.n	800289c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277e:	4b4a      	ldr	r3, [pc, #296]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e086      	b.n	800289c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b46      	ldr	r3, [pc, #280]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4943      	ldr	r1, [pc, #268]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a0:	f7fe fb20 	bl	8000de4 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe fb1c 	bl	8000de4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e06e      	b.n	800289c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b3a      	ldr	r3, [pc, #232]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d010      	beq.n	80027fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	4b31      	ldr	r3, [pc, #196]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d208      	bcs.n	80027fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ec:	4b2e      	ldr	r3, [pc, #184]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	492b      	ldr	r1, [pc, #172]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fe:	4b29      	ldr	r3, [pc, #164]	@ (80028a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d210      	bcs.n	800282e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280c:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <HAL_RCC_ClockConfig+0x1ec>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 0207 	bic.w	r2, r3, #7
 8002814:	4923      	ldr	r1, [pc, #140]	@ (80028a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	4b21      	ldr	r3, [pc, #132]	@ (80028a4 <HAL_RCC_ClockConfig+0x1ec>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e036      	b.n	800289c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800283a:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4918      	ldr	r1, [pc, #96]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d009      	beq.n	800286c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4910      	ldr	r1, [pc, #64]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286c:	f000 f824 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	490b      	ldr	r1, [pc, #44]	@ (80028ac <HAL_RCC_ClockConfig+0x1f4>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	4a09      	ldr	r2, [pc, #36]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 800288a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_RCC_ClockConfig+0x1fc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fa57 	bl	8000d44 <HAL_InitTick>
 8002896:	4603      	mov	r3, r0
 8002898:	72fb      	strb	r3, [r7, #11]

  return status;
 800289a:	7afb      	ldrb	r3, [r7, #11]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40021000 	.word	0x40021000
 80028ac:	08004048 	.word	0x08004048
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c6:	4b3e      	ldr	r3, [pc, #248]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d0:	4b3b      	ldr	r3, [pc, #236]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x34>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d121      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d11e      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028ec:	4b34      	ldr	r3, [pc, #208]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028f8:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e005      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002908:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002914:	4a2b      	ldr	r2, [pc, #172]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d102      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002930:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e004      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d101      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800293c:	4b23      	ldr	r3, [pc, #140]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x114>)
 800293e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d134      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002946:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0xa6>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d003      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0xac>
 800295c:	e005      	b.n	800296a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800295e:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002960:	617b      	str	r3, [r7, #20]
      break;
 8002962:	e005      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002964:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002966:	617b      	str	r3, [r7, #20]
      break;
 8002968:	e002      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	617b      	str	r3, [r7, #20]
      break;
 800296e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002970:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	3301      	adds	r3, #1
 800297c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	fb03 f202 	mul.w	r2, r3, r2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	0e5b      	lsrs	r3, r3, #25
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	3301      	adds	r3, #1
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029b0:	69bb      	ldr	r3, [r7, #24]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3724      	adds	r7, #36	@ 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08004060 	.word	0x08004060
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	007a1200 	.word	0x007a1200

080029d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029ec:	f7ff fff0 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4904      	ldr	r1, [pc, #16]	@ (8002a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08004058 	.word	0x08004058

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a18:	f7ff ffda 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0adb      	lsrs	r3, r3, #11
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4904      	ldr	r1, [pc, #16]	@ (8002a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08004058 	.word	0x08004058

08002a40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a58:	f7ff f9ee 	bl	8001e38 <HAL_PWREx_GetVoltageRange>
 8002a5c:	6178      	str	r0, [r7, #20]
 8002a5e:	e014      	b.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	4a24      	ldr	r2, [pc, #144]	@ (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a6c:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a78:	f7ff f9de 	bl	8001e38 <HAL_PWREx_GetVoltageRange>
 8002a7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	4a1d      	ldr	r2, [pc, #116]	@ (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a90:	d10b      	bne.n	8002aaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b80      	cmp	r3, #128	@ 0x80
 8002a96:	d919      	bls.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a9c:	d902      	bls.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	e013      	b.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	e010      	b.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b80      	cmp	r3, #128	@ 0x80
 8002aae:	d902      	bls.n	8002ab6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e00a      	b.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b80      	cmp	r3, #128	@ 0x80
 8002aba:	d102      	bne.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002abc:	2302      	movs	r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	e004      	b.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b70      	cmp	r3, #112	@ 0x70
 8002ac6:	d101      	bne.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac8:	2301      	movs	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 0207 	bic.w	r2, r3, #7
 8002ad4:	4909      	ldr	r1, [pc, #36]	@ (8002afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002adc:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40022000 	.word	0x40022000

08002b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b08:	2300      	movs	r3, #0
 8002b0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d041      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b24:	d02a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b2a:	d824      	bhi.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b30:	d008      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b36:	d81e      	bhi.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b40:	d010      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b42:	e018      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b44:	4b86      	ldr	r3, [pc, #536]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a85      	ldr	r2, [pc, #532]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b50:	e015      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fabb 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b62:	e00c      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3320      	adds	r3, #32
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fba6 	bl	80032bc <RCCEx_PLLSAI2_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b74:	e003      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	74fb      	strb	r3, [r7, #19]
      break;
 8002b7a:	e000      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10b      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b84:	4b76      	ldr	r3, [pc, #472]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b92:	4973      	ldr	r1, [pc, #460]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b9a:	e001      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d041      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bb4:	d02a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bba:	d824      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bc6:	d81e      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd0:	d010      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bd2:	e018      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bd4:	4b62      	ldr	r3, [pc, #392]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a61      	ldr	r2, [pc, #388]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bde:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002be0:	e015      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fa73 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bf2:	e00c      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3320      	adds	r3, #32
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fb5e 	bl	80032bc <RCCEx_PLLSAI2_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c04:	e003      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	74fb      	strb	r3, [r7, #19]
      break;
 8002c0a:	e000      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0e:	7cfb      	ldrb	r3, [r7, #19]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c14:	4b52      	ldr	r3, [pc, #328]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c22:	494f      	ldr	r1, [pc, #316]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c2a:	e001      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a0 	beq.w	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	4b41      	ldr	r3, [pc, #260]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	4a40      	ldr	r2, [pc, #256]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c64:	4b3e      	ldr	r3, [pc, #248]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c70:	2301      	movs	r3, #1
 8002c72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c74:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a3a      	ldr	r2, [pc, #232]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c80:	f7fe f8b0 	bl	8000de4 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c86:	e009      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7fe f8ac 	bl	8000de4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	74fb      	strb	r3, [r7, #19]
        break;
 8002c9a:	e005      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c9c:	4b31      	ldr	r3, [pc, #196]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ef      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d15c      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cae:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01f      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d019      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ccc:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd8:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cde:	4a20      	ldr	r2, [pc, #128]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	4a1c      	ldr	r2, [pc, #112]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf8:	4a19      	ldr	r2, [pc, #100]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe f86b 	bl	8000de4 <HAL_GetTick>
 8002d0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d10:	e00b      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe f867 	bl	8000de4 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d902      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	74fb      	strb	r3, [r7, #19]
            break;
 8002d28:	e006      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ec      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d4e:	4904      	ldr	r1, [pc, #16]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d56:	e009      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
 8002d5c:	e006      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d6c:	7c7b      	ldrb	r3, [r7, #17]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d72:	4b9e      	ldr	r3, [pc, #632]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	4a9d      	ldr	r2, [pc, #628]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d8a:	4b98      	ldr	r3, [pc, #608]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	f023 0203 	bic.w	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d98:	4994      	ldr	r1, [pc, #592]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dac:	4b8f      	ldr	r3, [pc, #572]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f023 020c 	bic.w	r2, r3, #12
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	498c      	ldr	r1, [pc, #560]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dce:	4b87      	ldr	r3, [pc, #540]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	4983      	ldr	r1, [pc, #524]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002df0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	497b      	ldr	r1, [pc, #492]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e12:	4b76      	ldr	r3, [pc, #472]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e20:	4972      	ldr	r1, [pc, #456]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e34:	4b6d      	ldr	r3, [pc, #436]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	496a      	ldr	r1, [pc, #424]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e56:	4b65      	ldr	r3, [pc, #404]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	4961      	ldr	r1, [pc, #388]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e78:	4b5c      	ldr	r3, [pc, #368]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e86:	4959      	ldr	r1, [pc, #356]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e9a:	4b54      	ldr	r3, [pc, #336]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea8:	4950      	ldr	r1, [pc, #320]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eca:	4948      	ldr	r1, [pc, #288]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ede:	4b43      	ldr	r3, [pc, #268]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	493f      	ldr	r1, [pc, #252]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d028      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f00:	4b3a      	ldr	r3, [pc, #232]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f0e:	4937      	ldr	r1, [pc, #220]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f20:	4b32      	ldr	r3, [pc, #200]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a31      	ldr	r2, [pc, #196]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f2a:	60d3      	str	r3, [r2, #12]
 8002f2c:	e011      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f8c8 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d028      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f5e:	4b23      	ldr	r3, [pc, #140]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	491f      	ldr	r1, [pc, #124]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a1a      	ldr	r2, [pc, #104]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f88:	60d3      	str	r3, [r2, #12]
 8002f8a:	e011      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f899 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fca:	4908      	ldr	r1, [pc, #32]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fda:	d109      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a02      	ldr	r2, [pc, #8]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe6:	60d3      	str	r3, [r2, #12]
 8002fe8:	e014      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f867 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003020:	4b2b      	ldr	r3, [pc, #172]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003026:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800302e:	4928      	ldr	r1, [pc, #160]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800303a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800303e:	d10d      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	2102      	movs	r1, #2
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f844 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d014      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	74bb      	strb	r3, [r7, #18]
 800305a:	e011      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003064:	d10c      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3320      	adds	r3, #32
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f925 	bl	80032bc <RCCEx_PLLSAI2_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800308c:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003092:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800309a:	490d      	ldr	r1, [pc, #52]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030ae:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030be:	4904      	ldr	r1, [pc, #16]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000

080030d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030e2:	4b75      	ldr	r3, [pc, #468]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d018      	beq.n	8003120 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ee:	4b72      	ldr	r3, [pc, #456]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0203 	and.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d10d      	bne.n	800311a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
       ||
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003106:	4b6c      	ldr	r3, [pc, #432]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
       ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d047      	beq.n	80031aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e044      	b.n	80031aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d018      	beq.n	800315a <RCCEx_PLLSAI1_Config+0x86>
 8003128:	2b03      	cmp	r3, #3
 800312a:	d825      	bhi.n	8003178 <RCCEx_PLLSAI1_Config+0xa4>
 800312c:	2b01      	cmp	r3, #1
 800312e:	d002      	beq.n	8003136 <RCCEx_PLLSAI1_Config+0x62>
 8003130:	2b02      	cmp	r3, #2
 8003132:	d009      	beq.n	8003148 <RCCEx_PLLSAI1_Config+0x74>
 8003134:	e020      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003136:	4b60      	ldr	r3, [pc, #384]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11d      	bne.n	800317e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003146:	e01a      	b.n	800317e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003148:	4b5b      	ldr	r3, [pc, #364]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d116      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003158:	e013      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800315a:	4b57      	ldr	r3, [pc, #348]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003166:	4b54      	ldr	r3, [pc, #336]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003176:	e006      	b.n	8003186 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e004      	b.n	8003188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800317e:	bf00      	nop
 8003180:	e002      	b.n	8003188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003186:	bf00      	nop
    }

    if(status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10d      	bne.n	80031aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800318e:	4b4a      	ldr	r3, [pc, #296]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	430b      	orrs	r3, r1
 80031a4:	4944      	ldr	r1, [pc, #272]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d17d      	bne.n	80032ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031b0:	4b41      	ldr	r3, [pc, #260]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a40      	ldr	r2, [pc, #256]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031bc:	f7fd fe12 	bl	8000de4 <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031c2:	e009      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c4:	f7fd fe0e 	bl	8000de4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d902      	bls.n	80031d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	73fb      	strb	r3, [r7, #15]
        break;
 80031d6:	e005      	b.n	80031e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d8:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ef      	bne.n	80031c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d160      	bne.n	80032ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d111      	bne.n	8003214 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f0:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80031f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6892      	ldr	r2, [r2, #8]
 8003200:	0211      	lsls	r1, r2, #8
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68d2      	ldr	r2, [r2, #12]
 8003206:	0912      	lsrs	r2, r2, #4
 8003208:	0452      	lsls	r2, r2, #17
 800320a:	430a      	orrs	r2, r1
 800320c:	492a      	ldr	r1, [pc, #168]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	610b      	str	r3, [r1, #16]
 8003212:	e027      	b.n	8003264 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d112      	bne.n	8003240 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800321a:	4b27      	ldr	r3, [pc, #156]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003222:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6892      	ldr	r2, [r2, #8]
 800322a:	0211      	lsls	r1, r2, #8
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6912      	ldr	r2, [r2, #16]
 8003230:	0852      	lsrs	r2, r2, #1
 8003232:	3a01      	subs	r2, #1
 8003234:	0552      	lsls	r2, r2, #21
 8003236:	430a      	orrs	r2, r1
 8003238:	491f      	ldr	r1, [pc, #124]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	610b      	str	r3, [r1, #16]
 800323e:	e011      	b.n	8003264 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003240:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003248:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6892      	ldr	r2, [r2, #8]
 8003250:	0211      	lsls	r1, r2, #8
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6952      	ldr	r2, [r2, #20]
 8003256:	0852      	lsrs	r2, r2, #1
 8003258:	3a01      	subs	r2, #1
 800325a:	0652      	lsls	r2, r2, #25
 800325c:	430a      	orrs	r2, r1
 800325e:	4916      	ldr	r1, [pc, #88]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003260:	4313      	orrs	r3, r2
 8003262:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003264:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800326e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7fd fdb8 	bl	8000de4 <HAL_GetTick>
 8003274:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003276:	e009      	b.n	800328c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003278:	f7fd fdb4 	bl	8000de4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d902      	bls.n	800328c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	73fb      	strb	r3, [r7, #15]
          break;
 800328a:	e005      	b.n	8003298 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800328c:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0ef      	beq.n	8003278 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4904      	ldr	r1, [pc, #16]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000

080032bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d018      	beq.n	8003308 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032d6:	4b67      	ldr	r3, [pc, #412]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0203 	and.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d10d      	bne.n	8003302 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
       ||
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032ee:	4b61      	ldr	r3, [pc, #388]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
       ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d047      	beq.n	8003392 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	e044      	b.n	8003392 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d018      	beq.n	8003342 <RCCEx_PLLSAI2_Config+0x86>
 8003310:	2b03      	cmp	r3, #3
 8003312:	d825      	bhi.n	8003360 <RCCEx_PLLSAI2_Config+0xa4>
 8003314:	2b01      	cmp	r3, #1
 8003316:	d002      	beq.n	800331e <RCCEx_PLLSAI2_Config+0x62>
 8003318:	2b02      	cmp	r3, #2
 800331a:	d009      	beq.n	8003330 <RCCEx_PLLSAI2_Config+0x74>
 800331c:	e020      	b.n	8003360 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800331e:	4b55      	ldr	r3, [pc, #340]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11d      	bne.n	8003366 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332e:	e01a      	b.n	8003366 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003330:	4b50      	ldr	r3, [pc, #320]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d116      	bne.n	800336a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003340:	e013      	b.n	800336a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003342:	4b4c      	ldr	r3, [pc, #304]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800334e:	4b49      	ldr	r3, [pc, #292]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800335e:	e006      	b.n	800336e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e004      	b.n	8003370 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003366:	bf00      	nop
 8003368:	e002      	b.n	8003370 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800336e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003376:	4b3f      	ldr	r3, [pc, #252]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	430b      	orrs	r3, r1
 800338c:	4939      	ldr	r1, [pc, #228]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d167      	bne.n	8003468 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003398:	4b36      	ldr	r3, [pc, #216]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a35      	ldr	r2, [pc, #212]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a4:	f7fd fd1e 	bl	8000de4 <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033aa:	e009      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033ac:	f7fd fd1a 	bl	8000de4 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d902      	bls.n	80033c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	73fb      	strb	r3, [r7, #15]
        break;
 80033be:	e005      	b.n	80033cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ef      	bne.n	80033ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d14a      	bne.n	8003468 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033d8:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6892      	ldr	r2, [r2, #8]
 80033e8:	0211      	lsls	r1, r2, #8
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68d2      	ldr	r2, [r2, #12]
 80033ee:	0912      	lsrs	r2, r2, #4
 80033f0:	0452      	lsls	r2, r2, #17
 80033f2:	430a      	orrs	r2, r1
 80033f4:	491f      	ldr	r1, [pc, #124]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	614b      	str	r3, [r1, #20]
 80033fa:	e011      	b.n	8003420 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003404:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	0211      	lsls	r1, r2, #8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6912      	ldr	r2, [r2, #16]
 8003412:	0852      	lsrs	r2, r2, #1
 8003414:	3a01      	subs	r2, #1
 8003416:	0652      	lsls	r2, r2, #25
 8003418:	430a      	orrs	r2, r1
 800341a:	4916      	ldr	r1, [pc, #88]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341c:	4313      	orrs	r3, r2
 800341e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a13      	ldr	r2, [pc, #76]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fd fcda 	bl	8000de4 <HAL_GetTick>
 8003430:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003432:	e009      	b.n	8003448 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003434:	f7fd fcd6 	bl	8000de4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d902      	bls.n	8003448 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	73fb      	strb	r3, [r7, #15]
          break;
 8003446:	e005      	b.n	8003454 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ef      	beq.n	8003434 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4904      	ldr	r1, [pc, #16]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003464:	4313      	orrs	r3, r2
 8003466:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e040      	b.n	800350c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fbac 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	@ 0x24
 80034a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fb6a 	bl	8003b98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f8af 	bl	8003628 <UART_SetConfig>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01b      	b.n	800350c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fbe9 	bl	8003cdc <UART_CheckIdleState>
 800350a:	4603      	mov	r3, r0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003528:	2b20      	cmp	r3, #32
 800352a:	d177      	bne.n	800361c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_UART_Transmit+0x24>
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e070      	b.n	800361e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2221      	movs	r2, #33	@ 0x21
 8003548:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800354a:	f7fd fc4b 	bl	8000de4 <HAL_GetTick>
 800354e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003568:	d108      	bne.n	800357c <HAL_UART_Transmit+0x68>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e003      	b.n	8003584 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003584:	e02f      	b.n	80035e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	2180      	movs	r1, #128	@ 0x80
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fc4b 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e03b      	b.n	800361e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b8:	b292      	uxth	r2, r2
 80035ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	3302      	adds	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e007      	b.n	80035d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1c9      	bne.n	8003586 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2140      	movs	r1, #64	@ 0x40
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fc15 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e005      	b.n	800361e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800362c:	b08a      	sub	sp, #40	@ 0x28
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	431a      	orrs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	431a      	orrs	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4313      	orrs	r3, r2
 800364e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4ba4      	ldr	r3, [pc, #656]	@ (80038e8 <UART_SetConfig+0x2c0>)
 8003658:	4013      	ands	r3, r2
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003660:	430b      	orrs	r3, r1
 8003662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a99      	ldr	r2, [pc, #612]	@ (80038ec <UART_SetConfig+0x2c4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003690:	4313      	orrs	r3, r2
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a90      	ldr	r2, [pc, #576]	@ (80038f0 <UART_SetConfig+0x2c8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d126      	bne.n	8003700 <UART_SetConfig+0xd8>
 80036b2:	4b90      	ldr	r3, [pc, #576]	@ (80038f4 <UART_SetConfig+0x2cc>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d81b      	bhi.n	80036f8 <UART_SetConfig+0xd0>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <UART_SetConfig+0xa0>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036e9 	.word	0x080036e9
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036f1 	.word	0x080036f1
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036de:	e116      	b.n	800390e <UART_SetConfig+0x2e6>
 80036e0:	2302      	movs	r3, #2
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e6:	e112      	b.n	800390e <UART_SetConfig+0x2e6>
 80036e8:	2304      	movs	r3, #4
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ee:	e10e      	b.n	800390e <UART_SetConfig+0x2e6>
 80036f0:	2308      	movs	r3, #8
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f6:	e10a      	b.n	800390e <UART_SetConfig+0x2e6>
 80036f8:	2310      	movs	r3, #16
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fe:	e106      	b.n	800390e <UART_SetConfig+0x2e6>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a7c      	ldr	r2, [pc, #496]	@ (80038f8 <UART_SetConfig+0x2d0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d138      	bne.n	800377c <UART_SetConfig+0x154>
 800370a:	4b7a      	ldr	r3, [pc, #488]	@ (80038f4 <UART_SetConfig+0x2cc>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d82d      	bhi.n	8003774 <UART_SetConfig+0x14c>
 8003718:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <UART_SetConfig+0xf8>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003755 	.word	0x08003755
 8003724:	08003775 	.word	0x08003775
 8003728:	08003775 	.word	0x08003775
 800372c:	08003775 	.word	0x08003775
 8003730:	08003765 	.word	0x08003765
 8003734:	08003775 	.word	0x08003775
 8003738:	08003775 	.word	0x08003775
 800373c:	08003775 	.word	0x08003775
 8003740:	0800375d 	.word	0x0800375d
 8003744:	08003775 	.word	0x08003775
 8003748:	08003775 	.word	0x08003775
 800374c:	08003775 	.word	0x08003775
 8003750:	0800376d 	.word	0x0800376d
 8003754:	2300      	movs	r3, #0
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375a:	e0d8      	b.n	800390e <UART_SetConfig+0x2e6>
 800375c:	2302      	movs	r3, #2
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003762:	e0d4      	b.n	800390e <UART_SetConfig+0x2e6>
 8003764:	2304      	movs	r3, #4
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376a:	e0d0      	b.n	800390e <UART_SetConfig+0x2e6>
 800376c:	2308      	movs	r3, #8
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003772:	e0cc      	b.n	800390e <UART_SetConfig+0x2e6>
 8003774:	2310      	movs	r3, #16
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377a:	e0c8      	b.n	800390e <UART_SetConfig+0x2e6>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <UART_SetConfig+0x2d4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d125      	bne.n	80037d2 <UART_SetConfig+0x1aa>
 8003786:	4b5b      	ldr	r3, [pc, #364]	@ (80038f4 <UART_SetConfig+0x2cc>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003790:	2b30      	cmp	r3, #48	@ 0x30
 8003792:	d016      	beq.n	80037c2 <UART_SetConfig+0x19a>
 8003794:	2b30      	cmp	r3, #48	@ 0x30
 8003796:	d818      	bhi.n	80037ca <UART_SetConfig+0x1a2>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d00a      	beq.n	80037b2 <UART_SetConfig+0x18a>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d814      	bhi.n	80037ca <UART_SetConfig+0x1a2>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <UART_SetConfig+0x182>
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d008      	beq.n	80037ba <UART_SetConfig+0x192>
 80037a8:	e00f      	b.n	80037ca <UART_SetConfig+0x1a2>
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b0:	e0ad      	b.n	800390e <UART_SetConfig+0x2e6>
 80037b2:	2302      	movs	r3, #2
 80037b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b8:	e0a9      	b.n	800390e <UART_SetConfig+0x2e6>
 80037ba:	2304      	movs	r3, #4
 80037bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c0:	e0a5      	b.n	800390e <UART_SetConfig+0x2e6>
 80037c2:	2308      	movs	r3, #8
 80037c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c8:	e0a1      	b.n	800390e <UART_SetConfig+0x2e6>
 80037ca:	2310      	movs	r3, #16
 80037cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d0:	e09d      	b.n	800390e <UART_SetConfig+0x2e6>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003900 <UART_SetConfig+0x2d8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d125      	bne.n	8003828 <UART_SetConfig+0x200>
 80037dc:	4b45      	ldr	r3, [pc, #276]	@ (80038f4 <UART_SetConfig+0x2cc>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037e8:	d016      	beq.n	8003818 <UART_SetConfig+0x1f0>
 80037ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80037ec:	d818      	bhi.n	8003820 <UART_SetConfig+0x1f8>
 80037ee:	2b80      	cmp	r3, #128	@ 0x80
 80037f0:	d00a      	beq.n	8003808 <UART_SetConfig+0x1e0>
 80037f2:	2b80      	cmp	r3, #128	@ 0x80
 80037f4:	d814      	bhi.n	8003820 <UART_SetConfig+0x1f8>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <UART_SetConfig+0x1d8>
 80037fa:	2b40      	cmp	r3, #64	@ 0x40
 80037fc:	d008      	beq.n	8003810 <UART_SetConfig+0x1e8>
 80037fe:	e00f      	b.n	8003820 <UART_SetConfig+0x1f8>
 8003800:	2300      	movs	r3, #0
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003806:	e082      	b.n	800390e <UART_SetConfig+0x2e6>
 8003808:	2302      	movs	r3, #2
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380e:	e07e      	b.n	800390e <UART_SetConfig+0x2e6>
 8003810:	2304      	movs	r3, #4
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003816:	e07a      	b.n	800390e <UART_SetConfig+0x2e6>
 8003818:	2308      	movs	r3, #8
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381e:	e076      	b.n	800390e <UART_SetConfig+0x2e6>
 8003820:	2310      	movs	r3, #16
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003826:	e072      	b.n	800390e <UART_SetConfig+0x2e6>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a35      	ldr	r2, [pc, #212]	@ (8003904 <UART_SetConfig+0x2dc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d12a      	bne.n	8003888 <UART_SetConfig+0x260>
 8003832:	4b30      	ldr	r3, [pc, #192]	@ (80038f4 <UART_SetConfig+0x2cc>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003840:	d01a      	beq.n	8003878 <UART_SetConfig+0x250>
 8003842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003846:	d81b      	bhi.n	8003880 <UART_SetConfig+0x258>
 8003848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800384c:	d00c      	beq.n	8003868 <UART_SetConfig+0x240>
 800384e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003852:	d815      	bhi.n	8003880 <UART_SetConfig+0x258>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <UART_SetConfig+0x238>
 8003858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800385c:	d008      	beq.n	8003870 <UART_SetConfig+0x248>
 800385e:	e00f      	b.n	8003880 <UART_SetConfig+0x258>
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e052      	b.n	800390e <UART_SetConfig+0x2e6>
 8003868:	2302      	movs	r3, #2
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386e:	e04e      	b.n	800390e <UART_SetConfig+0x2e6>
 8003870:	2304      	movs	r3, #4
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003876:	e04a      	b.n	800390e <UART_SetConfig+0x2e6>
 8003878:	2308      	movs	r3, #8
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387e:	e046      	b.n	800390e <UART_SetConfig+0x2e6>
 8003880:	2310      	movs	r3, #16
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003886:	e042      	b.n	800390e <UART_SetConfig+0x2e6>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a17      	ldr	r2, [pc, #92]	@ (80038ec <UART_SetConfig+0x2c4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d13a      	bne.n	8003908 <UART_SetConfig+0x2e0>
 8003892:	4b18      	ldr	r3, [pc, #96]	@ (80038f4 <UART_SetConfig+0x2cc>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800389c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a0:	d01a      	beq.n	80038d8 <UART_SetConfig+0x2b0>
 80038a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a6:	d81b      	bhi.n	80038e0 <UART_SetConfig+0x2b8>
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ac:	d00c      	beq.n	80038c8 <UART_SetConfig+0x2a0>
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b2:	d815      	bhi.n	80038e0 <UART_SetConfig+0x2b8>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <UART_SetConfig+0x298>
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038bc:	d008      	beq.n	80038d0 <UART_SetConfig+0x2a8>
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x2b8>
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c6:	e022      	b.n	800390e <UART_SetConfig+0x2e6>
 80038c8:	2302      	movs	r3, #2
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ce:	e01e      	b.n	800390e <UART_SetConfig+0x2e6>
 80038d0:	2304      	movs	r3, #4
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d6:	e01a      	b.n	800390e <UART_SetConfig+0x2e6>
 80038d8:	2308      	movs	r3, #8
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038de:	e016      	b.n	800390e <UART_SetConfig+0x2e6>
 80038e0:	2310      	movs	r3, #16
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e6:	e012      	b.n	800390e <UART_SetConfig+0x2e6>
 80038e8:	efff69f3 	.word	0xefff69f3
 80038ec:	40008000 	.word	0x40008000
 80038f0:	40013800 	.word	0x40013800
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40004400 	.word	0x40004400
 80038fc:	40004800 	.word	0x40004800
 8003900:	40004c00 	.word	0x40004c00
 8003904:	40005000 	.word	0x40005000
 8003908:	2310      	movs	r3, #16
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a9f      	ldr	r2, [pc, #636]	@ (8003b90 <UART_SetConfig+0x568>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d17a      	bne.n	8003a0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003918:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800391c:	2b08      	cmp	r3, #8
 800391e:	d824      	bhi.n	800396a <UART_SetConfig+0x342>
 8003920:	a201      	add	r2, pc, #4	@ (adr r2, 8003928 <UART_SetConfig+0x300>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	0800394d 	.word	0x0800394d
 800392c:	0800396b 	.word	0x0800396b
 8003930:	08003955 	.word	0x08003955
 8003934:	0800396b 	.word	0x0800396b
 8003938:	0800395b 	.word	0x0800395b
 800393c:	0800396b 	.word	0x0800396b
 8003940:	0800396b 	.word	0x0800396b
 8003944:	0800396b 	.word	0x0800396b
 8003948:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800394c:	f7ff f84c 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8003950:	61f8      	str	r0, [r7, #28]
        break;
 8003952:	e010      	b.n	8003976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003954:	4b8f      	ldr	r3, [pc, #572]	@ (8003b94 <UART_SetConfig+0x56c>)
 8003956:	61fb      	str	r3, [r7, #28]
        break;
 8003958:	e00d      	b.n	8003976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395a:	f7fe ffad 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800395e:	61f8      	str	r0, [r7, #28]
        break;
 8003960:	e009      	b.n	8003976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003966:	61fb      	str	r3, [r7, #28]
        break;
 8003968:	e005      	b.n	8003976 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80fb 	beq.w	8003b74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	429a      	cmp	r2, r3
 800398c:	d305      	bcc.n	800399a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	429a      	cmp	r2, r3
 8003998:	d903      	bls.n	80039a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039a0:	e0e8      	b.n	8003b74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	2200      	movs	r2, #0
 80039a6:	461c      	mov	r4, r3
 80039a8:	4615      	mov	r5, r2
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	022b      	lsls	r3, r5, #8
 80039b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039b8:	0222      	lsls	r2, r4, #8
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	6849      	ldr	r1, [r1, #4]
 80039be:	0849      	lsrs	r1, r1, #1
 80039c0:	2000      	movs	r0, #0
 80039c2:	4688      	mov	r8, r1
 80039c4:	4681      	mov	r9, r0
 80039c6:	eb12 0a08 	adds.w	sl, r2, r8
 80039ca:	eb43 0b09 	adc.w	fp, r3, r9
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039dc:	4650      	mov	r0, sl
 80039de:	4659      	mov	r1, fp
 80039e0:	f7fc fbf2 	bl	80001c8 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039f2:	d308      	bcc.n	8003a06 <UART_SetConfig+0x3de>
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039fa:	d204      	bcs.n	8003a06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	60da      	str	r2, [r3, #12]
 8003a04:	e0b6      	b.n	8003b74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a0c:	e0b2      	b.n	8003b74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a16:	d15e      	bne.n	8003ad6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d828      	bhi.n	8003a72 <UART_SetConfig+0x44a>
 8003a20:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <UART_SetConfig+0x400>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003a55 	.word	0x08003a55
 8003a30:	08003a5d 	.word	0x08003a5d
 8003a34:	08003a73 	.word	0x08003a73
 8003a38:	08003a63 	.word	0x08003a63
 8003a3c:	08003a73 	.word	0x08003a73
 8003a40:	08003a73 	.word	0x08003a73
 8003a44:	08003a73 	.word	0x08003a73
 8003a48:	08003a6b 	.word	0x08003a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f7fe ffcc 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8003a50:	61f8      	str	r0, [r7, #28]
        break;
 8003a52:	e014      	b.n	8003a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a54:	f7fe ffde 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003a58:	61f8      	str	r0, [r7, #28]
        break;
 8003a5a:	e010      	b.n	8003a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003b94 <UART_SetConfig+0x56c>)
 8003a5e:	61fb      	str	r3, [r7, #28]
        break;
 8003a60:	e00d      	b.n	8003a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a62:	f7fe ff29 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8003a66:	61f8      	str	r0, [r7, #28]
        break;
 8003a68:	e009      	b.n	8003a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6e:	61fb      	str	r3, [r7, #28]
        break;
 8003a70:	e005      	b.n	8003a7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d077      	beq.n	8003b74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	005a      	lsls	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	441a      	add	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b0f      	cmp	r3, #15
 8003a9e:	d916      	bls.n	8003ace <UART_SetConfig+0x4a6>
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa6:	d212      	bcs.n	8003ace <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f023 030f 	bic.w	r3, r3, #15
 8003ab0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	8afb      	ldrh	r3, [r7, #22]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	8afa      	ldrh	r2, [r7, #22]
 8003aca:	60da      	str	r2, [r3, #12]
 8003acc:	e052      	b.n	8003b74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ad4:	e04e      	b.n	8003b74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d827      	bhi.n	8003b2e <UART_SetConfig+0x506>
 8003ade:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <UART_SetConfig+0x4bc>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b11 	.word	0x08003b11
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b1f 	.word	0x08003b1f
 8003af8:	08003b2f 	.word	0x08003b2f
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7fe ff6e 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	61f8      	str	r0, [r7, #28]
        break;
 8003b0e:	e014      	b.n	8003b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7fe ff80 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003b14:	61f8      	str	r0, [r7, #28]
        break;
 8003b16:	e010      	b.n	8003b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <UART_SetConfig+0x56c>)
 8003b1a:	61fb      	str	r3, [r7, #28]
        break;
 8003b1c:	e00d      	b.n	8003b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7fe fecb 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8003b22:	61f8      	str	r0, [r7, #28]
        break;
 8003b24:	e009      	b.n	8003b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2a:	61fb      	str	r3, [r7, #28]
        break;
 8003b2c:	e005      	b.n	8003b3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b38:	bf00      	nop
    }

    if (pclk != 0U)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d019      	beq.n	8003b74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	085a      	lsrs	r2, r3, #1
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	441a      	add	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d909      	bls.n	8003b6e <UART_SetConfig+0x546>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b60:	d205      	bcs.n	8003b6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	e002      	b.n	8003b74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	@ 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8e:	bf00      	nop
 8003b90:	40008000 	.word	0x40008000
 8003b94:	00f42400 	.word	0x00f42400

08003b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01a      	beq.n	8003cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c96:	d10a      	bne.n	8003cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b098      	sub	sp, #96	@ 0x60
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cec:	f7fd f87a 	bl	8000de4 <HAL_GetTick>
 8003cf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d12e      	bne.n	8003d5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f88c 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d021      	beq.n	8003d5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e6      	bne.n	8003d1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e062      	b.n	8003e24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d149      	bne.n	8003e00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d74:	2200      	movs	r2, #0
 8003d76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f856 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d03c      	beq.n	8003e00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	623b      	str	r3, [r7, #32]
   return(result);
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e6      	bne.n	8003d86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dd8:	61fa      	str	r2, [r7, #28]
 8003dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	69b9      	ldr	r1, [r7, #24]
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	617b      	str	r3, [r7, #20]
   return(result);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e5      	bne.n	8003db8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e011      	b.n	8003e24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3758      	adds	r7, #88	@ 0x58
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3c:	e04f      	b.n	8003ede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d04b      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fc ffcd 	bl	8000de4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e04e      	b.n	8003efe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d037      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b80      	cmp	r3, #128	@ 0x80
 8003e72:	d034      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b40      	cmp	r3, #64	@ 0x40
 8003e78:	d031      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d110      	bne.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f838 	bl	8003f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e029      	b.n	8003efe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb8:	d111      	bne.n	8003ede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f81e 	bl	8003f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e00f      	b.n	8003efe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d0a0      	beq.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b095      	sub	sp, #84	@ 0x54
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e6      	bne.n	8003f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3308      	adds	r3, #8
 8003f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d118      	bne.n	8003fae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f023 0310 	bic.w	r3, r3, #16
 8003f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6979      	ldr	r1, [r7, #20]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e6      	bne.n	8003f7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fc2:	bf00      	nop
 8003fc4:	3754      	adds	r7, #84	@ 0x54
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <memset>:
 8003fce:	4402      	add	r2, r0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d100      	bne.n	8003fd8 <memset+0xa>
 8003fd6:	4770      	bx	lr
 8003fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8003fdc:	e7f9      	b.n	8003fd2 <memset+0x4>
	...

08003fe0 <__libc_init_array>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8004018 <__libc_init_array+0x38>)
 8003fe4:	4c0d      	ldr	r4, [pc, #52]	@ (800401c <__libc_init_array+0x3c>)
 8003fe6:	1b64      	subs	r4, r4, r5
 8003fe8:	10a4      	asrs	r4, r4, #2
 8003fea:	2600      	movs	r6, #0
 8003fec:	42a6      	cmp	r6, r4
 8003fee:	d109      	bne.n	8004004 <__libc_init_array+0x24>
 8003ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8004020 <__libc_init_array+0x40>)
 8003ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8004024 <__libc_init_array+0x44>)
 8003ff4:	f000 f818 	bl	8004028 <_init>
 8003ff8:	1b64      	subs	r4, r4, r5
 8003ffa:	10a4      	asrs	r4, r4, #2
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	42a6      	cmp	r6, r4
 8004000:	d105      	bne.n	800400e <__libc_init_array+0x2e>
 8004002:	bd70      	pop	{r4, r5, r6, pc}
 8004004:	f855 3b04 	ldr.w	r3, [r5], #4
 8004008:	4798      	blx	r3
 800400a:	3601      	adds	r6, #1
 800400c:	e7ee      	b.n	8003fec <__libc_init_array+0xc>
 800400e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004012:	4798      	blx	r3
 8004014:	3601      	adds	r6, #1
 8004016:	e7f2      	b.n	8003ffe <__libc_init_array+0x1e>
 8004018:	08004098 	.word	0x08004098
 800401c:	08004098 	.word	0x08004098
 8004020:	08004098 	.word	0x08004098
 8004024:	0800409c 	.word	0x0800409c

08004028 <_init>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr

08004034 <_fini>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr
