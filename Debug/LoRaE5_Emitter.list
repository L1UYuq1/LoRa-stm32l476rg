
LoRaE5_Emitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004df8  08004df8  00005df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea0  08004ea0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ea8  08004ea8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ea8  08004ea8  00005ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004eac  08004eac  00005eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004eb0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000005c  08004f0c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08004f0c  00006434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7a3  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242c  00000000  00000000  0001582f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00017c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b6  00000000  00000000  00018908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027044  00000000  00000000  000192be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c91  00000000  00000000  00040302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ead26  00000000  00000000  00051f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ccb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f8  00000000  00000000  0013ccfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001404f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004de0 	.word	0x08004de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004de0 	.word	0x08004de0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b2b      	ldr	r3, [pc, #172]	@ (8000634 <MX_GPIO_Init+0xc4>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a2a      	ldr	r2, [pc, #168]	@ (8000634 <MX_GPIO_Init+0xc4>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <MX_GPIO_Init+0xc4>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a24      	ldr	r2, [pc, #144]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a18      	ldr	r2, [pc, #96]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ee:	f001 f82f 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	@ (8000638 <MX_GPIO_Init+0xc8>)
 800060a:	f000 fe77 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060e:	2320      	movs	r3, #32
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f000 fe68 	bl	80012fc <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	@ 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	48000800 	.word	0x48000800

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	@ (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	f001 f802 	bl	8001680 <HAL_I2C_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 fae0 	bl	8000c46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800068a:	f001 fcb3 	bl	8001ff4 <HAL_I2CEx_ConfigAnalogFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 fad7 	bl	8000c46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800069c:	f001 fcf5 	bl	800208a <HAL_I2CEx_ConfigDigitalFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 face 	bl	8000c46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000078 	.word	0x20000078
 80006b4:	40005400 	.word	0x40005400
 80006b8:	10d19ce4 	.word	0x10d19ce4

080006bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0ac      	sub	sp, #176	@ 0xb0
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2288      	movs	r2, #136	@ 0x88
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fee9 	bl	80044b4 <memset>
  if(i2cHandle->Instance==I2C1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a21      	ldr	r2, [pc, #132]	@ (800076c <HAL_I2C_MspInit+0xb0>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d13b      	bne.n	8000764 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006ec:	2340      	movs	r3, #64	@ 0x40
 80006ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fb77 	bl	8002dec <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000704:	f000 fa9f 	bl	8000c46 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <HAL_I2C_MspInit+0xb4>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070c:	4a18      	ldr	r2, [pc, #96]	@ (8000770 <HAL_I2C_MspInit+0xb4>)
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <HAL_I2C_MspInit+0xb4>)
 8000716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000718:	f003 0302 	and.w	r3, r3, #2
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000720:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000728:	2312      	movs	r3, #18
 800072a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073a:	2304      	movs	r3, #4
 800073c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000744:	4619      	mov	r1, r3
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <HAL_I2C_MspInit+0xb8>)
 8000748:	f000 fdd8 	bl	80012fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <HAL_I2C_MspInit+0xb4>)
 800074e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000750:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <HAL_I2C_MspInit+0xb4>)
 8000752:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000756:	6593      	str	r3, [r2, #88]	@ 0x58
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <HAL_I2C_MspInit+0xb4>)
 800075a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000764:	bf00      	nop
 8000766:	37b0      	adds	r7, #176	@ 0xb0
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40005400 	.word	0x40005400
 8000770:	40021000 	.word	0x40021000
 8000774:	48000400 	.word	0x48000400

08000778 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af02      	add	r7, sp, #8
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	f043 030c 	orr.w	r3, r3, #12
 800078e:	b2da      	uxtb	r2, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000794:	2380      	movs	r3, #128	@ 0x80
 8000796:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f043 0320 	orr.w	r3, r3, #32
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80007a4:	f107 0118 	add.w	r1, r7, #24
 80007a8:	230a      	movs	r3, #10
 80007aa:	2202      	movs	r2, #2
 80007ac:	486c      	ldr	r0, [pc, #432]	@ (8000960 <lcd_init+0x1e8>)
 80007ae:	f003 f827 	bl	8003800 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80007b2:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80007b6:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80007b8:	f107 0114 	add.w	r1, r7, #20
 80007bc:	230a      	movs	r3, #10
 80007be:	2202      	movs	r2, #2
 80007c0:	4867      	ldr	r0, [pc, #412]	@ (8000960 <lcd_init+0x1e8>)
 80007c2:	f003 f81d 	bl	8003800 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80007c6:	2364      	movs	r3, #100	@ 0x64
 80007c8:	2205      	movs	r2, #5
 80007ca:	217c      	movs	r1, #124	@ 0x7c
 80007cc:	69f8      	ldr	r0, [r7, #28]
 80007ce:	f001 f90b 	bl	80019e8 <HAL_I2C_IsDeviceReady>
 80007d2:	4603      	mov	r3, r0
 80007d4:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80007d6:	f107 0113 	add.w	r1, r7, #19
 80007da:	230a      	movs	r3, #10
 80007dc:	2201      	movs	r2, #1
 80007de:	4860      	ldr	r0, [pc, #384]	@ (8000960 <lcd_init+0x1e8>)
 80007e0:	f003 f80e 	bl	8003800 <HAL_UART_Transmit>
	HAL_Delay(50);
 80007e4:	2032      	movs	r0, #50	@ 0x32
 80007e6:	f000 fc7f 	bl	80010e8 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80007ea:	f107 0218 	add.w	r2, r7, #24
 80007ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2302      	movs	r3, #2
 80007f6:	217c      	movs	r1, #124	@ 0x7c
 80007f8:	69f8      	ldr	r0, [r7, #28]
 80007fa:	f000 ffdd 	bl	80017b8 <HAL_I2C_Master_Transmit>
 80007fe:	4603      	mov	r3, r0
 8000800:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8000802:	f107 0112 	add.w	r1, r7, #18
 8000806:	230a      	movs	r3, #10
 8000808:	2201      	movs	r2, #1
 800080a:	4855      	ldr	r0, [pc, #340]	@ (8000960 <lcd_init+0x1e8>)
 800080c:	f002 fff8 	bl	8003800 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000810:	2032      	movs	r0, #50	@ 0x32
 8000812:	f000 fc69 	bl	80010e8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000816:	f107 0218 	add.w	r2, r7, #24
 800081a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	217c      	movs	r1, #124	@ 0x7c
 8000824:	69f8      	ldr	r0, [r7, #28]
 8000826:	f000 ffc7 	bl	80017b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800082a:	2005      	movs	r0, #5
 800082c:	f000 fc5c 	bl	80010e8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000830:	f107 0218 	add.w	r2, r7, #24
 8000834:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2302      	movs	r3, #2
 800083c:	217c      	movs	r1, #124	@ 0x7c
 800083e:	69f8      	ldr	r0, [r7, #28]
 8000840:	f000 ffba 	bl	80017b8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2204      	movs	r2, #4
 8000848:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	785b      	ldrb	r3, [r3, #1]
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	b2db      	uxtb	r3, r3
 8000854:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000856:	f107 0218 	add.w	r2, r7, #24
 800085a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2302      	movs	r3, #2
 8000862:	217c      	movs	r1, #124	@ 0x7c
 8000864:	69f8      	ldr	r0, [r7, #28]
 8000866:	f000 ffa7 	bl	80017b8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800086a:	2301      	movs	r3, #1
 800086c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800086e:	f107 0218 	add.w	r2, r7, #24
 8000872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2302      	movs	r3, #2
 800087a:	217c      	movs	r1, #124	@ 0x7c
 800087c:	69f8      	ldr	r0, [r7, #28]
 800087e:	f000 ff9b 	bl	80017b8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000882:	2002      	movs	r0, #2
 8000884:	f000 fc30 	bl	80010e8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2202      	movs	r2, #2
 800088c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	b2db      	uxtb	r3, r3
 8000898:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800089a:	f107 0218 	add.w	r2, r7, #24
 800089e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	217c      	movs	r1, #124	@ 0x7c
 80008a8:	69f8      	ldr	r0, [r7, #28]
 80008aa:	f000 ff85 	bl	80017b8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008b6:	f107 0210 	add.w	r2, r7, #16
 80008ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2302      	movs	r3, #2
 80008c2:	21c4      	movs	r1, #196	@ 0xc4
 80008c4:	69f8      	ldr	r0, [r7, #28]
 80008c6:	f000 ff77 	bl	80017b8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80008ca:	2308      	movs	r3, #8
 80008cc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80008ce:	23ff      	movs	r3, #255	@ 0xff
 80008d0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008d2:	f107 0210 	add.w	r2, r7, #16
 80008d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2302      	movs	r3, #2
 80008de:	21c4      	movs	r1, #196	@ 0xc4
 80008e0:	69f8      	ldr	r0, [r7, #28]
 80008e2:	f000 ff69 	bl	80017b8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80008e6:	2301      	movs	r3, #1
 80008e8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80008ea:	2320      	movs	r3, #32
 80008ec:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008ee:	f107 0210 	add.w	r2, r7, #16
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2302      	movs	r3, #2
 80008fa:	21c4      	movs	r1, #196	@ 0xc4
 80008fc:	69f8      	ldr	r0, [r7, #28]
 80008fe:	f000 ff5b 	bl	80017b8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8000902:	2304      	movs	r3, #4
 8000904:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000906:	23ff      	movs	r3, #255	@ 0xff
 8000908:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800090a:	f107 020c 	add.w	r2, r7, #12
 800090e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2302      	movs	r3, #2
 8000916:	21c4      	movs	r1, #196	@ 0xc4
 8000918:	69f8      	ldr	r0, [r7, #28]
 800091a:	f000 ff4d 	bl	80017b8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800091e:	2303      	movs	r3, #3
 8000920:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000922:	23ff      	movs	r3, #255	@ 0xff
 8000924:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000926:	f107 020c 	add.w	r2, r7, #12
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	21c4      	movs	r1, #196	@ 0xc4
 8000934:	69f8      	ldr	r0, [r7, #28]
 8000936:	f000 ff3f 	bl	80017b8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800093a:	2302      	movs	r3, #2
 800093c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800093e:	23ff      	movs	r3, #255	@ 0xff
 8000940:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000942:	f107 020c 	add.w	r2, r7, #12
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2302      	movs	r3, #2
 800094e:	21c4      	movs	r1, #196	@ 0xc4
 8000950:	69f8      	ldr	r0, [r7, #28]
 8000952:	f000 ff31 	bl	80017b8 <HAL_I2C_Master_Transmit>


}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000260 	.word	0x20000260

08000964 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000972:	2340      	movs	r3, #64	@ 0x40
 8000974:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800097a:	e011      	b.n	80009a0 <lcd_print+0x3c>
    {
            data[1] = str[i];
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000986:	f107 020c 	add.w	r2, r7, #12
 800098a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2302      	movs	r3, #2
 8000992:	217c      	movs	r1, #124	@ 0x7c
 8000994:	6938      	ldr	r0, [r7, #16]
 8000996:	f000 ff0f 	bl	80017b8 <HAL_I2C_Master_Transmit>
            i++;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1e7      	bne.n	800097c <lcd_print+0x18>
   }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af02      	add	r7, sp, #8
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	70fb      	strb	r3, [r7, #3]
 80009c2:	4613      	mov	r3, r2
 80009c4:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80009ca:	78bb      	ldrb	r3, [r7, #2]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d104      	bne.n	80009da <lcd_position+0x24>
    {
        col = col | 0x80;
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009d6:	70fb      	strb	r3, [r7, #3]
 80009d8:	e003      	b.n	80009e2 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80009e0:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80009ea:	f107 0208 	add.w	r2, r7, #8
 80009ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2302      	movs	r3, #2
 80009f6:	217c      	movs	r1, #124	@ 0x7c
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f000 fedd 	bl	80017b8 <HAL_I2C_Master_Transmit>
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <LoRaE5_Init>:
#include "loraE5.h"
#include <string.h>
#include <stdio.h>

void LoRaE5_Init(LoRaE5_t *lora, UART_HandleTypeDef *huart) {
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
    lora->huart = huart;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	601a      	str	r2, [r3, #0]
    memset(lora->rx_buffer, 0, LORA_BUFFER_SIZE);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 fd47 	bl	80044b4 <memset>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <LoRaE5_SendCommand>:

// 发送 AT 指令
bool LoRaE5_SendCommand(LoRaE5_t *lora, const char *cmd, uint32_t timeout) {
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b095      	sub	sp, #84	@ 0x54
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
    char response[64] = {0};  // 存储 LoRa-E5 的返回数据 : lora返回给usart2的值
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	223c      	movs	r2, #60	@ 0x3c
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fd33 	bl	80044b4 <memset>

    // 发送 AT 指令
    HAL_UART_Transmit(lora->huart, (uint8_t *)cmd, strlen(cmd), timeout);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681c      	ldr	r4, [r3, #0]
 8000a52:	68b8      	ldr	r0, [r7, #8]
 8000a54:	f7ff fbbc 	bl	80001d0 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	4620      	mov	r0, r4
 8000a62:	f002 fecd 	bl	8003800 <HAL_UART_Transmit>

    // 等待 LoRa-E5 响应
    if (HAL_UART_Receive(lora->huart, (uint8_t *)response, sizeof(response), timeout) == HAL_OK) {
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6818      	ldr	r0, [r3, #0]
 8000a6a:	f107 0110 	add.w	r1, r7, #16
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2240      	movs	r2, #64	@ 0x40
 8000a72:	f002 ff4e 	bl	8003912 <HAL_UART_Receive>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10c      	bne.n	8000a96 <LoRaE5_SendCommand+0x66>
        if (strstr(response, "OK") != NULL) {
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4907      	ldr	r1, [pc, #28]	@ (8000aa0 <LoRaE5_SendCommand+0x70>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fd1e 	bl	80044c4 <strstr>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <LoRaE5_SendCommand+0x62>
            return true;  // LoRa-E5 返回 "OK"，指令成功
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e002      	b.n	8000a98 <LoRaE5_SendCommand+0x68>
        } else {
            return false;  // LoRa-E5 返回错误信息
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <LoRaE5_SendCommand+0x68>
        }
    }

    return false;  // 超时未收到数据
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3754      	adds	r7, #84	@ 0x54
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	08004df8 	.word	0x08004df8

08000aa4 <LoRaE5_SendData>:


// 发送数据
bool LoRaE5_SendData(LoRaE5_t *lora, const char *data) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b094      	sub	sp, #80	@ 0x50
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "%s%s\r\n", LORA_AT_SEND, data);
 8000aae:	f107 0008 	add.w	r0, r7, #8
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <LoRaE5_SendData+0x38>)
 8000ab8:	4a09      	ldr	r2, [pc, #36]	@ (8000ae0 <LoRaE5_SendData+0x3c>)
 8000aba:	2140      	movs	r1, #64	@ 0x40
 8000abc:	f003 fcc6 	bl	800444c <sniprintf>
    return LoRaE5_SendCommand(lora, cmd, LORA_UART_TIMEOUT);
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffb0 	bl	8000a30 <LoRaE5_SendCommand>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3748      	adds	r7, #72	@ 0x48
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08004dfc 	.word	0x08004dfc
 8000ae0:	08004e04 	.word	0x08004e04

08000ae4 <send_string>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//串口打印
void send_string(char *str) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fb6f 	bl	80001d0 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <send_string+0x28>)
 8000afe:	f002 fe7f 	bl	8003800 <HAL_UART_Transmit>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000260 	.word	0x20000260

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b090      	sub	sp, #64	@ 0x40
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b16:	f000 fa6b 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1a:	f000 f843 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1e:	f7ff fd27 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b22:	f000 f963 	bl	8000dec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b26:	f7ff fd89 	bl	800063c <MX_I2C1_Init>
  MX_UART4_Init();
 8000b2a:	f000 f92f 	bl	8000d8c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1,&lcdData);
 8000b2e:	4917      	ldr	r1, [pc, #92]	@ (8000b8c <main+0x7c>)
 8000b30:	4817      	ldr	r0, [pc, #92]	@ (8000b90 <main+0x80>)
 8000b32:	f7ff fe21 	bl	8000778 <lcd_init>
  // 初始化 LoRa-E5（绑定 UART2）
  LoRaE5_Init(&lora, &huart4);
 8000b36:	4917      	ldr	r1, [pc, #92]	@ (8000b94 <main+0x84>)
 8000b38:	4817      	ldr	r0, [pc, #92]	@ (8000b98 <main+0x88>)
 8000b3a:	f7ff ff64 	bl	8000a06 <LoRaE5_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   lcd_position(&hi2c1,0,0); // (&hi2c,row,colon)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	4813      	ldr	r0, [pc, #76]	@ (8000b90 <main+0x80>)
 8000b44:	f7ff ff37 	bl	80009b6 <lcd_position>
	   // 1) 发送 AT 指令
	   LoRaE5_SendData(&lora,"HelloKitty");
 8000b48:	4914      	ldr	r1, [pc, #80]	@ (8000b9c <main+0x8c>)
 8000b4a:	4813      	ldr	r0, [pc, #76]	@ (8000b98 <main+0x88>)
 8000b4c:	f7ff ffaa 	bl	8000aa4 <LoRaE5_SendData>
	   char buffer[64] = {0};  // 存储 LoRa-E5 返回的数据
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	223c      	movs	r2, #60	@ 0x3c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 fcaa 	bl	80044b4 <memset>
	   HAL_UART_Receive(&huart4, (uint8_t *)buffer, sizeof(buffer), 1000);
 8000b60:	4639      	mov	r1, r7
 8000b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b66:	2240      	movs	r2, #64	@ 0x40
 8000b68:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <main+0x84>)
 8000b6a:	f002 fed2 	bl	8003912 <HAL_UART_Receive>
	   lcd_print(&hi2c1, buffer);
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <main+0x80>)
 8000b74:	f7ff fef6 	bl	8000964 <lcd_print>
	   send_string("buffer : ");
 8000b78:	4809      	ldr	r0, [pc, #36]	@ (8000ba0 <main+0x90>)
 8000b7a:	f7ff ffb3 	bl	8000ae4 <send_string>
	   send_string(buffer);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ffaf 	bl	8000ae4 <send_string>
  {
 8000b86:	bf00      	nop
 8000b88:	e7d9      	b.n	8000b3e <main+0x2e>
 8000b8a:	bf00      	nop
 8000b8c:	200000cc 	.word	0x200000cc
 8000b90:	20000078 	.word	0x20000078
 8000b94:	200001d8 	.word	0x200001d8
 8000b98:	200000d0 	.word	0x200000d0
 8000b9c:	08004e0c 	.word	0x08004e0c
 8000ba0:	08004e18 	.word	0x08004e18

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	@ 0x58
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2244      	movs	r2, #68	@ 0x44
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fc7e 	bl	80044b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bca:	f001 fab9 	bl	8002140 <HAL_PWREx_ControlVoltageScaling>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bd4:	f000 f837 	bl	8000c46 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be2:	2310      	movs	r3, #16
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bea:	2302      	movs	r3, #2
 8000bec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 faf0 	bl	80021ec <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c12:	f000 f818 	bl	8000c46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 feb8 	bl	80029a4 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c3a:	f000 f804 	bl	8000c46 <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3758      	adds	r7, #88	@ 0x58
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4a:	b672      	cpsid	i
}
 8000c4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4e:	bf00      	nop
 8000c50:	e7fd      	b.n	8000c4e <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf2:	f000 f9d9 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f003 fbe0 	bl	80044f0 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20018000 	.word	0x20018000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	200001d4 	.word	0x200001d4
 8000d64:	20000438 	.word	0x20000438

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	@ (8000de8 <MX_UART4_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000d98:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_UART4_Init+0x58>)
 8000dd0:	f002 fcc8 	bl	8003764 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000dda:	f7ff ff34 	bl	8000c46 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200001d8 	.word	0x200001d8
 8000de8:	40004c00 	.word	0x40004c00

08000dec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000df2:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <MX_USART2_UART_Init+0x6c>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000df8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e2a:	2230      	movs	r2, #48	@ 0x30
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e34:	639a      	str	r2, [r3, #56]	@ 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_USART2_UART_Init+0x68>)
 8000e40:	f002 fc90 	bl	8003764 <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 8000e4a:	f7ff fefc 	bl	8000c46 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000260 	.word	0x20000260
 8000e58:	40004400 	.word	0x40004400

08000e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0ae      	sub	sp, #184	@ 0xb8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2288      	movs	r2, #136	@ 0x88
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fb19 	bl	80044b4 <memset>
  if(uartHandle->Instance==UART4)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a42      	ldr	r2, [pc, #264]	@ (8000f90 <HAL_UART_MspInit+0x134>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d13c      	bne.n	8000f06 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 ffa7 	bl	8002dec <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea4:	f7ff fecf 	bl	8000c46 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eac:	4a39      	ldr	r2, [pc, #228]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000eae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb4:	4b37      	ldr	r3, [pc, #220]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b34      	ldr	r3, [pc, #208]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec4:	4a33      	ldr	r2, [pc, #204]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ecc:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f000 f9fc 	bl	80012fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f04:	e040      	b.n	8000f88 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a23      	ldr	r2, [pc, #140]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d13b      	bne.n	8000f88 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 ff65 	bl	8002dec <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000f28:	f7ff fe8d 	bl	8000c46 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f30:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f48:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f74:	2307      	movs	r3, #7
 8000f76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f84:	f000 f9ba 	bl	80012fc <HAL_GPIO_Init>
}
 8000f88:	bf00      	nop
 8000f8a:	37b8      	adds	r7, #184	@ 0xb8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40004c00 	.word	0x40004c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40004400 	.word	0x40004400

08000f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa0:	f7ff fee2 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	@ (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fca:	f003 fa97 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fce:	f7ff fd9f 	bl	8000b10 <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fe0:	08004eb0 	.word	0x08004eb0
  ldr r2, =_sbss
 8000fe4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fe8:	20000434 	.word	0x20000434

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_Init+0x3c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <HAL_Init+0x3c>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001004:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 f944 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f80f 	bl	8001030 <HAL_InitTick>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	e001      	b.n	8001022 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101e:	f7ff fe19 	bl	8000c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001022:	79fb      	ldrb	r3, [r7, #7]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40022000 	.word	0x40022000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <HAL_InitTick+0x6c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d023      	beq.n	800108c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <HAL_InitTick+0x70>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_InitTick+0x6c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f941 	bl	80012e2 <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10f      	bne.n	8001086 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d809      	bhi.n	8001080 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f919 	bl	80012aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_InitTick+0x74>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e007      	b.n	8001090 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e004      	b.n	8001090 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e001      	b.n	8001090 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	200002e8 	.word	0x200002e8

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200002e8 	.word	0x200002e8

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffde 	bl	80010d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	@ (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	@ (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	@ 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	@ 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff47 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff5c 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffb0 	bl	8001250 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	e17f      	b.n	800160c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8171 	beq.w	8001606 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d005      	beq.n	800133c <HAL_GPIO_Init+0x40>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d118      	bne.n	80013dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013b0:	2201      	movs	r2, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	f003 0201 	and.w	r2, r3, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d017      	beq.n	8001418 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80ac 	beq.w	8001606 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b5f      	ldr	r3, [pc, #380]	@ (800162c <HAL_GPIO_Init+0x330>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b2:	4a5e      	ldr	r2, [pc, #376]	@ (800162c <HAL_GPIO_Init+0x330>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ba:	4b5c      	ldr	r3, [pc, #368]	@ (800162c <HAL_GPIO_Init+0x330>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001630 <HAL_GPIO_Init+0x334>)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014f0:	d025      	beq.n	800153e <HAL_GPIO_Init+0x242>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001634 <HAL_GPIO_Init+0x338>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01f      	beq.n	800153a <HAL_GPIO_Init+0x23e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001638 <HAL_GPIO_Init+0x33c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x23a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4d      	ldr	r2, [pc, #308]	@ (800163c <HAL_GPIO_Init+0x340>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x236>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4c      	ldr	r2, [pc, #304]	@ (8001640 <HAL_GPIO_Init+0x344>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x232>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4b      	ldr	r2, [pc, #300]	@ (8001644 <HAL_GPIO_Init+0x348>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x22e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4a      	ldr	r2, [pc, #296]	@ (8001648 <HAL_GPIO_Init+0x34c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x22a>
 8001522:	2306      	movs	r3, #6
 8001524:	e00c      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001526:	2307      	movs	r3, #7
 8001528:	e00a      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800152e:	2304      	movs	r3, #4
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800153e:	2300      	movs	r3, #0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001550:	4937      	ldr	r1, [pc, #220]	@ (8001630 <HAL_GPIO_Init+0x334>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <HAL_GPIO_Init+0x350>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001582:	4a32      	ldr	r2, [pc, #200]	@ (800164c <HAL_GPIO_Init+0x350>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001588:	4b30      	ldr	r3, [pc, #192]	@ (800164c <HAL_GPIO_Init+0x350>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ac:	4a27      	ldr	r2, [pc, #156]	@ (800164c <HAL_GPIO_Init+0x350>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015b2:	4b26      	ldr	r3, [pc, #152]	@ (800164c <HAL_GPIO_Init+0x350>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d6:	4a1d      	ldr	r2, [pc, #116]	@ (800164c <HAL_GPIO_Init+0x350>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_GPIO_Init+0x350>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001600:	4a12      	ldr	r2, [pc, #72]	@ (800164c <HAL_GPIO_Init+0x350>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f ae78 	bne.w	800130c <HAL_GPIO_Init+0x10>
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000
 8001634:	48000400 	.word	0x48000400
 8001638:	48000800 	.word	0x48000800
 800163c:	48000c00 	.word	0x48000c00
 8001640:	48001000 	.word	0x48001000
 8001644:	48001400 	.word	0x48001400
 8001648:	48001800 	.word	0x48001800
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800166c:	e002      	b.n	8001674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e08d      	b.n	80017ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d106      	bne.n	80016ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff f808 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2224      	movs	r2, #36	@ 0x24
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e006      	b.n	8001708 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001706:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d108      	bne.n	8001722 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	e007      	b.n	8001732 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001744:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69d9      	ldr	r1, [r3, #28]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1a      	ldr	r2, [r3, #32]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	461a      	mov	r2, r3
 80017c4:	460b      	mov	r3, r1
 80017c6:	817b      	strh	r3, [r7, #10]
 80017c8:	4613      	mov	r3, r2
 80017ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	f040 80fd 	bne.w	80019d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_I2C_Master_Transmit+0x30>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e0f6      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x21e>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017f0:	f7ff fc6e 	bl	80010d0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2319      	movs	r3, #25
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 fa00 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0e1      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2221      	movs	r2, #33	@ 0x21
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2210      	movs	r2, #16
 800181e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	893a      	ldrh	r2, [r7, #8]
 8001832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	2bff      	cmp	r3, #255	@ 0xff
 8001842:	d906      	bls.n	8001852 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	22ff      	movs	r2, #255	@ 0xff
 8001848:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800184a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e007      	b.n	8001862 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800185c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001860:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001866:	2b00      	cmp	r3, #0
 8001868:	d024      	beq.n	80018b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	4b4e      	ldr	r3, [pc, #312]	@ (80019e0 <HAL_I2C_Master_Transmit+0x228>)
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 fb6f 	bl	8001f90 <I2C_TransferConfig>
 80018b2:	e066      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	8979      	ldrh	r1, [r7, #10]
 80018bc:	4b48      	ldr	r3, [pc, #288]	@ (80019e0 <HAL_I2C_Master_Transmit+0x228>)
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fb64 	bl	8001f90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018c8:	e05b      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f9f3 	bl	8001cba <I2C_WaitOnTXISFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07b      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d034      	beq.n	8001982 <HAL_I2C_Master_Transmit+0x1ca>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d130      	bne.n	8001982 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	2200      	movs	r2, #0
 8001928:	2180      	movs	r1, #128	@ 0x80
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f96c 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e04d      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	2bff      	cmp	r3, #255	@ 0xff
 8001942:	d90e      	bls.n	8001962 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	22ff      	movs	r2, #255	@ 0xff
 8001948:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194e:	b2da      	uxtb	r2, r3
 8001950:	8979      	ldrh	r1, [r7, #10]
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fb18 	bl	8001f90 <I2C_TransferConfig>
 8001960:	e00f      	b.n	8001982 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	b2da      	uxtb	r2, r3
 8001972:	8979      	ldrh	r1, [r7, #10]
 8001974:	2300      	movs	r3, #0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fb07 	bl	8001f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001986:	b29b      	uxth	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d19e      	bne.n	80018ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	6a39      	ldr	r1, [r7, #32]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f9d9 	bl	8001d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e01a      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2220      	movs	r2, #32
 80019a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <HAL_I2C_Master_Transmit+0x22c>)
 80019b4:	400b      	ands	r3, r1
 80019b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	80002000 	.word	0x80002000
 80019e4:	fe00e800 	.word	0xfe00e800

080019e8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	460b      	mov	r3, r1
 80019f6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	f040 80d6 	bne.w	8001bb6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e0cc      	b.n	8001bb8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_I2C_IsDeviceReady+0x44>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e0c5      	b.n	8001bb8 <HAL_I2C_IsDeviceReady+0x1d0>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2224      	movs	r2, #36	@ 0x24
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_I2C_IsDeviceReady+0x72>
 8001a4a:	897b      	ldrh	r3, [r7, #10]
 8001a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a58:	e006      	b.n	8001a68 <HAL_I2C_IsDeviceReady+0x80>
 8001a5a:	897b      	ldrh	r3, [r7, #10]
 8001a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb2f 	bl	80010d0 <HAL_GetTick>
 8001a72:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	bf0c      	ite	eq
 8001a82:	2301      	moveq	r3, #1
 8001a84:	2300      	movne	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001aa0:	e034      	b.n	8001b0c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d01a      	beq.n	8001ae0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aaa:	f7ff fb11 	bl	80010d0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d302      	bcc.n	8001ac0 <HAL_I2C_IsDeviceReady+0xd8>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e06b      	b.n	8001bb8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	bf0c      	ite	eq
 8001aee:	2301      	moveq	r3, #1
 8001af0:	2300      	movne	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b10      	cmp	r3, #16
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b0c:	7ffb      	ldrb	r3, [r7, #31]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <HAL_I2C_IsDeviceReady+0x130>
 8001b12:	7fbb      	ldrb	r3, [r7, #30]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0c4      	beq.n	8001aa2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d01a      	beq.n	8001b5c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2120      	movs	r1, #32
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f869 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e03b      	b.n	8001bb8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2220      	movs	r2, #32
 8001b46:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e02d      	b.n	8001bb8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	2120      	movs	r1, #32
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f84e 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e020      	b.n	8001bb8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2220      	movs	r2, #32
 8001b84:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f63f af56 	bhi.w	8001a42 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f043 0220 	orr.w	r2, r3, #32
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d103      	bne.n	8001bde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d007      	beq.n	8001bfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	619a      	str	r2, [r3, #24]
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c18:	e03b      	b.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f8d6 	bl	8001dd0 <I2C_IsErrorOccurred>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e041      	b.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d02d      	beq.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c36:	f7ff fa4b 	bl	80010d0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d302      	bcc.n	8001c4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d122      	bne.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4013      	ands	r3, r2
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d113      	bne.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f043 0220 	orr.w	r2, r3, #32
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d0b4      	beq.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cc6:	e033      	b.n	8001d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f87f 	bl	8001dd0 <I2C_IsErrorOccurred>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e031      	b.n	8001d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d025      	beq.n	8001d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce4:	f7ff f9f4 	bl	80010d0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d302      	bcc.n	8001cfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d11a      	bne.n	8001d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d013      	beq.n	8001d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e007      	b.n	8001d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d1c4      	bne.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d54:	e02f      	b.n	8001db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f838 	bl	8001dd0 <I2C_IsErrorOccurred>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e02d      	b.n	8001dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6a:	f7ff f9b1 	bl	80010d0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d11a      	bne.n	8001db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d013      	beq.n	8001db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e007      	b.n	8001dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d1c8      	bne.n	8001d56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d068      	beq.n	8001ece <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2210      	movs	r2, #16
 8001e02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e04:	e049      	b.n	8001e9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d045      	beq.n	8001e9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	f7ff f95f 	bl	80010d0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <I2C_IsErrorOccurred+0x54>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d13a      	bne.n	8001e9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e46:	d121      	bne.n	8001e8c <I2C_IsErrorOccurred+0xbc>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e4e:	d01d      	beq.n	8001e8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e50:	7cfb      	ldrb	r3, [r7, #19]
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d01a      	beq.n	8001e8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e66:	f7ff f933 	bl	80010d0 <HAL_GetTick>
 8001e6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e6c:	e00e      	b.n	8001e8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e6e:	f7ff f92f 	bl	80010d0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b19      	cmp	r3, #25
 8001e7a:	d907      	bls.n	8001e8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f043 0320 	orr.w	r3, r3, #32
 8001e82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001e8a:	e006      	b.n	8001e9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d1e9      	bne.n	8001e6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d003      	beq.n	8001eb0 <I2C_IsErrorOccurred+0xe0>
 8001ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0aa      	beq.n	8001e06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01c      	beq.n	8001f7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff fe3b 	bl	8001bc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <I2C_IsErrorOccurred+0x1bc>)
 8001f56:	400b      	ands	r3, r1
 8001f58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3728      	adds	r7, #40	@ 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	fe00e800 	.word	0xfe00e800

08001f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	817b      	strh	r3, [r7, #10]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fa2:	897b      	ldrh	r3, [r7, #10]
 8001fa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fa8:	7a7b      	ldrb	r3, [r7, #9]
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	0d5b      	lsrs	r3, r3, #21
 8001fca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <I2C_TransferConfig+0x60>)
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	ea02 0103 	and.w	r1, r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	03ff63ff 	.word	0x03ff63ff

08001ff4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	d138      	bne.n	800207c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002014:	2302      	movs	r3, #2
 8002016:	e032      	b.n	800207e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002046:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b20      	cmp	r3, #32
 800209e:	d139      	bne.n	8002114 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e033      	b.n	8002116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2224      	movs	r2, #36	@ 0x24
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <HAL_PWREx_GetVoltageRange+0x18>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800214e:	d130      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002150:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800215c:	d038      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002166:	4a1e      	ldr	r2, [pc, #120]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002168:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800216e:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2232      	movs	r2, #50	@ 0x32
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	4a1b      	ldr	r2, [pc, #108]	@ (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9b      	lsrs	r3, r3, #18
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002184:	e002      	b.n	800218c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3b01      	subs	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002198:	d102      	bne.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f2      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ac:	d110      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e00f      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b2:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021be:	d007      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c0:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021c8:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000
 80021e4:	20000000 	.word	0x20000000
 80021e8:	431bde83 	.word	0x431bde83

080021ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e3ca      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fe:	4b97      	ldr	r3, [pc, #604]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002208:	4b94      	ldr	r3, [pc, #592]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80e4 	beq.w	80023e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_RCC_OscConfig+0x4a>
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	f040 808b 	bne.w	8002344 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b01      	cmp	r3, #1
 8002232:	f040 8087 	bne.w	8002344 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002236:	4b89      	ldr	r3, [pc, #548]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_RCC_OscConfig+0x62>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e3a2      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1a      	ldr	r2, [r3, #32]
 8002252:	4b82      	ldr	r3, [pc, #520]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_RCC_OscConfig+0x7c>
 800225e:	4b7f      	ldr	r3, [pc, #508]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002266:	e005      	b.n	8002274 <HAL_RCC_OscConfig+0x88>
 8002268:	4b7c      	ldr	r3, [pc, #496]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002274:	4293      	cmp	r3, r2
 8002276:	d223      	bcs.n	80022c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fd55 	bl	8002d2c <RCC_SetFlashLatencyFromMSIRange>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e383      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800228c:	4b73      	ldr	r3, [pc, #460]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a72      	ldr	r2, [pc, #456]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002292:	f043 0308 	orr.w	r3, r3, #8
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b70      	ldr	r3, [pc, #448]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	496d      	ldr	r1, [pc, #436]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022aa:	4b6c      	ldr	r3, [pc, #432]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	4968      	ldr	r1, [pc, #416]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
 80022be:	e025      	b.n	800230c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c0:	4b66      	ldr	r3, [pc, #408]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a65      	ldr	r2, [pc, #404]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022c6:	f043 0308 	orr.w	r3, r3, #8
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b63      	ldr	r3, [pc, #396]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4960      	ldr	r1, [pc, #384]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022de:	4b5f      	ldr	r3, [pc, #380]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	495b      	ldr	r1, [pc, #364]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fd15 	bl	8002d2c <RCC_SetFlashLatencyFromMSIRange>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e343      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800230c:	f000 fc4a 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b52      	ldr	r3, [pc, #328]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	4950      	ldr	r1, [pc, #320]	@ (8002460 <HAL_RCC_OscConfig+0x274>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	4a4e      	ldr	r2, [pc, #312]	@ (8002464 <HAL_RCC_OscConfig+0x278>)
 800232a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800232c:	4b4e      	ldr	r3, [pc, #312]	@ (8002468 <HAL_RCC_OscConfig+0x27c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fe7d 	bl	8001030 <HAL_InitTick>
 8002336:	4603      	mov	r3, r0
 8002338:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d052      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	e327      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d032      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800234c:	4b43      	ldr	r3, [pc, #268]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a42      	ldr	r2, [pc, #264]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002358:	f7fe feba 	bl	80010d0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002360:	f7fe feb6 	bl	80010d0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e310      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002372:	4b3a      	ldr	r3, [pc, #232]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800237e:	4b37      	ldr	r3, [pc, #220]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a36      	ldr	r2, [pc, #216]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b34      	ldr	r3, [pc, #208]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4931      	ldr	r1, [pc, #196]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800239c:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	492c      	ldr	r1, [pc, #176]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
 80023b0:	e01a      	b.n	80023e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a29      	ldr	r2, [pc, #164]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023be:	f7fe fe87 	bl	80010d0 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c6:	f7fe fe83 	bl	80010d0 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e2dd      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d8:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x1da>
 80023e4:	e000      	b.n	80023e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d074      	beq.n	80024de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x21a>
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d10e      	bne.n	800241e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d10b      	bne.n	800241e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d064      	beq.n	80024dc <HAL_RCC_OscConfig+0x2f0>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d160      	bne.n	80024dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e2ba      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x24a>
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e026      	b.n	8002484 <HAL_RCC_OscConfig+0x298>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800243e:	d115      	bne.n	800246c <HAL_RCC_OscConfig+0x280>
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a05      	ldr	r2, [pc, #20]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002446:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a02      	ldr	r2, [pc, #8]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x298>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	08004e24 	.word	0x08004e24
 8002464:	20000000 	.word	0x20000000
 8002468:	20000004 	.word	0x20000004
 800246c:	4ba0      	ldr	r3, [pc, #640]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a9f      	ldr	r2, [pc, #636]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b9d      	ldr	r3, [pc, #628]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a9c      	ldr	r2, [pc, #624]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fe20 	bl	80010d0 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fe1c 	bl	80010d0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e276      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a6:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x2a8>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fe0c 	bl	80010d0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe fe08 	bl	80010d0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e262      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ce:	4b88      	ldr	r3, [pc, #544]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x2d0>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d060      	beq.n	80025ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x310>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d119      	bne.n	800252a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d116      	bne.n	800252a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024fc:	4b7c      	ldr	r3, [pc, #496]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_OscConfig+0x328>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e23f      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	4973      	ldr	r1, [pc, #460]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002528:	e040      	b.n	80025ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002532:	4b6f      	ldr	r3, [pc, #444]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6e      	ldr	r2, [pc, #440]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe fdc7 	bl	80010d0 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002546:	f7fe fdc3 	bl	80010d0 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e21d      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002558:	4b65      	ldr	r3, [pc, #404]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b62      	ldr	r3, [pc, #392]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	495f      	ldr	r1, [pc, #380]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
 8002578:	e018      	b.n	80025ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257a:	4b5d      	ldr	r3, [pc, #372]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a5c      	ldr	r2, [pc, #368]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fda3 	bl	80010d0 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258e:	f7fe fd9f 	bl	80010d0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1f9      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d03c      	beq.n	8002632 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01c      	beq.n	80025fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c0:	4b4b      	ldr	r3, [pc, #300]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c6:	4a4a      	ldr	r2, [pc, #296]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe fd7e 	bl	80010d0 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d8:	f7fe fd7a 	bl	80010d0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1d4      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ea:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ef      	beq.n	80025d8 <HAL_RCC_OscConfig+0x3ec>
 80025f8:	e01b      	b.n	8002632 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fa:	4b3d      	ldr	r3, [pc, #244]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002600:	4a3b      	ldr	r2, [pc, #236]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fd61 	bl	80010d0 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe fd5d 	bl	80010d0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1b7      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ef      	bne.n	8002612 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80a6 	beq.w	800278c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002644:	4b2a      	ldr	r3, [pc, #168]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4b27      	ldr	r3, [pc, #156]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	4a26      	ldr	r2, [pc, #152]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6593      	str	r3, [r2, #88]	@ 0x58
 800265c:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002668:	2301      	movs	r3, #1
 800266a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266c:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <HAL_RCC_OscConfig+0x508>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d118      	bne.n	80026aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002678:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_RCC_OscConfig+0x508>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1d      	ldr	r2, [pc, #116]	@ (80026f4 <HAL_RCC_OscConfig+0x508>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002684:	f7fe fd24 	bl	80010d0 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7fe fd20 	bl	80010d0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e17a      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_RCC_OscConfig+0x508>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4d8>
 80026b2:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026c2:	e029      	b.n	8002718 <HAL_RCC_OscConfig+0x52c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d115      	bne.n	80026f8 <HAL_RCC_OscConfig+0x50c>
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	4a03      	ldr	r2, [pc, #12]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ec:	e014      	b.n	8002718 <HAL_RCC_OscConfig+0x52c>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	4b9c      	ldr	r3, [pc, #624]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	4a9b      	ldr	r2, [pc, #620]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002708:	4b98      	ldr	r3, [pc, #608]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a97      	ldr	r2, [pc, #604]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d016      	beq.n	800274e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fcd6 	bl	80010d0 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe fcd2 	bl	80010d0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e12a      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	4b8b      	ldr	r3, [pc, #556]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ed      	beq.n	8002728 <HAL_RCC_OscConfig+0x53c>
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe fcbf 	bl	80010d0 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fcbb 	bl	80010d0 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e113      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276c:	4b7f      	ldr	r3, [pc, #508]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ed      	bne.n	8002756 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277a:	7ffb      	ldrb	r3, [r7, #31]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b7a      	ldr	r3, [pc, #488]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	4a79      	ldr	r2, [pc, #484]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80fe 	beq.w	8002992 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	2b02      	cmp	r3, #2
 800279c:	f040 80d0 	bne.w	8002940 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027a0:	4b72      	ldr	r3, [pc, #456]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d130      	bne.n	8002816 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	3b01      	subs	r3, #1
 80027c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d127      	bne.n	8002816 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d11f      	bne.n	8002816 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027e0:	2a07      	cmp	r2, #7
 80027e2:	bf14      	ite	ne
 80027e4:	2201      	movne	r2, #1
 80027e6:	2200      	moveq	r2, #0
 80027e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d113      	bne.n	8002816 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f8:	085b      	lsrs	r3, r3, #1
 80027fa:	3b01      	subs	r3, #1
 80027fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d109      	bne.n	8002816 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d06e      	beq.n	80028f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d069      	beq.n	80028f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800281c:	4b53      	ldr	r3, [pc, #332]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002828:	4b50      	ldr	r3, [pc, #320]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0ad      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002838:	4b4c      	ldr	r3, [pc, #304]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a4b      	ldr	r2, [pc, #300]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800283e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002842:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002844:	f7fe fc44 	bl	80010d0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe fc40 	bl	80010d0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e09a      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285e:	4b43      	ldr	r3, [pc, #268]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286a:	4b40      	ldr	r3, [pc, #256]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800287a:	3a01      	subs	r2, #1
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	4311      	orrs	r1, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002884:	0212      	lsls	r2, r2, #8
 8002886:	4311      	orrs	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800288c:	0852      	lsrs	r2, r2, #1
 800288e:	3a01      	subs	r2, #1
 8002890:	0552      	lsls	r2, r2, #21
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002898:	0852      	lsrs	r2, r2, #1
 800289a:	3a01      	subs	r2, #1
 800289c:	0652      	lsls	r2, r2, #25
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028a4:	0912      	lsrs	r2, r2, #4
 80028a6:	0452      	lsls	r2, r2, #17
 80028a8:	430a      	orrs	r2, r1
 80028aa:	4930      	ldr	r1, [pc, #192]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028b0:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a2d      	ldr	r2, [pc, #180]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80028b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028bc:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a2a      	ldr	r2, [pc, #168]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c8:	f7fe fc02 	bl	80010d0 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fe fbfe 	bl	80010d0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e058      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	4b22      	ldr	r3, [pc, #136]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ee:	e050      	b.n	8002992 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e04f      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f4:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d148      	bne.n	8002992 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002900:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800290c:	4b17      	ldr	r3, [pc, #92]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a16      	ldr	r2, [pc, #88]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002918:	f7fe fbda 	bl	80010d0 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fbd6 	bl	80010d0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e030      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x734>
 800293e:	e028      	b.n	8002992 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d023      	beq.n	800298e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a08      	ldr	r2, [pc, #32]	@ (800296c <HAL_RCC_OscConfig+0x780>)
 800294c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe fbbd 	bl	80010d0 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002958:	e00c      	b.n	8002974 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fbb9 	bl	80010d0 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d905      	bls.n	8002974 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e013      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
 800296c:	40021000 	.word	0x40021000
 8002970:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ec      	bne.n	800295a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	4905      	ldr	r1, [pc, #20]	@ (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_OscConfig+0x7b4>)
 8002988:	4013      	ands	r3, r2
 800298a:	60cb      	str	r3, [r1, #12]
 800298c:	e001      	b.n	8002992 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	feeefffc 	.word	0xfeeefffc

080029a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0e7      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b75      	ldr	r3, [pc, #468]	@ (8002b90 <HAL_RCC_ClockConfig+0x1ec>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d910      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b72      	ldr	r3, [pc, #456]	@ (8002b90 <HAL_RCC_ClockConfig+0x1ec>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 0207 	bic.w	r2, r3, #7
 80029ce:	4970      	ldr	r1, [pc, #448]	@ (8002b90 <HAL_RCC_ClockConfig+0x1ec>)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002b90 <HAL_RCC_ClockConfig+0x1ec>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0cf      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d010      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	4b66      	ldr	r3, [pc, #408]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d908      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b63      	ldr	r3, [pc, #396]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4960      	ldr	r1, [pc, #384]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d04c      	beq.n	8002abc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d121      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0a6      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a42:	4b54      	ldr	r3, [pc, #336]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d115      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e09a      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e08e      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e086      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b46      	ldr	r3, [pc, #280]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4943      	ldr	r1, [pc, #268]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fb20 	bl	80010d0 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe fb1c 	bl	80010d0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e06e      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	4b31      	ldr	r3, [pc, #196]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d208      	bcs.n	8002aea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	492b      	ldr	r1, [pc, #172]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aea:	4b29      	ldr	r3, [pc, #164]	@ (8002b90 <HAL_RCC_ClockConfig+0x1ec>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d210      	bcs.n	8002b1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af8:	4b25      	ldr	r3, [pc, #148]	@ (8002b90 <HAL_RCC_ClockConfig+0x1ec>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 0207 	bic.w	r2, r3, #7
 8002b00:	4923      	ldr	r1, [pc, #140]	@ (8002b90 <HAL_RCC_ClockConfig+0x1ec>)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b08:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e036      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b26:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4918      	ldr	r1, [pc, #96]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b44:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4910      	ldr	r1, [pc, #64]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b58:	f000 f824 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	490b      	ldr	r1, [pc, #44]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f4>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
 8002b74:	4a09      	ldr	r2, [pc, #36]	@ (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002b76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fa57 	bl	8001030 <HAL_InitTick>
 8002b82:	4603      	mov	r3, r0
 8002b84:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b86:	7afb      	ldrb	r3, [r7, #11]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40022000 	.word	0x40022000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	08004e24 	.word	0x08004e24
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000004 	.word	0x20000004

08002ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d121      	bne.n	8002c16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d11e      	bne.n	8002c16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bd8:	4b34      	ldr	r3, [pc, #208]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002be4:	4b31      	ldr	r3, [pc, #196]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e005      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c00:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10d      	bne.n	8002c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d102      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	e004      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c28:	4b23      	ldr	r3, [pc, #140]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d134      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c32:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d003      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0xac>
 8002c48:	e005      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c4c:	617b      	str	r3, [r7, #20]
      break;
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c50:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c52:	617b      	str	r3, [r7, #20]
      break;
 8002c54:	e002      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	617b      	str	r3, [r7, #20]
      break;
 8002c5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c5c:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	3301      	adds	r3, #1
 8002c68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	fb03 f202 	mul.w	r2, r3, r2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x108>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	0e5b      	lsrs	r3, r3, #25
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c9c:	69bb      	ldr	r3, [r7, #24]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3724      	adds	r7, #36	@ 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08004e3c 	.word	0x08004e3c
 8002cb4:	00f42400 	.word	0x00f42400
 8002cb8:	007a1200 	.word	0x007a1200

08002cbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	@ (8002cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000000 	.word	0x20000000

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cd8:	f7ff fff0 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4904      	ldr	r1, [pc, #16]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08004e34 	.word	0x08004e34

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d04:	f7ff ffda 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0adb      	lsrs	r3, r3, #11
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08004e34 	.word	0x08004e34

08002d2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d38:	4b2a      	ldr	r3, [pc, #168]	@ (8002de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d44:	f7ff f9ee 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002d48:	6178      	str	r0, [r7, #20]
 8002d4a:	e014      	b.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	4b25      	ldr	r3, [pc, #148]	@ (8002de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	4a24      	ldr	r2, [pc, #144]	@ (8002de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d58:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d64:	f7ff f9de 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002d68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7c:	d10b      	bne.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b80      	cmp	r3, #128	@ 0x80
 8002d82:	d919      	bls.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d88:	d902      	bls.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	e013      	b.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d90:	2301      	movs	r3, #1
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	e010      	b.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b80      	cmp	r3, #128	@ 0x80
 8002d9a:	d902      	bls.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	e00a      	b.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b80      	cmp	r3, #128	@ 0x80
 8002da6:	d102      	bne.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da8:	2302      	movs	r3, #2
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e004      	b.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b70      	cmp	r3, #112	@ 0x70
 8002db2:	d101      	bne.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002db4:	2301      	movs	r3, #1
 8002db6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 0207 	bic.w	r2, r3, #7
 8002dc0:	4909      	ldr	r1, [pc, #36]	@ (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dc8:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40022000 	.word	0x40022000

08002dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002df4:	2300      	movs	r3, #0
 8002df6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002df8:	2300      	movs	r3, #0
 8002dfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d041      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e10:	d02a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e16:	d824      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e22:	d81e      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e2c:	d010      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e2e:	e018      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e30:	4b86      	ldr	r3, [pc, #536]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a85      	ldr	r2, [pc, #532]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e3c:	e015      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fabb 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e4e:	e00c      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3320      	adds	r3, #32
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fba6 	bl	80035a8 <RCCEx_PLLSAI2_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e60:	e003      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	74fb      	strb	r3, [r7, #19]
      break;
 8002e66:	e000      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10b      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e70:	4b76      	ldr	r3, [pc, #472]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e7e:	4973      	ldr	r1, [pc, #460]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e86:	e001      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d041      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ea0:	d02a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ea2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ea6:	d824      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ea8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eb2:	d81e      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ec0:	4b62      	ldr	r3, [pc, #392]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a61      	ldr	r2, [pc, #388]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ecc:	e015      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fa73 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ede:	e00c      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3320      	adds	r3, #32
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fb5e 	bl	80035a8 <RCCEx_PLLSAI2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef0:	e003      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ef6:	e000      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f00:	4b52      	ldr	r3, [pc, #328]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f0e:	494f      	ldr	r1, [pc, #316]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f16:	e001      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80a0 	beq.w	800306a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f2e:	4b47      	ldr	r3, [pc, #284]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f44:	4b41      	ldr	r3, [pc, #260]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f48:	4a40      	ldr	r2, [pc, #256]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f50:	4b3e      	ldr	r3, [pc, #248]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f60:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3a      	ldr	r2, [pc, #232]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f6c:	f7fe f8b0 	bl	80010d0 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f72:	e009      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f74:	f7fe f8ac 	bl	80010d0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d902      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	74fb      	strb	r3, [r7, #19]
        break;
 8002f86:	e005      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f88:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ef      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d15c      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01f      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d019      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fb8:	4b24      	ldr	r3, [pc, #144]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fc4:	4b21      	ldr	r3, [pc, #132]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fca:	4a20      	ldr	r2, [pc, #128]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fda:	4a1c      	ldr	r2, [pc, #112]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fe4:	4a19      	ldr	r2, [pc, #100]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d016      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe f86b 	bl	80010d0 <HAL_GetTick>
 8002ffa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffc:	e00b      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe f867 	bl	80010d0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d902      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	74fb      	strb	r3, [r7, #19]
            break;
 8003014:	e006      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003016:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ec      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10c      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800303a:	4904      	ldr	r1, [pc, #16]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003042:	e009      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	74bb      	strb	r3, [r7, #18]
 8003048:	e006      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003058:	7c7b      	ldrb	r3, [r7, #17]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d105      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305e:	4b9e      	ldr	r3, [pc, #632]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003062:	4a9d      	ldr	r2, [pc, #628]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003068:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003076:	4b98      	ldr	r3, [pc, #608]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307c:	f023 0203 	bic.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	4994      	ldr	r1, [pc, #592]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003098:	4b8f      	ldr	r3, [pc, #572]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	f023 020c 	bic.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a6:	498c      	ldr	r1, [pc, #560]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030ba:	4b87      	ldr	r3, [pc, #540]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	4983      	ldr	r1, [pc, #524]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030dc:	4b7e      	ldr	r3, [pc, #504]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	497b      	ldr	r1, [pc, #492]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030fe:	4b76      	ldr	r3, [pc, #472]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310c:	4972      	ldr	r1, [pc, #456]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003120:	4b6d      	ldr	r3, [pc, #436]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	496a      	ldr	r1, [pc, #424]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003142:	4b65      	ldr	r3, [pc, #404]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	4961      	ldr	r1, [pc, #388]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003164:	4b5c      	ldr	r3, [pc, #368]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003172:	4959      	ldr	r1, [pc, #356]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003186:	4b54      	ldr	r3, [pc, #336]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003194:	4950      	ldr	r1, [pc, #320]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031a8:	4b4b      	ldr	r3, [pc, #300]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b6:	4948      	ldr	r1, [pc, #288]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ca:	4b43      	ldr	r3, [pc, #268]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d8:	493f      	ldr	r1, [pc, #252]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d028      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ec:	4b3a      	ldr	r3, [pc, #232]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031fa:	4937      	ldr	r1, [pc, #220]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800320a:	d106      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320c:	4b32      	ldr	r3, [pc, #200]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a31      	ldr	r2, [pc, #196]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003216:	60d3      	str	r3, [r2, #12]
 8003218:	e011      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003222:	d10c      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	2101      	movs	r1, #1
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f8c8 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d028      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800324a:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003250:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003258:	491f      	ldr	r1, [pc, #124]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003268:	d106      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800326a:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4a1a      	ldr	r2, [pc, #104]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003274:	60d3      	str	r3, [r2, #12]
 8003276:	e011      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f899 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d02b      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b6:	4908      	ldr	r1, [pc, #32]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032c6:	d109      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c8:	4b03      	ldr	r3, [pc, #12]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a02      	ldr	r2, [pc, #8]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032d2:	60d3      	str	r3, [r2, #12]
 80032d4:	e014      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2101      	movs	r1, #1
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f867 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d02f      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800330c:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800331a:	4928      	ldr	r1, [pc, #160]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800332a:	d10d      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	2102      	movs	r1, #2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f844 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d014      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	74bb      	strb	r3, [r7, #18]
 8003346:	e011      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800334c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003350:	d10c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3320      	adds	r3, #32
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f925 	bl	80035a8 <RCCEx_PLLSAI2_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003378:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003386:	490d      	ldr	r1, [pc, #52]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800339a:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033aa:	4904      	ldr	r1, [pc, #16]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000

080033c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ce:	4b75      	ldr	r3, [pc, #468]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d018      	beq.n	800340c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033da:	4b72      	ldr	r3, [pc, #456]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0203 	and.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d10d      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
       ||
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033f2:	4b6c      	ldr	r3, [pc, #432]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
       ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d047      	beq.n	8003496 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
 800340a:	e044      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d018      	beq.n	8003446 <RCCEx_PLLSAI1_Config+0x86>
 8003414:	2b03      	cmp	r3, #3
 8003416:	d825      	bhi.n	8003464 <RCCEx_PLLSAI1_Config+0xa4>
 8003418:	2b01      	cmp	r3, #1
 800341a:	d002      	beq.n	8003422 <RCCEx_PLLSAI1_Config+0x62>
 800341c:	2b02      	cmp	r3, #2
 800341e:	d009      	beq.n	8003434 <RCCEx_PLLSAI1_Config+0x74>
 8003420:	e020      	b.n	8003464 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003422:	4b60      	ldr	r3, [pc, #384]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11d      	bne.n	800346a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003432:	e01a      	b.n	800346a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003434:	4b5b      	ldr	r3, [pc, #364]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d116      	bne.n	800346e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003444:	e013      	b.n	800346e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003446:	4b57      	ldr	r3, [pc, #348]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10f      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003452:	4b54      	ldr	r3, [pc, #336]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003462:	e006      	b.n	8003472 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      break;
 8003468:	e004      	b.n	8003474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003472:	bf00      	nop
    }

    if(status == HAL_OK)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10d      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800347a:	4b4a      	ldr	r3, [pc, #296]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	430b      	orrs	r3, r1
 8003490:	4944      	ldr	r1, [pc, #272]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d17d      	bne.n	8003598 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800349c:	4b41      	ldr	r3, [pc, #260]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a40      	ldr	r2, [pc, #256]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a8:	f7fd fe12 	bl	80010d0 <HAL_GetTick>
 80034ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ae:	e009      	b.n	80034c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b0:	f7fd fe0e 	bl	80010d0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d902      	bls.n	80034c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	73fb      	strb	r3, [r7, #15]
        break;
 80034c2:	e005      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c4:	4b37      	ldr	r3, [pc, #220]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ef      	bne.n	80034b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d160      	bne.n	8003598 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d111      	bne.n	8003500 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034dc:	4b31      	ldr	r3, [pc, #196]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80034e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6892      	ldr	r2, [r2, #8]
 80034ec:	0211      	lsls	r1, r2, #8
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68d2      	ldr	r2, [r2, #12]
 80034f2:	0912      	lsrs	r2, r2, #4
 80034f4:	0452      	lsls	r2, r2, #17
 80034f6:	430a      	orrs	r2, r1
 80034f8:	492a      	ldr	r1, [pc, #168]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	610b      	str	r3, [r1, #16]
 80034fe:	e027      	b.n	8003550 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d112      	bne.n	800352c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003506:	4b27      	ldr	r3, [pc, #156]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800350e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	0211      	lsls	r1, r2, #8
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6912      	ldr	r2, [r2, #16]
 800351c:	0852      	lsrs	r2, r2, #1
 800351e:	3a01      	subs	r2, #1
 8003520:	0552      	lsls	r2, r2, #21
 8003522:	430a      	orrs	r2, r1
 8003524:	491f      	ldr	r1, [pc, #124]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]
 800352a:	e011      	b.n	8003550 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800352c:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6892      	ldr	r2, [r2, #8]
 800353c:	0211      	lsls	r1, r2, #8
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6952      	ldr	r2, [r2, #20]
 8003542:	0852      	lsrs	r2, r2, #1
 8003544:	3a01      	subs	r2, #1
 8003546:	0652      	lsls	r2, r2, #25
 8003548:	430a      	orrs	r2, r1
 800354a:	4916      	ldr	r1, [pc, #88]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354c:	4313      	orrs	r3, r2
 800354e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003550:	4b14      	ldr	r3, [pc, #80]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800355a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fd fdb8 	bl	80010d0 <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003562:	e009      	b.n	8003578 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003564:	f7fd fdb4 	bl	80010d0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	73fb      	strb	r3, [r7, #15]
          break;
 8003576:	e005      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003578:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	4904      	ldr	r1, [pc, #16]	@ (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000

080035a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d018      	beq.n	80035f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035c2:	4b67      	ldr	r3, [pc, #412]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0203 	and.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10d      	bne.n	80035ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
       ||
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035da:	4b61      	ldr	r3, [pc, #388]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d047      	beq.n	800367e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	e044      	b.n	800367e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d018      	beq.n	800362e <RCCEx_PLLSAI2_Config+0x86>
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d825      	bhi.n	800364c <RCCEx_PLLSAI2_Config+0xa4>
 8003600:	2b01      	cmp	r3, #1
 8003602:	d002      	beq.n	800360a <RCCEx_PLLSAI2_Config+0x62>
 8003604:	2b02      	cmp	r3, #2
 8003606:	d009      	beq.n	800361c <RCCEx_PLLSAI2_Config+0x74>
 8003608:	e020      	b.n	800364c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800360a:	4b55      	ldr	r3, [pc, #340]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361a:	e01a      	b.n	8003652 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800361c:	4b50      	ldr	r3, [pc, #320]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d116      	bne.n	8003656 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e013      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362e:	4b4c      	ldr	r3, [pc, #304]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800363a:	4b49      	ldr	r3, [pc, #292]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800364a:	e006      	b.n	800365a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e004      	b.n	800365c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003652:	bf00      	nop
 8003654:	e002      	b.n	800365c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365a:	bf00      	nop
    }

    if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10d      	bne.n	800367e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003662:	4b3f      	ldr	r3, [pc, #252]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	430b      	orrs	r3, r1
 8003678:	4939      	ldr	r1, [pc, #228]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367a:	4313      	orrs	r3, r2
 800367c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d167      	bne.n	8003754 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003684:	4b36      	ldr	r3, [pc, #216]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a35      	ldr	r2, [pc, #212]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fd fd1e 	bl	80010d0 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003696:	e009      	b.n	80036ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003698:	f7fd fd1a 	bl	80010d0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	73fb      	strb	r3, [r7, #15]
        break;
 80036aa:	e005      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ef      	bne.n	8003698 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d14a      	bne.n	8003754 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d111      	bne.n	80036e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c4:	4b26      	ldr	r3, [pc, #152]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6892      	ldr	r2, [r2, #8]
 80036d4:	0211      	lsls	r1, r2, #8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68d2      	ldr	r2, [r2, #12]
 80036da:	0912      	lsrs	r2, r2, #4
 80036dc:	0452      	lsls	r2, r2, #17
 80036de:	430a      	orrs	r2, r1
 80036e0:	491f      	ldr	r1, [pc, #124]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	614b      	str	r3, [r1, #20]
 80036e6:	e011      	b.n	800370c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	0211      	lsls	r1, r2, #8
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6912      	ldr	r2, [r2, #16]
 80036fe:	0852      	lsrs	r2, r2, #1
 8003700:	3a01      	subs	r2, #1
 8003702:	0652      	lsls	r2, r2, #25
 8003704:	430a      	orrs	r2, r1
 8003706:	4916      	ldr	r1, [pc, #88]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003708:	4313      	orrs	r3, r2
 800370a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800370c:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003716:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd fcda 	bl	80010d0 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800371e:	e009      	b.n	8003734 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003720:	f7fd fcd6 	bl	80010d0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	73fb      	strb	r3, [r7, #15]
          break;
 8003732:	e005      	b.n	8003740 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003734:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003746:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	4904      	ldr	r1, [pc, #16]	@ (8003760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	4313      	orrs	r3, r2
 8003752:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000

08003764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e040      	b.n	80037f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd fb68 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	@ 0x24
 8003790:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fc32 	bl	8004014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f977 	bl	8003aa4 <UART_SetConfig>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e01b      	b.n	80037f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fcb1 	bl	8004158 <UART_CheckIdleState>
 80037f6:	4603      	mov	r3, r0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003814:	2b20      	cmp	r3, #32
 8003816:	d177      	bne.n	8003908 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Transmit+0x24>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e070      	b.n	800390a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2221      	movs	r2, #33	@ 0x21
 8003834:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003836:	f7fd fc4b 	bl	80010d0 <HAL_GetTick>
 800383a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003854:	d108      	bne.n	8003868 <HAL_UART_Transmit+0x68>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e003      	b.n	8003870 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003870:	e02f      	b.n	80038d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	@ 0x80
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fd13 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e03b      	b.n	800390a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	881a      	ldrh	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a4:	b292      	uxth	r2, r2
 80038a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	3302      	adds	r3, #2
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	e007      	b.n	80038c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3301      	adds	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1c9      	bne.n	8003872 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2140      	movs	r1, #64	@ 0x40
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fcdd 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e005      	b.n	800390a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08a      	sub	sp, #40	@ 0x28
 8003916:	af02      	add	r7, sp, #8
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003928:	2b20      	cmp	r3, #32
 800392a:	f040 80b6 	bne.w	8003a9a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_UART_Receive+0x28>
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0ae      	b.n	8003a9c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2222      	movs	r2, #34	@ 0x22
 800394a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003954:	f7fd fbbc 	bl	80010d0 <HAL_GetTick>
 8003958:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003972:	d10e      	bne.n	8003992 <HAL_UART_Receive+0x80>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_UART_Receive+0x76>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003982:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003986:	e02d      	b.n	80039e4 <HAL_UART_Receive+0xd2>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	22ff      	movs	r2, #255	@ 0xff
 800398c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003990:	e028      	b.n	80039e4 <HAL_UART_Receive+0xd2>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <HAL_UART_Receive+0xa4>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <HAL_UART_Receive+0x9a>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	22ff      	movs	r2, #255	@ 0xff
 80039a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039aa:	e01b      	b.n	80039e4 <HAL_UART_Receive+0xd2>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	227f      	movs	r2, #127	@ 0x7f
 80039b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039b4:	e016      	b.n	80039e4 <HAL_UART_Receive+0xd2>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039be:	d10d      	bne.n	80039dc <HAL_UART_Receive+0xca>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <HAL_UART_Receive+0xc0>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	227f      	movs	r2, #127	@ 0x7f
 80039cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039d0:	e008      	b.n	80039e4 <HAL_UART_Receive+0xd2>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	223f      	movs	r2, #63	@ 0x3f
 80039d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039da:	e003      	b.n	80039e4 <HAL_UART_Receive+0xd2>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f4:	d108      	bne.n	8003a08 <HAL_UART_Receive+0xf6>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e003      	b.n	8003a10 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a10:	e037      	b.n	8003a82 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2120      	movs	r1, #32
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fc43 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e033      	b.n	8003a9c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	8a7b      	ldrh	r3, [r7, #18]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	3302      	adds	r3, #2
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e00d      	b.n	8003a70 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	8a7b      	ldrh	r3, [r7, #18]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	4013      	ands	r3, r2
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1c1      	bne.n	8003a12 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b08a      	sub	sp, #40	@ 0x28
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4ba4      	ldr	r3, [pc, #656]	@ (8003d64 <UART_SetConfig+0x2c0>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a99      	ldr	r2, [pc, #612]	@ (8003d68 <UART_SetConfig+0x2c4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a90      	ldr	r2, [pc, #576]	@ (8003d6c <UART_SetConfig+0x2c8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d126      	bne.n	8003b7c <UART_SetConfig+0xd8>
 8003b2e:	4b90      	ldr	r3, [pc, #576]	@ (8003d70 <UART_SetConfig+0x2cc>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d81b      	bhi.n	8003b74 <UART_SetConfig+0xd0>
 8003b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b44 <UART_SetConfig+0xa0>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b55 	.word	0x08003b55
 8003b48:	08003b65 	.word	0x08003b65
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b6d 	.word	0x08003b6d
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5a:	e116      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b62:	e112      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003b64:	2304      	movs	r3, #4
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6a:	e10e      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b72:	e10a      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003b74:	2310      	movs	r3, #16
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7a:	e106      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a7c      	ldr	r2, [pc, #496]	@ (8003d74 <UART_SetConfig+0x2d0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d138      	bne.n	8003bf8 <UART_SetConfig+0x154>
 8003b86:	4b7a      	ldr	r3, [pc, #488]	@ (8003d70 <UART_SetConfig+0x2cc>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b0c      	cmp	r3, #12
 8003b92:	d82d      	bhi.n	8003bf0 <UART_SetConfig+0x14c>
 8003b94:	a201      	add	r2, pc, #4	@ (adr r2, 8003b9c <UART_SetConfig+0xf8>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003bf1 	.word	0x08003bf1
 8003ba4:	08003bf1 	.word	0x08003bf1
 8003ba8:	08003bf1 	.word	0x08003bf1
 8003bac:	08003be1 	.word	0x08003be1
 8003bb0:	08003bf1 	.word	0x08003bf1
 8003bb4:	08003bf1 	.word	0x08003bf1
 8003bb8:	08003bf1 	.word	0x08003bf1
 8003bbc:	08003bd9 	.word	0x08003bd9
 8003bc0:	08003bf1 	.word	0x08003bf1
 8003bc4:	08003bf1 	.word	0x08003bf1
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003be9 	.word	0x08003be9
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd6:	e0d8      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bde:	e0d4      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003be0:	2304      	movs	r3, #4
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be6:	e0d0      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003be8:	2308      	movs	r3, #8
 8003bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bee:	e0cc      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf6:	e0c8      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8003d78 <UART_SetConfig+0x2d4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d125      	bne.n	8003c4e <UART_SetConfig+0x1aa>
 8003c02:	4b5b      	ldr	r3, [pc, #364]	@ (8003d70 <UART_SetConfig+0x2cc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c0c:	2b30      	cmp	r3, #48	@ 0x30
 8003c0e:	d016      	beq.n	8003c3e <UART_SetConfig+0x19a>
 8003c10:	2b30      	cmp	r3, #48	@ 0x30
 8003c12:	d818      	bhi.n	8003c46 <UART_SetConfig+0x1a2>
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d00a      	beq.n	8003c2e <UART_SetConfig+0x18a>
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d814      	bhi.n	8003c46 <UART_SetConfig+0x1a2>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <UART_SetConfig+0x182>
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d008      	beq.n	8003c36 <UART_SetConfig+0x192>
 8003c24:	e00f      	b.n	8003c46 <UART_SetConfig+0x1a2>
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2c:	e0ad      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c34:	e0a9      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c36:	2304      	movs	r3, #4
 8003c38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3c:	e0a5      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c44:	e0a1      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c46:	2310      	movs	r3, #16
 8003c48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4c:	e09d      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a4a      	ldr	r2, [pc, #296]	@ (8003d7c <UART_SetConfig+0x2d8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d125      	bne.n	8003ca4 <UART_SetConfig+0x200>
 8003c58:	4b45      	ldr	r3, [pc, #276]	@ (8003d70 <UART_SetConfig+0x2cc>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c64:	d016      	beq.n	8003c94 <UART_SetConfig+0x1f0>
 8003c66:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c68:	d818      	bhi.n	8003c9c <UART_SetConfig+0x1f8>
 8003c6a:	2b80      	cmp	r3, #128	@ 0x80
 8003c6c:	d00a      	beq.n	8003c84 <UART_SetConfig+0x1e0>
 8003c6e:	2b80      	cmp	r3, #128	@ 0x80
 8003c70:	d814      	bhi.n	8003c9c <UART_SetConfig+0x1f8>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <UART_SetConfig+0x1d8>
 8003c76:	2b40      	cmp	r3, #64	@ 0x40
 8003c78:	d008      	beq.n	8003c8c <UART_SetConfig+0x1e8>
 8003c7a:	e00f      	b.n	8003c9c <UART_SetConfig+0x1f8>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c82:	e082      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8a:	e07e      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c92:	e07a      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c94:	2308      	movs	r3, #8
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9a:	e076      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca2:	e072      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a35      	ldr	r2, [pc, #212]	@ (8003d80 <UART_SetConfig+0x2dc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d12a      	bne.n	8003d04 <UART_SetConfig+0x260>
 8003cae:	4b30      	ldr	r3, [pc, #192]	@ (8003d70 <UART_SetConfig+0x2cc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cbc:	d01a      	beq.n	8003cf4 <UART_SetConfig+0x250>
 8003cbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cc2:	d81b      	bhi.n	8003cfc <UART_SetConfig+0x258>
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc8:	d00c      	beq.n	8003ce4 <UART_SetConfig+0x240>
 8003cca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cce:	d815      	bhi.n	8003cfc <UART_SetConfig+0x258>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <UART_SetConfig+0x238>
 8003cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd8:	d008      	beq.n	8003cec <UART_SetConfig+0x248>
 8003cda:	e00f      	b.n	8003cfc <UART_SetConfig+0x258>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e052      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cea:	e04e      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003cec:	2304      	movs	r3, #4
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e04a      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfa:	e046      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d02:	e042      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a17      	ldr	r2, [pc, #92]	@ (8003d68 <UART_SetConfig+0x2c4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d13a      	bne.n	8003d84 <UART_SetConfig+0x2e0>
 8003d0e:	4b18      	ldr	r3, [pc, #96]	@ (8003d70 <UART_SetConfig+0x2cc>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d1c:	d01a      	beq.n	8003d54 <UART_SetConfig+0x2b0>
 8003d1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d22:	d81b      	bhi.n	8003d5c <UART_SetConfig+0x2b8>
 8003d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d28:	d00c      	beq.n	8003d44 <UART_SetConfig+0x2a0>
 8003d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d2e:	d815      	bhi.n	8003d5c <UART_SetConfig+0x2b8>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <UART_SetConfig+0x298>
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d38:	d008      	beq.n	8003d4c <UART_SetConfig+0x2a8>
 8003d3a:	e00f      	b.n	8003d5c <UART_SetConfig+0x2b8>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d42:	e022      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	e01e      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d52:	e01a      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003d54:	2308      	movs	r3, #8
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5a:	e016      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d62:	e012      	b.n	8003d8a <UART_SetConfig+0x2e6>
 8003d64:	efff69f3 	.word	0xefff69f3
 8003d68:	40008000 	.word	0x40008000
 8003d6c:	40013800 	.word	0x40013800
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40004400 	.word	0x40004400
 8003d78:	40004800 	.word	0x40004800
 8003d7c:	40004c00 	.word	0x40004c00
 8003d80:	40005000 	.word	0x40005000
 8003d84:	2310      	movs	r3, #16
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a9f      	ldr	r2, [pc, #636]	@ (800400c <UART_SetConfig+0x568>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d17a      	bne.n	8003e8a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d824      	bhi.n	8003de6 <UART_SetConfig+0x342>
 8003d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <UART_SetConfig+0x300>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dc9 	.word	0x08003dc9
 8003da8:	08003de7 	.word	0x08003de7
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003de7 	.word	0x08003de7
 8003db4:	08003dd7 	.word	0x08003dd7
 8003db8:	08003de7 	.word	0x08003de7
 8003dbc:	08003de7 	.word	0x08003de7
 8003dc0:	08003de7 	.word	0x08003de7
 8003dc4:	08003ddf 	.word	0x08003ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7fe ff84 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	61f8      	str	r0, [r7, #28]
        break;
 8003dce:	e010      	b.n	8003df2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8004010 <UART_SetConfig+0x56c>)
 8003dd2:	61fb      	str	r3, [r7, #28]
        break;
 8003dd4:	e00d      	b.n	8003df2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd6:	f7fe fee5 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8003dda:	61f8      	str	r0, [r7, #28]
        break;
 8003ddc:	e009      	b.n	8003df2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de2:	61fb      	str	r3, [r7, #28]
        break;
 8003de4:	e005      	b.n	8003df2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003df0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80fb 	beq.w	8003ff0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d305      	bcc.n	8003e16 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d903      	bls.n	8003e1e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e1c:	e0e8      	b.n	8003ff0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2200      	movs	r2, #0
 8003e22:	461c      	mov	r4, r3
 8003e24:	4615      	mov	r5, r2
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	022b      	lsls	r3, r5, #8
 8003e30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e34:	0222      	lsls	r2, r4, #8
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	6849      	ldr	r1, [r1, #4]
 8003e3a:	0849      	lsrs	r1, r1, #1
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	4688      	mov	r8, r1
 8003e40:	4681      	mov	r9, r0
 8003e42:	eb12 0a08 	adds.w	sl, r2, r8
 8003e46:	eb43 0b09 	adc.w	fp, r3, r9
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e58:	4650      	mov	r0, sl
 8003e5a:	4659      	mov	r1, fp
 8003e5c:	f7fc fa10 	bl	8000280 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4613      	mov	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e6e:	d308      	bcc.n	8003e82 <UART_SetConfig+0x3de>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e76:	d204      	bcs.n	8003e82 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	60da      	str	r2, [r3, #12]
 8003e80:	e0b6      	b.n	8003ff0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e88:	e0b2      	b.n	8003ff0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e92:	d15e      	bne.n	8003f52 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d828      	bhi.n	8003eee <UART_SetConfig+0x44a>
 8003e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <UART_SetConfig+0x400>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003eef 	.word	0x08003eef
 8003eb4:	08003edf 	.word	0x08003edf
 8003eb8:	08003eef 	.word	0x08003eef
 8003ebc:	08003eef 	.word	0x08003eef
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003ee7 	.word	0x08003ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7fe ff04 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
        break;
 8003ece:	e014      	b.n	8003efa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7fe ff16 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	61f8      	str	r0, [r7, #28]
        break;
 8003ed6:	e010      	b.n	8003efa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8004010 <UART_SetConfig+0x56c>)
 8003eda:	61fb      	str	r3, [r7, #28]
        break;
 8003edc:	e00d      	b.n	8003efa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ede:	f7fe fe61 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8003ee2:	61f8      	str	r0, [r7, #28]
        break;
 8003ee4:	e009      	b.n	8003efa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eea:	61fb      	str	r3, [r7, #28]
        break;
 8003eec:	e005      	b.n	8003efa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d077      	beq.n	8003ff0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005a      	lsls	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b0f      	cmp	r3, #15
 8003f1a:	d916      	bls.n	8003f4a <UART_SetConfig+0x4a6>
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f22:	d212      	bcs.n	8003f4a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f023 030f 	bic.w	r3, r3, #15
 8003f2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	8afb      	ldrh	r3, [r7, #22]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	8afa      	ldrh	r2, [r7, #22]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	e052      	b.n	8003ff0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f50:	e04e      	b.n	8003ff0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d827      	bhi.n	8003faa <UART_SetConfig+0x506>
 8003f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f60 <UART_SetConfig+0x4bc>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003f8d 	.word	0x08003f8d
 8003f68:	08003f95 	.word	0x08003f95
 8003f6c:	08003fab 	.word	0x08003fab
 8003f70:	08003f9b 	.word	0x08003f9b
 8003f74:	08003fab 	.word	0x08003fab
 8003f78:	08003fab 	.word	0x08003fab
 8003f7c:	08003fab 	.word	0x08003fab
 8003f80:	08003fa3 	.word	0x08003fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f84:	f7fe fea6 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8003f88:	61f8      	str	r0, [r7, #28]
        break;
 8003f8a:	e014      	b.n	8003fb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f8c:	f7fe feb8 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8003f90:	61f8      	str	r0, [r7, #28]
        break;
 8003f92:	e010      	b.n	8003fb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f94:	4b1e      	ldr	r3, [pc, #120]	@ (8004010 <UART_SetConfig+0x56c>)
 8003f96:	61fb      	str	r3, [r7, #28]
        break;
 8003f98:	e00d      	b.n	8003fb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9a:	f7fe fe03 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8003f9e:	61f8      	str	r0, [r7, #28]
        break;
 8003fa0:	e009      	b.n	8003fb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa6:	61fb      	str	r3, [r7, #28]
        break;
 8003fa8:	e005      	b.n	8003fb6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fb4:	bf00      	nop
    }

    if (pclk != 0U)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d019      	beq.n	8003ff0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	085a      	lsrs	r2, r3, #1
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	d909      	bls.n	8003fea <UART_SetConfig+0x546>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fdc:	d205      	bcs.n	8003fea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60da      	str	r2, [r3, #12]
 8003fe8:	e002      	b.n	8003ff0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ffc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004000:	4618      	mov	r0, r3
 8004002:	3728      	adds	r7, #40	@ 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800400a:	bf00      	nop
 800400c:	40008000 	.word	0x40008000
 8004010:	00f42400 	.word	0x00f42400

08004014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01a      	beq.n	800412a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004112:	d10a      	bne.n	800412a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b098      	sub	sp, #96	@ 0x60
 800415c:	af02      	add	r7, sp, #8
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004168:	f7fc ffb2 	bl	80010d0 <HAL_GetTick>
 800416c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d12e      	bne.n	80041da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f88c 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d021      	beq.n	80041da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e062      	b.n	80042a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d149      	bne.n	800427c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	2200      	movs	r2, #0
 80041f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f856 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d03c      	beq.n	800427c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	623b      	str	r3, [r7, #32]
   return(result);
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
 8004222:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3308      	adds	r3, #8
 800423a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	60fb      	str	r3, [r7, #12]
   return(result);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004254:	61fa      	str	r2, [r7, #28]
 8004256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	617b      	str	r3, [r7, #20]
   return(result);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e5      	bne.n	8004234 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e011      	b.n	80042a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3758      	adds	r7, #88	@ 0x58
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b8:	e04f      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d04b      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fc ff05 	bl	80010d0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e04e      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d037      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b80      	cmp	r3, #128	@ 0x80
 80042ee:	d034      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d031      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d110      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2208      	movs	r2, #8
 800430a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f838 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2208      	movs	r2, #8
 8004316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e029      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d111      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800433e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f81e 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0a0      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004382:	b480      	push	{r7}
 8004384:	b095      	sub	sp, #84	@ 0x54
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d118      	bne.n	800442a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	60bb      	str	r3, [r7, #8]
   return(result);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0310 	bic.w	r3, r3, #16
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	613b      	str	r3, [r7, #16]
   return(result);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e6      	bne.n	80043f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800443e:	bf00      	nop
 8004440:	3754      	adds	r7, #84	@ 0x54
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <sniprintf>:
 800444c:	b40c      	push	{r2, r3}
 800444e:	b530      	push	{r4, r5, lr}
 8004450:	4b17      	ldr	r3, [pc, #92]	@ (80044b0 <sniprintf+0x64>)
 8004452:	1e0c      	subs	r4, r1, #0
 8004454:	681d      	ldr	r5, [r3, #0]
 8004456:	b09d      	sub	sp, #116	@ 0x74
 8004458:	da08      	bge.n	800446c <sniprintf+0x20>
 800445a:	238b      	movs	r3, #139	@ 0x8b
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	b01d      	add	sp, #116	@ 0x74
 8004464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004468:	b002      	add	sp, #8
 800446a:	4770      	bx	lr
 800446c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004470:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004474:	bf14      	ite	ne
 8004476:	f104 33ff 	addne.w	r3, r4, #4294967295
 800447a:	4623      	moveq	r3, r4
 800447c:	9304      	str	r3, [sp, #16]
 800447e:	9307      	str	r3, [sp, #28]
 8004480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004484:	9002      	str	r0, [sp, #8]
 8004486:	9006      	str	r0, [sp, #24]
 8004488:	f8ad 3016 	strh.w	r3, [sp, #22]
 800448c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800448e:	ab21      	add	r3, sp, #132	@ 0x84
 8004490:	a902      	add	r1, sp, #8
 8004492:	4628      	mov	r0, r5
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	f000 f9ab 	bl	80047f0 <_svfiprintf_r>
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	bfbc      	itt	lt
 800449e:	238b      	movlt	r3, #139	@ 0x8b
 80044a0:	602b      	strlt	r3, [r5, #0]
 80044a2:	2c00      	cmp	r4, #0
 80044a4:	d0dd      	beq.n	8004462 <sniprintf+0x16>
 80044a6:	9b02      	ldr	r3, [sp, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	e7d9      	b.n	8004462 <sniprintf+0x16>
 80044ae:	bf00      	nop
 80044b0:	2000000c 	.word	0x2000000c

080044b4 <memset>:
 80044b4:	4402      	add	r2, r0
 80044b6:	4603      	mov	r3, r0
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d100      	bne.n	80044be <memset+0xa>
 80044bc:	4770      	bx	lr
 80044be:	f803 1b01 	strb.w	r1, [r3], #1
 80044c2:	e7f9      	b.n	80044b8 <memset+0x4>

080044c4 <strstr>:
 80044c4:	780a      	ldrb	r2, [r1, #0]
 80044c6:	b570      	push	{r4, r5, r6, lr}
 80044c8:	b96a      	cbnz	r2, 80044e6 <strstr+0x22>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d109      	bne.n	80044e4 <strstr+0x20>
 80044d0:	460c      	mov	r4, r1
 80044d2:	4605      	mov	r5, r0
 80044d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f6      	beq.n	80044ca <strstr+0x6>
 80044dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80044e0:	429e      	cmp	r6, r3
 80044e2:	d0f7      	beq.n	80044d4 <strstr+0x10>
 80044e4:	3001      	adds	r0, #1
 80044e6:	7803      	ldrb	r3, [r0, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ef      	bne.n	80044cc <strstr+0x8>
 80044ec:	4618      	mov	r0, r3
 80044ee:	e7ec      	b.n	80044ca <strstr+0x6>

080044f0 <__errno>:
 80044f0:	4b01      	ldr	r3, [pc, #4]	@ (80044f8 <__errno+0x8>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000000c 	.word	0x2000000c

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004534 <__libc_init_array+0x38>)
 8004500:	4c0d      	ldr	r4, [pc, #52]	@ (8004538 <__libc_init_array+0x3c>)
 8004502:	1b64      	subs	r4, r4, r5
 8004504:	10a4      	asrs	r4, r4, #2
 8004506:	2600      	movs	r6, #0
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	4d0b      	ldr	r5, [pc, #44]	@ (800453c <__libc_init_array+0x40>)
 800450e:	4c0c      	ldr	r4, [pc, #48]	@ (8004540 <__libc_init_array+0x44>)
 8004510:	f000 fc66 	bl	8004de0 <_init>
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	2600      	movs	r6, #0
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	f855 3b04 	ldr.w	r3, [r5], #4
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	f855 3b04 	ldr.w	r3, [r5], #4
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	08004ea8 	.word	0x08004ea8
 8004538:	08004ea8 	.word	0x08004ea8
 800453c:	08004ea8 	.word	0x08004ea8
 8004540:	08004eac 	.word	0x08004eac

08004544 <__retarget_lock_acquire_recursive>:
 8004544:	4770      	bx	lr

08004546 <__retarget_lock_release_recursive>:
 8004546:	4770      	bx	lr

08004548 <_free_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4605      	mov	r5, r0
 800454c:	2900      	cmp	r1, #0
 800454e:	d041      	beq.n	80045d4 <_free_r+0x8c>
 8004550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004554:	1f0c      	subs	r4, r1, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	bfb8      	it	lt
 800455a:	18e4      	addlt	r4, r4, r3
 800455c:	f000 f8e0 	bl	8004720 <__malloc_lock>
 8004560:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <_free_r+0x90>)
 8004562:	6813      	ldr	r3, [r2, #0]
 8004564:	b933      	cbnz	r3, 8004574 <_free_r+0x2c>
 8004566:	6063      	str	r3, [r4, #4]
 8004568:	6014      	str	r4, [r2, #0]
 800456a:	4628      	mov	r0, r5
 800456c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004570:	f000 b8dc 	b.w	800472c <__malloc_unlock>
 8004574:	42a3      	cmp	r3, r4
 8004576:	d908      	bls.n	800458a <_free_r+0x42>
 8004578:	6820      	ldr	r0, [r4, #0]
 800457a:	1821      	adds	r1, r4, r0
 800457c:	428b      	cmp	r3, r1
 800457e:	bf01      	itttt	eq
 8004580:	6819      	ldreq	r1, [r3, #0]
 8004582:	685b      	ldreq	r3, [r3, #4]
 8004584:	1809      	addeq	r1, r1, r0
 8004586:	6021      	streq	r1, [r4, #0]
 8004588:	e7ed      	b.n	8004566 <_free_r+0x1e>
 800458a:	461a      	mov	r2, r3
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	b10b      	cbz	r3, 8004594 <_free_r+0x4c>
 8004590:	42a3      	cmp	r3, r4
 8004592:	d9fa      	bls.n	800458a <_free_r+0x42>
 8004594:	6811      	ldr	r1, [r2, #0]
 8004596:	1850      	adds	r0, r2, r1
 8004598:	42a0      	cmp	r0, r4
 800459a:	d10b      	bne.n	80045b4 <_free_r+0x6c>
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	4401      	add	r1, r0
 80045a0:	1850      	adds	r0, r2, r1
 80045a2:	4283      	cmp	r3, r0
 80045a4:	6011      	str	r1, [r2, #0]
 80045a6:	d1e0      	bne.n	800456a <_free_r+0x22>
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	6053      	str	r3, [r2, #4]
 80045ae:	4408      	add	r0, r1
 80045b0:	6010      	str	r0, [r2, #0]
 80045b2:	e7da      	b.n	800456a <_free_r+0x22>
 80045b4:	d902      	bls.n	80045bc <_free_r+0x74>
 80045b6:	230c      	movs	r3, #12
 80045b8:	602b      	str	r3, [r5, #0]
 80045ba:	e7d6      	b.n	800456a <_free_r+0x22>
 80045bc:	6820      	ldr	r0, [r4, #0]
 80045be:	1821      	adds	r1, r4, r0
 80045c0:	428b      	cmp	r3, r1
 80045c2:	bf04      	itt	eq
 80045c4:	6819      	ldreq	r1, [r3, #0]
 80045c6:	685b      	ldreq	r3, [r3, #4]
 80045c8:	6063      	str	r3, [r4, #4]
 80045ca:	bf04      	itt	eq
 80045cc:	1809      	addeq	r1, r1, r0
 80045ce:	6021      	streq	r1, [r4, #0]
 80045d0:	6054      	str	r4, [r2, #4]
 80045d2:	e7ca      	b.n	800456a <_free_r+0x22>
 80045d4:	bd38      	pop	{r3, r4, r5, pc}
 80045d6:	bf00      	nop
 80045d8:	20000430 	.word	0x20000430

080045dc <sbrk_aligned>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	4e0f      	ldr	r6, [pc, #60]	@ (800461c <sbrk_aligned+0x40>)
 80045e0:	460c      	mov	r4, r1
 80045e2:	6831      	ldr	r1, [r6, #0]
 80045e4:	4605      	mov	r5, r0
 80045e6:	b911      	cbnz	r1, 80045ee <sbrk_aligned+0x12>
 80045e8:	f000 fba6 	bl	8004d38 <_sbrk_r>
 80045ec:	6030      	str	r0, [r6, #0]
 80045ee:	4621      	mov	r1, r4
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 fba1 	bl	8004d38 <_sbrk_r>
 80045f6:	1c43      	adds	r3, r0, #1
 80045f8:	d103      	bne.n	8004602 <sbrk_aligned+0x26>
 80045fa:	f04f 34ff 	mov.w	r4, #4294967295
 80045fe:	4620      	mov	r0, r4
 8004600:	bd70      	pop	{r4, r5, r6, pc}
 8004602:	1cc4      	adds	r4, r0, #3
 8004604:	f024 0403 	bic.w	r4, r4, #3
 8004608:	42a0      	cmp	r0, r4
 800460a:	d0f8      	beq.n	80045fe <sbrk_aligned+0x22>
 800460c:	1a21      	subs	r1, r4, r0
 800460e:	4628      	mov	r0, r5
 8004610:	f000 fb92 	bl	8004d38 <_sbrk_r>
 8004614:	3001      	adds	r0, #1
 8004616:	d1f2      	bne.n	80045fe <sbrk_aligned+0x22>
 8004618:	e7ef      	b.n	80045fa <sbrk_aligned+0x1e>
 800461a:	bf00      	nop
 800461c:	2000042c 	.word	0x2000042c

08004620 <_malloc_r>:
 8004620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004624:	1ccd      	adds	r5, r1, #3
 8004626:	f025 0503 	bic.w	r5, r5, #3
 800462a:	3508      	adds	r5, #8
 800462c:	2d0c      	cmp	r5, #12
 800462e:	bf38      	it	cc
 8004630:	250c      	movcc	r5, #12
 8004632:	2d00      	cmp	r5, #0
 8004634:	4606      	mov	r6, r0
 8004636:	db01      	blt.n	800463c <_malloc_r+0x1c>
 8004638:	42a9      	cmp	r1, r5
 800463a:	d904      	bls.n	8004646 <_malloc_r+0x26>
 800463c:	230c      	movs	r3, #12
 800463e:	6033      	str	r3, [r6, #0]
 8004640:	2000      	movs	r0, #0
 8004642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800471c <_malloc_r+0xfc>
 800464a:	f000 f869 	bl	8004720 <__malloc_lock>
 800464e:	f8d8 3000 	ldr.w	r3, [r8]
 8004652:	461c      	mov	r4, r3
 8004654:	bb44      	cbnz	r4, 80046a8 <_malloc_r+0x88>
 8004656:	4629      	mov	r1, r5
 8004658:	4630      	mov	r0, r6
 800465a:	f7ff ffbf 	bl	80045dc <sbrk_aligned>
 800465e:	1c43      	adds	r3, r0, #1
 8004660:	4604      	mov	r4, r0
 8004662:	d158      	bne.n	8004716 <_malloc_r+0xf6>
 8004664:	f8d8 4000 	ldr.w	r4, [r8]
 8004668:	4627      	mov	r7, r4
 800466a:	2f00      	cmp	r7, #0
 800466c:	d143      	bne.n	80046f6 <_malloc_r+0xd6>
 800466e:	2c00      	cmp	r4, #0
 8004670:	d04b      	beq.n	800470a <_malloc_r+0xea>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	4639      	mov	r1, r7
 8004676:	4630      	mov	r0, r6
 8004678:	eb04 0903 	add.w	r9, r4, r3
 800467c:	f000 fb5c 	bl	8004d38 <_sbrk_r>
 8004680:	4581      	cmp	r9, r0
 8004682:	d142      	bne.n	800470a <_malloc_r+0xea>
 8004684:	6821      	ldr	r1, [r4, #0]
 8004686:	1a6d      	subs	r5, r5, r1
 8004688:	4629      	mov	r1, r5
 800468a:	4630      	mov	r0, r6
 800468c:	f7ff ffa6 	bl	80045dc <sbrk_aligned>
 8004690:	3001      	adds	r0, #1
 8004692:	d03a      	beq.n	800470a <_malloc_r+0xea>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	442b      	add	r3, r5
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	f8d8 3000 	ldr.w	r3, [r8]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	bb62      	cbnz	r2, 80046fc <_malloc_r+0xdc>
 80046a2:	f8c8 7000 	str.w	r7, [r8]
 80046a6:	e00f      	b.n	80046c8 <_malloc_r+0xa8>
 80046a8:	6822      	ldr	r2, [r4, #0]
 80046aa:	1b52      	subs	r2, r2, r5
 80046ac:	d420      	bmi.n	80046f0 <_malloc_r+0xd0>
 80046ae:	2a0b      	cmp	r2, #11
 80046b0:	d917      	bls.n	80046e2 <_malloc_r+0xc2>
 80046b2:	1961      	adds	r1, r4, r5
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	6025      	str	r5, [r4, #0]
 80046b8:	bf18      	it	ne
 80046ba:	6059      	strne	r1, [r3, #4]
 80046bc:	6863      	ldr	r3, [r4, #4]
 80046be:	bf08      	it	eq
 80046c0:	f8c8 1000 	streq.w	r1, [r8]
 80046c4:	5162      	str	r2, [r4, r5]
 80046c6:	604b      	str	r3, [r1, #4]
 80046c8:	4630      	mov	r0, r6
 80046ca:	f000 f82f 	bl	800472c <__malloc_unlock>
 80046ce:	f104 000b 	add.w	r0, r4, #11
 80046d2:	1d23      	adds	r3, r4, #4
 80046d4:	f020 0007 	bic.w	r0, r0, #7
 80046d8:	1ac2      	subs	r2, r0, r3
 80046da:	bf1c      	itt	ne
 80046dc:	1a1b      	subne	r3, r3, r0
 80046de:	50a3      	strne	r3, [r4, r2]
 80046e0:	e7af      	b.n	8004642 <_malloc_r+0x22>
 80046e2:	6862      	ldr	r2, [r4, #4]
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	bf0c      	ite	eq
 80046e8:	f8c8 2000 	streq.w	r2, [r8]
 80046ec:	605a      	strne	r2, [r3, #4]
 80046ee:	e7eb      	b.n	80046c8 <_malloc_r+0xa8>
 80046f0:	4623      	mov	r3, r4
 80046f2:	6864      	ldr	r4, [r4, #4]
 80046f4:	e7ae      	b.n	8004654 <_malloc_r+0x34>
 80046f6:	463c      	mov	r4, r7
 80046f8:	687f      	ldr	r7, [r7, #4]
 80046fa:	e7b6      	b.n	800466a <_malloc_r+0x4a>
 80046fc:	461a      	mov	r2, r3
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	42a3      	cmp	r3, r4
 8004702:	d1fb      	bne.n	80046fc <_malloc_r+0xdc>
 8004704:	2300      	movs	r3, #0
 8004706:	6053      	str	r3, [r2, #4]
 8004708:	e7de      	b.n	80046c8 <_malloc_r+0xa8>
 800470a:	230c      	movs	r3, #12
 800470c:	6033      	str	r3, [r6, #0]
 800470e:	4630      	mov	r0, r6
 8004710:	f000 f80c 	bl	800472c <__malloc_unlock>
 8004714:	e794      	b.n	8004640 <_malloc_r+0x20>
 8004716:	6005      	str	r5, [r0, #0]
 8004718:	e7d6      	b.n	80046c8 <_malloc_r+0xa8>
 800471a:	bf00      	nop
 800471c:	20000430 	.word	0x20000430

08004720 <__malloc_lock>:
 8004720:	4801      	ldr	r0, [pc, #4]	@ (8004728 <__malloc_lock+0x8>)
 8004722:	f7ff bf0f 	b.w	8004544 <__retarget_lock_acquire_recursive>
 8004726:	bf00      	nop
 8004728:	20000428 	.word	0x20000428

0800472c <__malloc_unlock>:
 800472c:	4801      	ldr	r0, [pc, #4]	@ (8004734 <__malloc_unlock+0x8>)
 800472e:	f7ff bf0a 	b.w	8004546 <__retarget_lock_release_recursive>
 8004732:	bf00      	nop
 8004734:	20000428 	.word	0x20000428

08004738 <__ssputs_r>:
 8004738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800473c:	688e      	ldr	r6, [r1, #8]
 800473e:	461f      	mov	r7, r3
 8004740:	42be      	cmp	r6, r7
 8004742:	680b      	ldr	r3, [r1, #0]
 8004744:	4682      	mov	sl, r0
 8004746:	460c      	mov	r4, r1
 8004748:	4690      	mov	r8, r2
 800474a:	d82d      	bhi.n	80047a8 <__ssputs_r+0x70>
 800474c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004750:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004754:	d026      	beq.n	80047a4 <__ssputs_r+0x6c>
 8004756:	6965      	ldr	r5, [r4, #20]
 8004758:	6909      	ldr	r1, [r1, #16]
 800475a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800475e:	eba3 0901 	sub.w	r9, r3, r1
 8004762:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004766:	1c7b      	adds	r3, r7, #1
 8004768:	444b      	add	r3, r9
 800476a:	106d      	asrs	r5, r5, #1
 800476c:	429d      	cmp	r5, r3
 800476e:	bf38      	it	cc
 8004770:	461d      	movcc	r5, r3
 8004772:	0553      	lsls	r3, r2, #21
 8004774:	d527      	bpl.n	80047c6 <__ssputs_r+0x8e>
 8004776:	4629      	mov	r1, r5
 8004778:	f7ff ff52 	bl	8004620 <_malloc_r>
 800477c:	4606      	mov	r6, r0
 800477e:	b360      	cbz	r0, 80047da <__ssputs_r+0xa2>
 8004780:	6921      	ldr	r1, [r4, #16]
 8004782:	464a      	mov	r2, r9
 8004784:	f000 fae8 	bl	8004d58 <memcpy>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800478e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	6126      	str	r6, [r4, #16]
 8004796:	6165      	str	r5, [r4, #20]
 8004798:	444e      	add	r6, r9
 800479a:	eba5 0509 	sub.w	r5, r5, r9
 800479e:	6026      	str	r6, [r4, #0]
 80047a0:	60a5      	str	r5, [r4, #8]
 80047a2:	463e      	mov	r6, r7
 80047a4:	42be      	cmp	r6, r7
 80047a6:	d900      	bls.n	80047aa <__ssputs_r+0x72>
 80047a8:	463e      	mov	r6, r7
 80047aa:	6820      	ldr	r0, [r4, #0]
 80047ac:	4632      	mov	r2, r6
 80047ae:	4641      	mov	r1, r8
 80047b0:	f000 faa8 	bl	8004d04 <memmove>
 80047b4:	68a3      	ldr	r3, [r4, #8]
 80047b6:	1b9b      	subs	r3, r3, r6
 80047b8:	60a3      	str	r3, [r4, #8]
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	4433      	add	r3, r6
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	2000      	movs	r0, #0
 80047c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c6:	462a      	mov	r2, r5
 80047c8:	f000 fad4 	bl	8004d74 <_realloc_r>
 80047cc:	4606      	mov	r6, r0
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d1e0      	bne.n	8004794 <__ssputs_r+0x5c>
 80047d2:	6921      	ldr	r1, [r4, #16]
 80047d4:	4650      	mov	r0, sl
 80047d6:	f7ff feb7 	bl	8004548 <_free_r>
 80047da:	230c      	movs	r3, #12
 80047dc:	f8ca 3000 	str.w	r3, [sl]
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e7e9      	b.n	80047c2 <__ssputs_r+0x8a>
	...

080047f0 <_svfiprintf_r>:
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	4698      	mov	r8, r3
 80047f6:	898b      	ldrh	r3, [r1, #12]
 80047f8:	061b      	lsls	r3, r3, #24
 80047fa:	b09d      	sub	sp, #116	@ 0x74
 80047fc:	4607      	mov	r7, r0
 80047fe:	460d      	mov	r5, r1
 8004800:	4614      	mov	r4, r2
 8004802:	d510      	bpl.n	8004826 <_svfiprintf_r+0x36>
 8004804:	690b      	ldr	r3, [r1, #16]
 8004806:	b973      	cbnz	r3, 8004826 <_svfiprintf_r+0x36>
 8004808:	2140      	movs	r1, #64	@ 0x40
 800480a:	f7ff ff09 	bl	8004620 <_malloc_r>
 800480e:	6028      	str	r0, [r5, #0]
 8004810:	6128      	str	r0, [r5, #16]
 8004812:	b930      	cbnz	r0, 8004822 <_svfiprintf_r+0x32>
 8004814:	230c      	movs	r3, #12
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	b01d      	add	sp, #116	@ 0x74
 800481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004822:	2340      	movs	r3, #64	@ 0x40
 8004824:	616b      	str	r3, [r5, #20]
 8004826:	2300      	movs	r3, #0
 8004828:	9309      	str	r3, [sp, #36]	@ 0x24
 800482a:	2320      	movs	r3, #32
 800482c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004830:	f8cd 800c 	str.w	r8, [sp, #12]
 8004834:	2330      	movs	r3, #48	@ 0x30
 8004836:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80049d4 <_svfiprintf_r+0x1e4>
 800483a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800483e:	f04f 0901 	mov.w	r9, #1
 8004842:	4623      	mov	r3, r4
 8004844:	469a      	mov	sl, r3
 8004846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800484a:	b10a      	cbz	r2, 8004850 <_svfiprintf_r+0x60>
 800484c:	2a25      	cmp	r2, #37	@ 0x25
 800484e:	d1f9      	bne.n	8004844 <_svfiprintf_r+0x54>
 8004850:	ebba 0b04 	subs.w	fp, sl, r4
 8004854:	d00b      	beq.n	800486e <_svfiprintf_r+0x7e>
 8004856:	465b      	mov	r3, fp
 8004858:	4622      	mov	r2, r4
 800485a:	4629      	mov	r1, r5
 800485c:	4638      	mov	r0, r7
 800485e:	f7ff ff6b 	bl	8004738 <__ssputs_r>
 8004862:	3001      	adds	r0, #1
 8004864:	f000 80a7 	beq.w	80049b6 <_svfiprintf_r+0x1c6>
 8004868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800486a:	445a      	add	r2, fp
 800486c:	9209      	str	r2, [sp, #36]	@ 0x24
 800486e:	f89a 3000 	ldrb.w	r3, [sl]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 809f 	beq.w	80049b6 <_svfiprintf_r+0x1c6>
 8004878:	2300      	movs	r3, #0
 800487a:	f04f 32ff 	mov.w	r2, #4294967295
 800487e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004882:	f10a 0a01 	add.w	sl, sl, #1
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	9307      	str	r3, [sp, #28]
 800488a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800488e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004890:	4654      	mov	r4, sl
 8004892:	2205      	movs	r2, #5
 8004894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004898:	484e      	ldr	r0, [pc, #312]	@ (80049d4 <_svfiprintf_r+0x1e4>)
 800489a:	f7fb fca1 	bl	80001e0 <memchr>
 800489e:	9a04      	ldr	r2, [sp, #16]
 80048a0:	b9d8      	cbnz	r0, 80048da <_svfiprintf_r+0xea>
 80048a2:	06d0      	lsls	r0, r2, #27
 80048a4:	bf44      	itt	mi
 80048a6:	2320      	movmi	r3, #32
 80048a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048ac:	0711      	lsls	r1, r2, #28
 80048ae:	bf44      	itt	mi
 80048b0:	232b      	movmi	r3, #43	@ 0x2b
 80048b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048b6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80048bc:	d015      	beq.n	80048ea <_svfiprintf_r+0xfa>
 80048be:	9a07      	ldr	r2, [sp, #28]
 80048c0:	4654      	mov	r4, sl
 80048c2:	2000      	movs	r0, #0
 80048c4:	f04f 0c0a 	mov.w	ip, #10
 80048c8:	4621      	mov	r1, r4
 80048ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ce:	3b30      	subs	r3, #48	@ 0x30
 80048d0:	2b09      	cmp	r3, #9
 80048d2:	d94b      	bls.n	800496c <_svfiprintf_r+0x17c>
 80048d4:	b1b0      	cbz	r0, 8004904 <_svfiprintf_r+0x114>
 80048d6:	9207      	str	r2, [sp, #28]
 80048d8:	e014      	b.n	8004904 <_svfiprintf_r+0x114>
 80048da:	eba0 0308 	sub.w	r3, r0, r8
 80048de:	fa09 f303 	lsl.w	r3, r9, r3
 80048e2:	4313      	orrs	r3, r2
 80048e4:	9304      	str	r3, [sp, #16]
 80048e6:	46a2      	mov	sl, r4
 80048e8:	e7d2      	b.n	8004890 <_svfiprintf_r+0xa0>
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	1d19      	adds	r1, r3, #4
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	9103      	str	r1, [sp, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bfbb      	ittet	lt
 80048f6:	425b      	neglt	r3, r3
 80048f8:	f042 0202 	orrlt.w	r2, r2, #2
 80048fc:	9307      	strge	r3, [sp, #28]
 80048fe:	9307      	strlt	r3, [sp, #28]
 8004900:	bfb8      	it	lt
 8004902:	9204      	strlt	r2, [sp, #16]
 8004904:	7823      	ldrb	r3, [r4, #0]
 8004906:	2b2e      	cmp	r3, #46	@ 0x2e
 8004908:	d10a      	bne.n	8004920 <_svfiprintf_r+0x130>
 800490a:	7863      	ldrb	r3, [r4, #1]
 800490c:	2b2a      	cmp	r3, #42	@ 0x2a
 800490e:	d132      	bne.n	8004976 <_svfiprintf_r+0x186>
 8004910:	9b03      	ldr	r3, [sp, #12]
 8004912:	1d1a      	adds	r2, r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	9203      	str	r2, [sp, #12]
 8004918:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800491c:	3402      	adds	r4, #2
 800491e:	9305      	str	r3, [sp, #20]
 8004920:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049e4 <_svfiprintf_r+0x1f4>
 8004924:	7821      	ldrb	r1, [r4, #0]
 8004926:	2203      	movs	r2, #3
 8004928:	4650      	mov	r0, sl
 800492a:	f7fb fc59 	bl	80001e0 <memchr>
 800492e:	b138      	cbz	r0, 8004940 <_svfiprintf_r+0x150>
 8004930:	9b04      	ldr	r3, [sp, #16]
 8004932:	eba0 000a 	sub.w	r0, r0, sl
 8004936:	2240      	movs	r2, #64	@ 0x40
 8004938:	4082      	lsls	r2, r0
 800493a:	4313      	orrs	r3, r2
 800493c:	3401      	adds	r4, #1
 800493e:	9304      	str	r3, [sp, #16]
 8004940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004944:	4824      	ldr	r0, [pc, #144]	@ (80049d8 <_svfiprintf_r+0x1e8>)
 8004946:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800494a:	2206      	movs	r2, #6
 800494c:	f7fb fc48 	bl	80001e0 <memchr>
 8004950:	2800      	cmp	r0, #0
 8004952:	d036      	beq.n	80049c2 <_svfiprintf_r+0x1d2>
 8004954:	4b21      	ldr	r3, [pc, #132]	@ (80049dc <_svfiprintf_r+0x1ec>)
 8004956:	bb1b      	cbnz	r3, 80049a0 <_svfiprintf_r+0x1b0>
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	3307      	adds	r3, #7
 800495c:	f023 0307 	bic.w	r3, r3, #7
 8004960:	3308      	adds	r3, #8
 8004962:	9303      	str	r3, [sp, #12]
 8004964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004966:	4433      	add	r3, r6
 8004968:	9309      	str	r3, [sp, #36]	@ 0x24
 800496a:	e76a      	b.n	8004842 <_svfiprintf_r+0x52>
 800496c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004970:	460c      	mov	r4, r1
 8004972:	2001      	movs	r0, #1
 8004974:	e7a8      	b.n	80048c8 <_svfiprintf_r+0xd8>
 8004976:	2300      	movs	r3, #0
 8004978:	3401      	adds	r4, #1
 800497a:	9305      	str	r3, [sp, #20]
 800497c:	4619      	mov	r1, r3
 800497e:	f04f 0c0a 	mov.w	ip, #10
 8004982:	4620      	mov	r0, r4
 8004984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004988:	3a30      	subs	r2, #48	@ 0x30
 800498a:	2a09      	cmp	r2, #9
 800498c:	d903      	bls.n	8004996 <_svfiprintf_r+0x1a6>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0c6      	beq.n	8004920 <_svfiprintf_r+0x130>
 8004992:	9105      	str	r1, [sp, #20]
 8004994:	e7c4      	b.n	8004920 <_svfiprintf_r+0x130>
 8004996:	fb0c 2101 	mla	r1, ip, r1, r2
 800499a:	4604      	mov	r4, r0
 800499c:	2301      	movs	r3, #1
 800499e:	e7f0      	b.n	8004982 <_svfiprintf_r+0x192>
 80049a0:	ab03      	add	r3, sp, #12
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	462a      	mov	r2, r5
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <_svfiprintf_r+0x1f0>)
 80049a8:	a904      	add	r1, sp, #16
 80049aa:	4638      	mov	r0, r7
 80049ac:	f3af 8000 	nop.w
 80049b0:	1c42      	adds	r2, r0, #1
 80049b2:	4606      	mov	r6, r0
 80049b4:	d1d6      	bne.n	8004964 <_svfiprintf_r+0x174>
 80049b6:	89ab      	ldrh	r3, [r5, #12]
 80049b8:	065b      	lsls	r3, r3, #25
 80049ba:	f53f af2d 	bmi.w	8004818 <_svfiprintf_r+0x28>
 80049be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049c0:	e72c      	b.n	800481c <_svfiprintf_r+0x2c>
 80049c2:	ab03      	add	r3, sp, #12
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	462a      	mov	r2, r5
 80049c8:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <_svfiprintf_r+0x1f0>)
 80049ca:	a904      	add	r1, sp, #16
 80049cc:	4638      	mov	r0, r7
 80049ce:	f000 f879 	bl	8004ac4 <_printf_i>
 80049d2:	e7ed      	b.n	80049b0 <_svfiprintf_r+0x1c0>
 80049d4:	08004e6c 	.word	0x08004e6c
 80049d8:	08004e76 	.word	0x08004e76
 80049dc:	00000000 	.word	0x00000000
 80049e0:	08004739 	.word	0x08004739
 80049e4:	08004e72 	.word	0x08004e72

080049e8 <_printf_common>:
 80049e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	4616      	mov	r6, r2
 80049ee:	4698      	mov	r8, r3
 80049f0:	688a      	ldr	r2, [r1, #8]
 80049f2:	690b      	ldr	r3, [r1, #16]
 80049f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049f8:	4293      	cmp	r3, r2
 80049fa:	bfb8      	it	lt
 80049fc:	4613      	movlt	r3, r2
 80049fe:	6033      	str	r3, [r6, #0]
 8004a00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a04:	4607      	mov	r7, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	b10a      	cbz	r2, 8004a0e <_printf_common+0x26>
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	6033      	str	r3, [r6, #0]
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	0699      	lsls	r1, r3, #26
 8004a12:	bf42      	ittt	mi
 8004a14:	6833      	ldrmi	r3, [r6, #0]
 8004a16:	3302      	addmi	r3, #2
 8004a18:	6033      	strmi	r3, [r6, #0]
 8004a1a:	6825      	ldr	r5, [r4, #0]
 8004a1c:	f015 0506 	ands.w	r5, r5, #6
 8004a20:	d106      	bne.n	8004a30 <_printf_common+0x48>
 8004a22:	f104 0a19 	add.w	sl, r4, #25
 8004a26:	68e3      	ldr	r3, [r4, #12]
 8004a28:	6832      	ldr	r2, [r6, #0]
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	42ab      	cmp	r3, r5
 8004a2e:	dc26      	bgt.n	8004a7e <_printf_common+0x96>
 8004a30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	3b00      	subs	r3, #0
 8004a38:	bf18      	it	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	0692      	lsls	r2, r2, #26
 8004a3e:	d42b      	bmi.n	8004a98 <_printf_common+0xb0>
 8004a40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a44:	4641      	mov	r1, r8
 8004a46:	4638      	mov	r0, r7
 8004a48:	47c8      	blx	r9
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d01e      	beq.n	8004a8c <_printf_common+0xa4>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	6922      	ldr	r2, [r4, #16]
 8004a52:	f003 0306 	and.w	r3, r3, #6
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	bf02      	ittt	eq
 8004a5a:	68e5      	ldreq	r5, [r4, #12]
 8004a5c:	6833      	ldreq	r3, [r6, #0]
 8004a5e:	1aed      	subeq	r5, r5, r3
 8004a60:	68a3      	ldr	r3, [r4, #8]
 8004a62:	bf0c      	ite	eq
 8004a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a68:	2500      	movne	r5, #0
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	bfc4      	itt	gt
 8004a6e:	1a9b      	subgt	r3, r3, r2
 8004a70:	18ed      	addgt	r5, r5, r3
 8004a72:	2600      	movs	r6, #0
 8004a74:	341a      	adds	r4, #26
 8004a76:	42b5      	cmp	r5, r6
 8004a78:	d11a      	bne.n	8004ab0 <_printf_common+0xc8>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e008      	b.n	8004a90 <_printf_common+0xa8>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4652      	mov	r2, sl
 8004a82:	4641      	mov	r1, r8
 8004a84:	4638      	mov	r0, r7
 8004a86:	47c8      	blx	r9
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d103      	bne.n	8004a94 <_printf_common+0xac>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a94:	3501      	adds	r5, #1
 8004a96:	e7c6      	b.n	8004a26 <_printf_common+0x3e>
 8004a98:	18e1      	adds	r1, r4, r3
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	2030      	movs	r0, #48	@ 0x30
 8004a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004aa2:	4422      	add	r2, r4
 8004aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004aa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004aac:	3302      	adds	r3, #2
 8004aae:	e7c7      	b.n	8004a40 <_printf_common+0x58>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	47c8      	blx	r9
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0e6      	beq.n	8004a8c <_printf_common+0xa4>
 8004abe:	3601      	adds	r6, #1
 8004ac0:	e7d9      	b.n	8004a76 <_printf_common+0x8e>
	...

08004ac4 <_printf_i>:
 8004ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	7e0f      	ldrb	r7, [r1, #24]
 8004aca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004acc:	2f78      	cmp	r7, #120	@ 0x78
 8004ace:	4691      	mov	r9, r2
 8004ad0:	4680      	mov	r8, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	469a      	mov	sl, r3
 8004ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ada:	d807      	bhi.n	8004aec <_printf_i+0x28>
 8004adc:	2f62      	cmp	r7, #98	@ 0x62
 8004ade:	d80a      	bhi.n	8004af6 <_printf_i+0x32>
 8004ae0:	2f00      	cmp	r7, #0
 8004ae2:	f000 80d2 	beq.w	8004c8a <_printf_i+0x1c6>
 8004ae6:	2f58      	cmp	r7, #88	@ 0x58
 8004ae8:	f000 80b9 	beq.w	8004c5e <_printf_i+0x19a>
 8004aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004af4:	e03a      	b.n	8004b6c <_printf_i+0xa8>
 8004af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004afa:	2b15      	cmp	r3, #21
 8004afc:	d8f6      	bhi.n	8004aec <_printf_i+0x28>
 8004afe:	a101      	add	r1, pc, #4	@ (adr r1, 8004b04 <_printf_i+0x40>)
 8004b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b71 	.word	0x08004b71
 8004b0c:	08004aed 	.word	0x08004aed
 8004b10:	08004aed 	.word	0x08004aed
 8004b14:	08004aed 	.word	0x08004aed
 8004b18:	08004aed 	.word	0x08004aed
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004aed 	.word	0x08004aed
 8004b24:	08004aed 	.word	0x08004aed
 8004b28:	08004aed 	.word	0x08004aed
 8004b2c:	08004aed 	.word	0x08004aed
 8004b30:	08004c71 	.word	0x08004c71
 8004b34:	08004b9b 	.word	0x08004b9b
 8004b38:	08004c2b 	.word	0x08004c2b
 8004b3c:	08004aed 	.word	0x08004aed
 8004b40:	08004aed 	.word	0x08004aed
 8004b44:	08004c93 	.word	0x08004c93
 8004b48:	08004aed 	.word	0x08004aed
 8004b4c:	08004b9b 	.word	0x08004b9b
 8004b50:	08004aed 	.word	0x08004aed
 8004b54:	08004aed 	.word	0x08004aed
 8004b58:	08004c33 	.word	0x08004c33
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	1d1a      	adds	r2, r3, #4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6032      	str	r2, [r6, #0]
 8004b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e09d      	b.n	8004cac <_printf_i+0x1e8>
 8004b70:	6833      	ldr	r3, [r6, #0]
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	1d19      	adds	r1, r3, #4
 8004b76:	6031      	str	r1, [r6, #0]
 8004b78:	0606      	lsls	r6, r0, #24
 8004b7a:	d501      	bpl.n	8004b80 <_printf_i+0xbc>
 8004b7c:	681d      	ldr	r5, [r3, #0]
 8004b7e:	e003      	b.n	8004b88 <_printf_i+0xc4>
 8004b80:	0645      	lsls	r5, r0, #25
 8004b82:	d5fb      	bpl.n	8004b7c <_printf_i+0xb8>
 8004b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	da03      	bge.n	8004b94 <_printf_i+0xd0>
 8004b8c:	232d      	movs	r3, #45	@ 0x2d
 8004b8e:	426d      	negs	r5, r5
 8004b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b94:	4859      	ldr	r0, [pc, #356]	@ (8004cfc <_printf_i+0x238>)
 8004b96:	230a      	movs	r3, #10
 8004b98:	e011      	b.n	8004bbe <_printf_i+0xfa>
 8004b9a:	6821      	ldr	r1, [r4, #0]
 8004b9c:	6833      	ldr	r3, [r6, #0]
 8004b9e:	0608      	lsls	r0, r1, #24
 8004ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ba4:	d402      	bmi.n	8004bac <_printf_i+0xe8>
 8004ba6:	0649      	lsls	r1, r1, #25
 8004ba8:	bf48      	it	mi
 8004baa:	b2ad      	uxthmi	r5, r5
 8004bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bae:	4853      	ldr	r0, [pc, #332]	@ (8004cfc <_printf_i+0x238>)
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	bf14      	ite	ne
 8004bb4:	230a      	movne	r3, #10
 8004bb6:	2308      	moveq	r3, #8
 8004bb8:	2100      	movs	r1, #0
 8004bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bbe:	6866      	ldr	r6, [r4, #4]
 8004bc0:	60a6      	str	r6, [r4, #8]
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	bfa2      	ittt	ge
 8004bc6:	6821      	ldrge	r1, [r4, #0]
 8004bc8:	f021 0104 	bicge.w	r1, r1, #4
 8004bcc:	6021      	strge	r1, [r4, #0]
 8004bce:	b90d      	cbnz	r5, 8004bd4 <_printf_i+0x110>
 8004bd0:	2e00      	cmp	r6, #0
 8004bd2:	d04b      	beq.n	8004c6c <_printf_i+0x1a8>
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bda:	fb03 5711 	mls	r7, r3, r1, r5
 8004bde:	5dc7      	ldrb	r7, [r0, r7]
 8004be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004be4:	462f      	mov	r7, r5
 8004be6:	42bb      	cmp	r3, r7
 8004be8:	460d      	mov	r5, r1
 8004bea:	d9f4      	bls.n	8004bd6 <_printf_i+0x112>
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d10b      	bne.n	8004c08 <_printf_i+0x144>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	07df      	lsls	r7, r3, #31
 8004bf4:	d508      	bpl.n	8004c08 <_printf_i+0x144>
 8004bf6:	6923      	ldr	r3, [r4, #16]
 8004bf8:	6861      	ldr	r1, [r4, #4]
 8004bfa:	4299      	cmp	r1, r3
 8004bfc:	bfde      	ittt	le
 8004bfe:	2330      	movle	r3, #48	@ 0x30
 8004c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c08:	1b92      	subs	r2, r2, r6
 8004c0a:	6122      	str	r2, [r4, #16]
 8004c0c:	f8cd a000 	str.w	sl, [sp]
 8004c10:	464b      	mov	r3, r9
 8004c12:	aa03      	add	r2, sp, #12
 8004c14:	4621      	mov	r1, r4
 8004c16:	4640      	mov	r0, r8
 8004c18:	f7ff fee6 	bl	80049e8 <_printf_common>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d14a      	bne.n	8004cb6 <_printf_i+0x1f2>
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	b004      	add	sp, #16
 8004c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f043 0320 	orr.w	r3, r3, #32
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	4833      	ldr	r0, [pc, #204]	@ (8004d00 <_printf_i+0x23c>)
 8004c34:	2778      	movs	r7, #120	@ 0x78
 8004c36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	6831      	ldr	r1, [r6, #0]
 8004c3e:	061f      	lsls	r7, r3, #24
 8004c40:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c44:	d402      	bmi.n	8004c4c <_printf_i+0x188>
 8004c46:	065f      	lsls	r7, r3, #25
 8004c48:	bf48      	it	mi
 8004c4a:	b2ad      	uxthmi	r5, r5
 8004c4c:	6031      	str	r1, [r6, #0]
 8004c4e:	07d9      	lsls	r1, r3, #31
 8004c50:	bf44      	itt	mi
 8004c52:	f043 0320 	orrmi.w	r3, r3, #32
 8004c56:	6023      	strmi	r3, [r4, #0]
 8004c58:	b11d      	cbz	r5, 8004c62 <_printf_i+0x19e>
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	e7ac      	b.n	8004bb8 <_printf_i+0xf4>
 8004c5e:	4827      	ldr	r0, [pc, #156]	@ (8004cfc <_printf_i+0x238>)
 8004c60:	e7e9      	b.n	8004c36 <_printf_i+0x172>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	f023 0320 	bic.w	r3, r3, #32
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	e7f6      	b.n	8004c5a <_printf_i+0x196>
 8004c6c:	4616      	mov	r6, r2
 8004c6e:	e7bd      	b.n	8004bec <_printf_i+0x128>
 8004c70:	6833      	ldr	r3, [r6, #0]
 8004c72:	6825      	ldr	r5, [r4, #0]
 8004c74:	6961      	ldr	r1, [r4, #20]
 8004c76:	1d18      	adds	r0, r3, #4
 8004c78:	6030      	str	r0, [r6, #0]
 8004c7a:	062e      	lsls	r6, r5, #24
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	d501      	bpl.n	8004c84 <_printf_i+0x1c0>
 8004c80:	6019      	str	r1, [r3, #0]
 8004c82:	e002      	b.n	8004c8a <_printf_i+0x1c6>
 8004c84:	0668      	lsls	r0, r5, #25
 8004c86:	d5fb      	bpl.n	8004c80 <_printf_i+0x1bc>
 8004c88:	8019      	strh	r1, [r3, #0]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6123      	str	r3, [r4, #16]
 8004c8e:	4616      	mov	r6, r2
 8004c90:	e7bc      	b.n	8004c0c <_printf_i+0x148>
 8004c92:	6833      	ldr	r3, [r6, #0]
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	6032      	str	r2, [r6, #0]
 8004c98:	681e      	ldr	r6, [r3, #0]
 8004c9a:	6862      	ldr	r2, [r4, #4]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f7fb fa9e 	bl	80001e0 <memchr>
 8004ca4:	b108      	cbz	r0, 8004caa <_printf_i+0x1e6>
 8004ca6:	1b80      	subs	r0, r0, r6
 8004ca8:	6060      	str	r0, [r4, #4]
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	6123      	str	r3, [r4, #16]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cb4:	e7aa      	b.n	8004c0c <_printf_i+0x148>
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	4632      	mov	r2, r6
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	47d0      	blx	sl
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d0ad      	beq.n	8004c20 <_printf_i+0x15c>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	079b      	lsls	r3, r3, #30
 8004cc8:	d413      	bmi.n	8004cf2 <_printf_i+0x22e>
 8004cca:	68e0      	ldr	r0, [r4, #12]
 8004ccc:	9b03      	ldr	r3, [sp, #12]
 8004cce:	4298      	cmp	r0, r3
 8004cd0:	bfb8      	it	lt
 8004cd2:	4618      	movlt	r0, r3
 8004cd4:	e7a6      	b.n	8004c24 <_printf_i+0x160>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4632      	mov	r2, r6
 8004cda:	4649      	mov	r1, r9
 8004cdc:	4640      	mov	r0, r8
 8004cde:	47d0      	blx	sl
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d09d      	beq.n	8004c20 <_printf_i+0x15c>
 8004ce4:	3501      	adds	r5, #1
 8004ce6:	68e3      	ldr	r3, [r4, #12]
 8004ce8:	9903      	ldr	r1, [sp, #12]
 8004cea:	1a5b      	subs	r3, r3, r1
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	dcf2      	bgt.n	8004cd6 <_printf_i+0x212>
 8004cf0:	e7eb      	b.n	8004cca <_printf_i+0x206>
 8004cf2:	2500      	movs	r5, #0
 8004cf4:	f104 0619 	add.w	r6, r4, #25
 8004cf8:	e7f5      	b.n	8004ce6 <_printf_i+0x222>
 8004cfa:	bf00      	nop
 8004cfc:	08004e7d 	.word	0x08004e7d
 8004d00:	08004e8e 	.word	0x08004e8e

08004d04 <memmove>:
 8004d04:	4288      	cmp	r0, r1
 8004d06:	b510      	push	{r4, lr}
 8004d08:	eb01 0402 	add.w	r4, r1, r2
 8004d0c:	d902      	bls.n	8004d14 <memmove+0x10>
 8004d0e:	4284      	cmp	r4, r0
 8004d10:	4623      	mov	r3, r4
 8004d12:	d807      	bhi.n	8004d24 <memmove+0x20>
 8004d14:	1e43      	subs	r3, r0, #1
 8004d16:	42a1      	cmp	r1, r4
 8004d18:	d008      	beq.n	8004d2c <memmove+0x28>
 8004d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d22:	e7f8      	b.n	8004d16 <memmove+0x12>
 8004d24:	4402      	add	r2, r0
 8004d26:	4601      	mov	r1, r0
 8004d28:	428a      	cmp	r2, r1
 8004d2a:	d100      	bne.n	8004d2e <memmove+0x2a>
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d36:	e7f7      	b.n	8004d28 <memmove+0x24>

08004d38 <_sbrk_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4d06      	ldr	r5, [pc, #24]	@ (8004d54 <_sbrk_r+0x1c>)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4604      	mov	r4, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	602b      	str	r3, [r5, #0]
 8004d44:	f7fb ffda 	bl	8000cfc <_sbrk>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_sbrk_r+0x1a>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_sbrk_r+0x1a>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	20000424 	.word	0x20000424

08004d58 <memcpy>:
 8004d58:	440a      	add	r2, r1
 8004d5a:	4291      	cmp	r1, r2
 8004d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d60:	d100      	bne.n	8004d64 <memcpy+0xc>
 8004d62:	4770      	bx	lr
 8004d64:	b510      	push	{r4, lr}
 8004d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d6e:	4291      	cmp	r1, r2
 8004d70:	d1f9      	bne.n	8004d66 <memcpy+0xe>
 8004d72:	bd10      	pop	{r4, pc}

08004d74 <_realloc_r>:
 8004d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d78:	4680      	mov	r8, r0
 8004d7a:	4615      	mov	r5, r2
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	b921      	cbnz	r1, 8004d8a <_realloc_r+0x16>
 8004d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d84:	4611      	mov	r1, r2
 8004d86:	f7ff bc4b 	b.w	8004620 <_malloc_r>
 8004d8a:	b92a      	cbnz	r2, 8004d98 <_realloc_r+0x24>
 8004d8c:	f7ff fbdc 	bl	8004548 <_free_r>
 8004d90:	2400      	movs	r4, #0
 8004d92:	4620      	mov	r0, r4
 8004d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d98:	f000 f81a 	bl	8004dd0 <_malloc_usable_size_r>
 8004d9c:	4285      	cmp	r5, r0
 8004d9e:	4606      	mov	r6, r0
 8004da0:	d802      	bhi.n	8004da8 <_realloc_r+0x34>
 8004da2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004da6:	d8f4      	bhi.n	8004d92 <_realloc_r+0x1e>
 8004da8:	4629      	mov	r1, r5
 8004daa:	4640      	mov	r0, r8
 8004dac:	f7ff fc38 	bl	8004620 <_malloc_r>
 8004db0:	4607      	mov	r7, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0ec      	beq.n	8004d90 <_realloc_r+0x1c>
 8004db6:	42b5      	cmp	r5, r6
 8004db8:	462a      	mov	r2, r5
 8004dba:	4621      	mov	r1, r4
 8004dbc:	bf28      	it	cs
 8004dbe:	4632      	movcs	r2, r6
 8004dc0:	f7ff ffca 	bl	8004d58 <memcpy>
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	f7ff fbbe 	bl	8004548 <_free_r>
 8004dcc:	463c      	mov	r4, r7
 8004dce:	e7e0      	b.n	8004d92 <_realloc_r+0x1e>

08004dd0 <_malloc_usable_size_r>:
 8004dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd4:	1f18      	subs	r0, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfbc      	itt	lt
 8004dda:	580b      	ldrlt	r3, [r1, r0]
 8004ddc:	18c0      	addlt	r0, r0, r3
 8004dde:	4770      	bx	lr

08004de0 <_init>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr

08004dec <_fini>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr
