
LoRaE5_Emitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af8  08004af8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004af8  08004af8  00005af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b00  08004b00  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b00  08004b00  00005b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b04  08004b04  00005b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  08004b64  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004b64  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9f2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002237  00000000  00000000  00014a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00016cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000985  00000000  00000000  00017918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c55  00000000  00000000  0001829d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011262  00000000  00000000  0003eef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eab1b  00000000  00000000  00050154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ac6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e8  00000000  00000000  0013acb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013e39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a34 	.word	0x08004a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004a34 	.word	0x08004a34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f000 ff3f 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f000 fd87 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f000 fd78 	bl	800110c <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <MX_I2C1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <MX_I2C1_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000644:	2201      	movs	r2, #1
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000666:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000668:	f000 ff12 	bl	8001490 <HAL_I2C_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000672:	f000 fa6c 	bl	8000b4e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000676:	2100      	movs	r1, #0
 8000678:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800067a:	f001 fbc3 	bl	8001e04 <HAL_I2CEx_ConfigAnalogFilter>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000684:	f000 fa63 	bl	8000b4e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800068c:	f001 fc05 	bl	8001e9a <HAL_I2CEx_ConfigDigitalFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 fa5a 	bl	8000b4e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000078 	.word	0x20000078
 80006a4:	40005400 	.word	0x40005400
 80006a8:	10d19ce4 	.word	0x10d19ce4

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0ac      	sub	sp, #176	@ 0xb0
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2288      	movs	r2, #136	@ 0x88
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fd31 	bl	8004134 <memset>
  if(i2cHandle->Instance==I2C1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a21      	ldr	r2, [pc, #132]	@ (800075c <HAL_I2C_MspInit+0xb0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d13a      	bne.n	8000752 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006dc:	2340      	movs	r3, #64	@ 0x40
 80006de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fa87 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006f4:	f000 fa2b 	bl	8000b4e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000710:	23c0      	movs	r3, #192	@ 0xc0
 8000712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000716:	2312      	movs	r3, #18
 8000718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000728:	2304      	movs	r3, #4
 800072a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000732:	4619      	mov	r1, r3
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <HAL_I2C_MspInit+0xb8>)
 8000736:	f000 fce9 	bl	800110c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073e:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 8000740:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000744:	6593      	str	r3, [r2, #88]	@ 0x58
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000752:	bf00      	nop
 8000754:	37b0      	adds	r7, #176	@ 0xb0
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40005400 	.word	0x40005400
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af02      	add	r7, sp, #8
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	f043 030c 	orr.w	r3, r3, #12
 800077e:	b2da      	uxtb	r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f043 0320 	orr.w	r3, r3, #32
 8000790:	b2db      	uxtb	r3, r3
 8000792:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8000794:	f107 0118 	add.w	r1, r7, #24
 8000798:	230a      	movs	r3, #10
 800079a:	2202      	movs	r2, #2
 800079c:	486c      	ldr	r0, [pc, #432]	@ (8000950 <lcd_init+0x1e8>)
 800079e:	f002 ff37 	bl	8003610 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80007a2:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80007a6:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80007a8:	f107 0114 	add.w	r1, r7, #20
 80007ac:	230a      	movs	r3, #10
 80007ae:	2202      	movs	r2, #2
 80007b0:	4867      	ldr	r0, [pc, #412]	@ (8000950 <lcd_init+0x1e8>)
 80007b2:	f002 ff2d 	bl	8003610 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	2205      	movs	r2, #5
 80007ba:	217c      	movs	r1, #124	@ 0x7c
 80007bc:	69f8      	ldr	r0, [r7, #28]
 80007be:	f001 f81b 	bl	80017f8 <HAL_I2C_IsDeviceReady>
 80007c2:	4603      	mov	r3, r0
 80007c4:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80007c6:	f107 0113 	add.w	r1, r7, #19
 80007ca:	230a      	movs	r3, #10
 80007cc:	2201      	movs	r2, #1
 80007ce:	4860      	ldr	r0, [pc, #384]	@ (8000950 <lcd_init+0x1e8>)
 80007d0:	f002 ff1e 	bl	8003610 <HAL_UART_Transmit>
	HAL_Delay(50);
 80007d4:	2032      	movs	r0, #50	@ 0x32
 80007d6:	f000 fb8f 	bl	8000ef8 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80007da:	f107 0218 	add.w	r2, r7, #24
 80007de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	217c      	movs	r1, #124	@ 0x7c
 80007e8:	69f8      	ldr	r0, [r7, #28]
 80007ea:	f000 feed 	bl	80015c8 <HAL_I2C_Master_Transmit>
 80007ee:	4603      	mov	r3, r0
 80007f0:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80007f2:	f107 0112 	add.w	r1, r7, #18
 80007f6:	230a      	movs	r3, #10
 80007f8:	2201      	movs	r2, #1
 80007fa:	4855      	ldr	r0, [pc, #340]	@ (8000950 <lcd_init+0x1e8>)
 80007fc:	f002 ff08 	bl	8003610 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	@ 0x32
 8000802:	f000 fb79 	bl	8000ef8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000806:	f107 0218 	add.w	r2, r7, #24
 800080a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2302      	movs	r3, #2
 8000812:	217c      	movs	r1, #124	@ 0x7c
 8000814:	69f8      	ldr	r0, [r7, #28]
 8000816:	f000 fed7 	bl	80015c8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800081a:	2005      	movs	r0, #5
 800081c:	f000 fb6c 	bl	8000ef8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000820:	f107 0218 	add.w	r2, r7, #24
 8000824:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2302      	movs	r3, #2
 800082c:	217c      	movs	r1, #124	@ 0x7c
 800082e:	69f8      	ldr	r0, [r7, #28]
 8000830:	f000 feca 	bl	80015c8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2204      	movs	r2, #4
 8000838:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	785b      	ldrb	r3, [r3, #1]
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	b2db      	uxtb	r3, r3
 8000844:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000846:	f107 0218 	add.w	r2, r7, #24
 800084a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2302      	movs	r3, #2
 8000852:	217c      	movs	r1, #124	@ 0x7c
 8000854:	69f8      	ldr	r0, [r7, #28]
 8000856:	f000 feb7 	bl	80015c8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800085a:	2301      	movs	r3, #1
 800085c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800085e:	f107 0218 	add.w	r2, r7, #24
 8000862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2302      	movs	r3, #2
 800086a:	217c      	movs	r1, #124	@ 0x7c
 800086c:	69f8      	ldr	r0, [r7, #28]
 800086e:	f000 feab 	bl	80015c8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000872:	2002      	movs	r0, #2
 8000874:	f000 fb40 	bl	8000ef8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2202      	movs	r2, #2
 800087c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	789b      	ldrb	r3, [r3, #2]
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	b2db      	uxtb	r3, r3
 8000888:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800088a:	f107 0218 	add.w	r2, r7, #24
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2302      	movs	r3, #2
 8000896:	217c      	movs	r1, #124	@ 0x7c
 8000898:	69f8      	ldr	r0, [r7, #28]
 800089a:	f000 fe95 	bl	80015c8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800089e:	2300      	movs	r3, #0
 80008a0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008a6:	f107 0210 	add.w	r2, r7, #16
 80008aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2302      	movs	r3, #2
 80008b2:	21c4      	movs	r1, #196	@ 0xc4
 80008b4:	69f8      	ldr	r0, [r7, #28]
 80008b6:	f000 fe87 	bl	80015c8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80008ba:	2308      	movs	r3, #8
 80008bc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80008be:	23ff      	movs	r3, #255	@ 0xff
 80008c0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008c2:	f107 0210 	add.w	r2, r7, #16
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	21c4      	movs	r1, #196	@ 0xc4
 80008d0:	69f8      	ldr	r0, [r7, #28]
 80008d2:	f000 fe79 	bl	80015c8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80008d6:	2301      	movs	r3, #1
 80008d8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80008da:	2320      	movs	r3, #32
 80008dc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008de:	f107 0210 	add.w	r2, r7, #16
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2302      	movs	r3, #2
 80008ea:	21c4      	movs	r1, #196	@ 0xc4
 80008ec:	69f8      	ldr	r0, [r7, #28]
 80008ee:	f000 fe6b 	bl	80015c8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80008f2:	2304      	movs	r3, #4
 80008f4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80008f6:	23ff      	movs	r3, #255	@ 0xff
 80008f8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80008fa:	f107 020c 	add.w	r2, r7, #12
 80008fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2302      	movs	r3, #2
 8000906:	21c4      	movs	r1, #196	@ 0xc4
 8000908:	69f8      	ldr	r0, [r7, #28]
 800090a:	f000 fe5d 	bl	80015c8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800090e:	2303      	movs	r3, #3
 8000910:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000912:	23ff      	movs	r3, #255	@ 0xff
 8000914:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000916:	f107 020c 	add.w	r2, r7, #12
 800091a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2302      	movs	r3, #2
 8000922:	21c4      	movs	r1, #196	@ 0xc4
 8000924:	69f8      	ldr	r0, [r7, #28]
 8000926:	f000 fe4f 	bl	80015c8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800092a:	2302      	movs	r3, #2
 800092c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800092e:	23ff      	movs	r3, #255	@ 0xff
 8000930:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000932:	f107 020c 	add.w	r2, r7, #12
 8000936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2302      	movs	r3, #2
 800093e:	21c4      	movs	r1, #196	@ 0xc4
 8000940:	69f8      	ldr	r0, [r7, #28]
 8000942:	f000 fe41 	bl	80015c8 <HAL_I2C_Master_Transmit>


}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000d8 	.word	0x200000d8

08000954 <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <clearlcd+0x2c>)
 800095e:	f000 f83c 	bl	80009da <lcd_position>
	lcd_print(&hi2c1,"                ");
 8000962:	4908      	ldr	r1, [pc, #32]	@ (8000984 <clearlcd+0x30>)
 8000964:	4806      	ldr	r0, [pc, #24]	@ (8000980 <clearlcd+0x2c>)
 8000966:	f000 f80f 	bl	8000988 <lcd_print>
	lcd_position(&hi2c1,0,1);
 800096a:	2201      	movs	r2, #1
 800096c:	2100      	movs	r1, #0
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <clearlcd+0x2c>)
 8000970:	f000 f833 	bl	80009da <lcd_position>
	lcd_print(&hi2c1,"                ");
 8000974:	4903      	ldr	r1, [pc, #12]	@ (8000984 <clearlcd+0x30>)
 8000976:	4802      	ldr	r0, [pc, #8]	@ (8000980 <clearlcd+0x2c>)
 8000978:	f000 f806 	bl	8000988 <lcd_print>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000078 	.word	0x20000078
 8000984:	08004a4c 	.word	0x08004a4c

08000988 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af02      	add	r7, sp, #8
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000996:	2340      	movs	r3, #64	@ 0x40
 8000998:	733b      	strb	r3, [r7, #12]
    int i=0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800099e:	e011      	b.n	80009c4 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80009aa:	f107 020c 	add.w	r2, r7, #12
 80009ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2302      	movs	r3, #2
 80009b6:	217c      	movs	r1, #124	@ 0x7c
 80009b8:	6938      	ldr	r0, [r7, #16]
 80009ba:	f000 fe05 	bl	80015c8 <HAL_I2C_Master_Transmit>
            i++;
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1e7      	bne.n	80009a0 <lcd_print+0x18>
   }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af02      	add	r7, sp, #8
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	70fb      	strb	r3, [r7, #3]
 80009e6:	4613      	mov	r3, r2
 80009e8:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80009ee:	78bb      	ldrb	r3, [r7, #2]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <lcd_position+0x24>
    {
        col = col | 0x80;
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009fa:	70fb      	strb	r3, [r7, #3]
 80009fc:	e003      	b.n	8000a06 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000a04:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000a0e:	f107 0208 	add.w	r2, r7, #8
 8000a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2302      	movs	r3, #2
 8000a1a:	217c      	movs	r1, #124	@ 0x7c
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f000 fdd3 	bl	80015c8 <HAL_I2C_Master_Transmit>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f000 f9e5 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a36:	f000 f839 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3a:	f7ff fd91 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a3e:	f000 f929 	bl	8000c94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a42:	f7ff fdf3 	bl	800062c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1,&lcdData);
 8000a46:	4914      	ldr	r1, [pc, #80]	@ (8000a98 <main+0x6c>)
 8000a48:	4814      	ldr	r0, [pc, #80]	@ (8000a9c <main+0x70>)
 8000a4a:	f7ff fe8d 	bl	8000768 <lcd_init>

  clearlcd();
 8000a4e:	f7ff ff81 	bl	8000954 <clearlcd>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // LCD 上显示不断变化的计数
	 lcd_position(&hi2c1, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	4811      	ldr	r0, [pc, #68]	@ (8000a9c <main+0x70>)
 8000a58:	f7ff ffbf 	bl	80009da <lcd_position>
	 lcd_print(&hi2c1, "Hello STM32!");
 8000a5c:	4910      	ldr	r1, [pc, #64]	@ (8000aa0 <main+0x74>)
 8000a5e:	480f      	ldr	r0, [pc, #60]	@ (8000a9c <main+0x70>)
 8000a60:	f7ff ff92 	bl	8000988 <lcd_print>

	 lcd_position(&hi2c1, 0, 1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2100      	movs	r1, #0
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <main+0x70>)
 8000a6a:	f7ff ffb6 	bl	80009da <lcd_position>
	 char buffer[16];
	 static int count = 0;
	 snprintf(buffer, sizeof(buffer), "Count: %d", count++);
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <main+0x78>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	490b      	ldr	r1, [pc, #44]	@ (8000aa4 <main+0x78>)
 8000a76:	600a      	str	r2, [r1, #0]
 8000a78:	4638      	mov	r0, r7
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa8 <main+0x7c>)
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	f003 fb25 	bl	80040cc <sniprintf>
	 lcd_print(&hi2c1, buffer);
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <main+0x70>)
 8000a88:	f7ff ff7e 	bl	8000988 <lcd_print>

	 HAL_Delay(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a90:	f000 fa32 	bl	8000ef8 <HAL_Delay>
  {
 8000a94:	bf00      	nop
 8000a96:	e7dc      	b.n	8000a52 <main+0x26>
 8000a98:	200000cc 	.word	0x200000cc
 8000a9c:	20000078 	.word	0x20000078
 8000aa0:	08004a60 	.word	0x08004a60
 8000aa4:	200000d0 	.word	0x200000d0
 8000aa8:	08004a70 	.word	0x08004a70

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	@ 0x58
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2244      	movs	r2, #68	@ 0x44
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fb3a 	bl	8004134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ace:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ad2:	f001 fa3d 	bl	8001f50 <HAL_PWREx_ControlVoltageScaling>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000adc:	f000 f837 	bl	8000b4e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aea:	2310      	movs	r3, #16
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af2:	2302      	movs	r3, #2
 8000af4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000afa:	230a      	movs	r3, #10
 8000afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000afe:	2307      	movs	r3, #7
 8000b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fa74 	bl	8001ffc <HAL_RCC_OscConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b1a:	f000 f818 	bl	8000b4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b22:	2303      	movs	r3, #3
 8000b24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b32:	463b      	mov	r3, r7
 8000b34:	2104      	movs	r1, #4
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fe3c 	bl	80027b4 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b42:	f000 f804 	bl	8000b4e <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3758      	adds	r7, #88	@ 0x58
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b52:	b672      	cpsid	i
}
 8000b54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b56:	bf00      	nop
 8000b58:	e7fd      	b.n	8000b56 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f95d 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f003 fa86 	bl	8004144 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20018000 	.word	0x20018000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	200000d4 	.word	0x200000d4
 8000c6c:	200002b0 	.word	0x200002b0

08000c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <MX_USART2_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd8:	f002 fc4c 	bl	8003574 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f7ff ff34 	bl	8000b4e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000d8 	.word	0x200000d8
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ac      	sub	sp, #176	@ 0xb0
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2288      	movs	r2, #136	@ 0x88
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 fa0d 	bl	8004134 <memset>
  if(uartHandle->Instance==USART2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <HAL_UART_MspInit+0xb0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d13b      	bne.n	8000d9c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ff63 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d3c:	f7ff ff07 	bl	8000b4e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d44:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4c:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d64:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d70:	230c      	movs	r3, #12
 8000d72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d98:	f000 f9b8 	bl	800110c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	37b0      	adds	r7, #176	@ 0xb0
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40021000 	.word	0x40021000

08000dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff ff5e 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopForever+0xe>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopForever+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 f9b9 	bl	8004150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dde:	f7ff fe25 	bl	8000a2c <main>

08000de2 <LoopForever>:

LoopForever:
    b LoopForever
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000df0:	08004b08 	.word	0x08004b08
  ldr r2, =_sbss
 8000df4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000df8:	200002ac 	.word	0x200002ac

08000dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_2_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <HAL_Init+0x3c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e3c <HAL_Init+0x3c>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f944 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f80f 	bl	8000e40 <HAL_InitTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e001      	b.n	8000e32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2e:	f7ff fe95 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d023      	beq.n	8000e9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_InitTick+0x70>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <HAL_InitTick+0x6c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f941 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10f      	bne.n	8000e96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d809      	bhi.n	8000e90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f919 	bl	80010ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e88:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_InitTick+0x74>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e007      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e004      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e001      	b.n	8000ea0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000160 	.word	0x20000160

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000160 	.word	0x20000160

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	@ 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff47 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5c 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb0 	bl	8001060 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e17f      	b.n	800141c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8171 	beq.w	8001416 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d118      	bne.n	80011ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	6939      	ldr	r1, [r7, #16]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80ac 	beq.w	8001416 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b5f      	ldr	r3, [pc, #380]	@ (800143c <HAL_GPIO_Init+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	4a5e      	ldr	r2, [pc, #376]	@ (800143c <HAL_GPIO_Init+0x330>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ca:	4b5c      	ldr	r3, [pc, #368]	@ (800143c <HAL_GPIO_Init+0x330>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001440 <HAL_GPIO_Init+0x334>)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x242>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	@ (8001444 <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	@ (800144c <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x232>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x22a>
 8001332:	2306      	movs	r3, #6
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001336:	2307      	movs	r3, #7
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800134e:	2300      	movs	r3, #0
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001360:	4937      	ldr	r1, [pc, #220]	@ (8001440 <HAL_GPIO_Init+0x334>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800136e:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <HAL_GPIO_Init+0x350>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001392:	4a32      	ldr	r2, [pc, #200]	@ (800145c <HAL_GPIO_Init+0x350>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001398:	4b30      	ldr	r3, [pc, #192]	@ (800145c <HAL_GPIO_Init+0x350>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013bc:	4a27      	ldr	r2, [pc, #156]	@ (800145c <HAL_GPIO_Init+0x350>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013c2:	4b26      	ldr	r3, [pc, #152]	@ (800145c <HAL_GPIO_Init+0x350>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e6:	4a1d      	ldr	r2, [pc, #116]	@ (800145c <HAL_GPIO_Init+0x350>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <HAL_GPIO_Init+0x350>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001410:	4a12      	ldr	r2, [pc, #72]	@ (800145c <HAL_GPIO_Init+0x350>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f ae78 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48001000 	.word	0x48001000
 8001454:	48001400 	.word	0x48001400
 8001458:	48001800 	.word	0x48001800
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e08d      	b.n	80015be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff f8f8 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2224      	movs	r2, #36	@ 0x24
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e006      	b.n	8001518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d108      	bne.n	8001532 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	e007      	b.n	8001542 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001540:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001554:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001564:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69d9      	ldr	r1, [r3, #28]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1a      	ldr	r2, [r3, #32]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2220      	movs	r2, #32
 80015aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	461a      	mov	r2, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	817b      	strh	r3, [r7, #10]
 80015d8:	4613      	mov	r3, r2
 80015da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	f040 80fd 	bne.w	80017e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_I2C_Master_Transmit+0x30>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e0f6      	b.n	80017e6 <HAL_I2C_Master_Transmit+0x21e>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001600:	f7ff fc6e 	bl	8000ee0 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2319      	movs	r3, #25
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 fa00 	bl	8001a18 <I2C_WaitOnFlagUntilTimeout>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0e1      	b.n	80017e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2221      	movs	r2, #33	@ 0x21
 8001626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2210      	movs	r2, #16
 800162e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	893a      	ldrh	r2, [r7, #8]
 8001642:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800164e:	b29b      	uxth	r3, r3
 8001650:	2bff      	cmp	r3, #255	@ 0xff
 8001652:	d906      	bls.n	8001662 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	22ff      	movs	r2, #255	@ 0xff
 8001658:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800165a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e007      	b.n	8001672 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001666:	b29a      	uxth	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800166c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001670:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	d024      	beq.n	80016c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	8979      	ldrh	r1, [r7, #10]
 80016b6:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <HAL_I2C_Master_Transmit+0x228>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 fb6f 	bl	8001da0 <I2C_TransferConfig>
 80016c2:	e066      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	8979      	ldrh	r1, [r7, #10]
 80016cc:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <HAL_I2C_Master_Transmit+0x228>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 fb64 	bl	8001da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016d8:	e05b      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f9f3 	bl	8001aca <I2C_WaitOnTXISFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07b      	b.n	80017e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	781a      	ldrb	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001708:	b29b      	uxth	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001722:	b29b      	uxth	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d034      	beq.n	8001792 <HAL_I2C_Master_Transmit+0x1ca>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d130      	bne.n	8001792 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	2200      	movs	r2, #0
 8001738:	2180      	movs	r1, #128	@ 0x80
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f96c 	bl	8001a18 <I2C_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e04d      	b.n	80017e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174e:	b29b      	uxth	r3, r3
 8001750:	2bff      	cmp	r3, #255	@ 0xff
 8001752:	d90e      	bls.n	8001772 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	22ff      	movs	r2, #255	@ 0xff
 8001758:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175e:	b2da      	uxtb	r2, r3
 8001760:	8979      	ldrh	r1, [r7, #10]
 8001762:	2300      	movs	r3, #0
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fb18 	bl	8001da0 <I2C_TransferConfig>
 8001770:	e00f      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001780:	b2da      	uxtb	r2, r3
 8001782:	8979      	ldrh	r1, [r7, #10]
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 fb07 	bl	8001da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001796:	b29b      	uxth	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d19e      	bne.n	80016da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	6a39      	ldr	r1, [r7, #32]
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 f9d9 	bl	8001b58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e01a      	b.n	80017e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2220      	movs	r2, #32
 80017b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6859      	ldr	r1, [r3, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <HAL_I2C_Master_Transmit+0x22c>)
 80017c4:	400b      	ands	r3, r1
 80017c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2220      	movs	r2, #32
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e000      	b.n	80017e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80017e4:	2302      	movs	r3, #2
  }
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	80002000 	.word	0x80002000
 80017f4:	fe00e800 	.word	0xfe00e800

080017f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	460b      	mov	r3, r1
 8001806:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b20      	cmp	r3, #32
 8001816:	f040 80d6 	bne.w	80019c6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001828:	d101      	bne.n	800182e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800182a:	2302      	movs	r3, #2
 800182c:	e0cc      	b.n	80019c8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_I2C_IsDeviceReady+0x44>
 8001838:	2302      	movs	r3, #2
 800183a:	e0c5      	b.n	80019c8 <HAL_I2C_IsDeviceReady+0x1d0>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2224      	movs	r2, #36	@ 0x24
 8001848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_I2C_IsDeviceReady+0x72>
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001864:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001868:	e006      	b.n	8001878 <HAL_I2C_IsDeviceReady+0x80>
 800186a:	897b      	ldrh	r3, [r7, #10]
 800186c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001874:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fb2f 	bl	8000ee0 <HAL_GetTick>
 8001882:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	2b20      	cmp	r3, #32
 8001890:	bf0c      	ite	eq
 8001892:	2301      	moveq	r3, #1
 8001894:	2300      	movne	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018b0:	e034      	b.n	800191c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d01a      	beq.n	80018f0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018ba:	f7ff fb11 	bl	8000ee0 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d302      	bcc.n	80018d0 <HAL_I2C_IsDeviceReady+0xd8>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10f      	bne.n	80018f0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018dc:	f043 0220 	orr.w	r2, r3, #32
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e06b      	b.n	80019c8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	bf0c      	ite	eq
 80018fe:	2301      	moveq	r3, #1
 8001900:	2300      	movne	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b10      	cmp	r3, #16
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_I2C_IsDeviceReady+0x130>
 8001922:	7fbb      	ldrb	r3, [r7, #30]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0c4      	beq.n	80018b2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b10      	cmp	r3, #16
 8001934:	d01a      	beq.n	800196c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	2120      	movs	r1, #32
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f869 	bl	8001a18 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e03b      	b.n	80019c8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2220      	movs	r2, #32
 8001956:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	e02d      	b.n	80019c8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	2120      	movs	r1, #32
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f84e 	bl	8001a18 <I2C_WaitOnFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e020      	b.n	80019c8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2210      	movs	r2, #16
 800198c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2220      	movs	r2, #32
 8001994:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f63f af56 	bhi.w	8001852 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f043 0220 	orr.w	r2, r3, #32
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80019c6:	2302      	movs	r3, #2
  }
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d103      	bne.n	80019ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d007      	beq.n	8001a0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	619a      	str	r2, [r3, #24]
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a28:	e03b      	b.n	8001aa2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	6839      	ldr	r1, [r7, #0]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f8d6 	bl	8001be0 <I2C_IsErrorOccurred>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e041      	b.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d02d      	beq.n	8001aa2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a46:	f7ff fa4b 	bl	8000ee0 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d302      	bcc.n	8001a5c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d122      	bne.n	8001aa2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4013      	ands	r3, r2
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d113      	bne.n	8001aa2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	f043 0220 	orr.w	r2, r3, #32
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	bf0c      	ite	eq
 8001ab2:	2301      	moveq	r3, #1
 8001ab4:	2300      	movne	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d0b4      	beq.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ad6:	e033      	b.n	8001b40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f87f 	bl	8001be0 <I2C_IsErrorOccurred>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e031      	b.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af2:	d025      	beq.n	8001b40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af4:	f7ff f9f4 	bl	8000ee0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d302      	bcc.n	8001b0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11a      	bne.n	8001b40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d013      	beq.n	8001b40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e007      	b.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d1c4      	bne.n	8001ad8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b64:	e02f      	b.n	8001bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f838 	bl	8001be0 <I2C_IsErrorOccurred>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e02d      	b.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7a:	f7ff f9b1 	bl	8000ee0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d302      	bcc.n	8001b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d11a      	bne.n	8001bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d013      	beq.n	8001bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f043 0220 	orr.w	r2, r3, #32
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e007      	b.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d1c8      	bne.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d068      	beq.n	8001cde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2210      	movs	r2, #16
 8001c12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c14:	e049      	b.n	8001caa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d045      	beq.n	8001caa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c1e:	f7ff f95f 	bl	8000ee0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d302      	bcc.n	8001c34 <I2C_IsErrorOccurred+0x54>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d13a      	bne.n	8001caa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c56:	d121      	bne.n	8001c9c <I2C_IsErrorOccurred+0xbc>
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c5e:	d01d      	beq.n	8001c9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c60:	7cfb      	ldrb	r3, [r7, #19]
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d01a      	beq.n	8001c9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c76:	f7ff f933 	bl	8000ee0 <HAL_GetTick>
 8001c7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c7c:	e00e      	b.n	8001c9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c7e:	f7ff f92f 	bl	8000ee0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b19      	cmp	r3, #25
 8001c8a:	d907      	bls.n	8001c9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f043 0320 	orr.w	r3, r3, #32
 8001c92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001c9a:	e006      	b.n	8001caa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d1e9      	bne.n	8001c7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d003      	beq.n	8001cc0 <I2C_IsErrorOccurred+0xe0>
 8001cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0aa      	beq.n	8001c16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d103      	bne.n	8001cd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01c      	beq.n	8001d8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fe3b 	bl	80019d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <I2C_IsErrorOccurred+0x1bc>)
 8001d66:	400b      	ands	r3, r1
 8001d68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3728      	adds	r7, #40	@ 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	fe00e800 	.word	0xfe00e800

08001da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	817b      	strh	r3, [r7, #10]
 8001dae:	4613      	mov	r3, r2
 8001db0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db8:	7a7b      	ldrb	r3, [r7, #9]
 8001dba:	041b      	lsls	r3, r3, #16
 8001dbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	0d5b      	lsrs	r3, r3, #21
 8001dda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <I2C_TransferConfig+0x60>)
 8001de0:	430b      	orrs	r3, r1
 8001de2:	43db      	mvns	r3, r3
 8001de4:	ea02 0103 	and.w	r1, r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	03ff63ff 	.word	0x03ff63ff

08001e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d138      	bne.n	8001e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e032      	b.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d139      	bne.n	8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e033      	b.n	8001f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2224      	movs	r2, #36	@ 0x24
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40007000 	.word	0x40007000

08001f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f5e:	d130      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f60:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f6c:	d038      	beq.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2232      	movs	r2, #50	@ 0x32
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0c9b      	lsrs	r3, r3, #18
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f94:	e002      	b.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa8:	d102      	bne.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f2      	bne.n	8001f96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fbc:	d110      	bne.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e00f      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fce:	d007      	beq.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fd8:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e3ca      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200e:	4b97      	ldr	r3, [pc, #604]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002018:	4b94      	ldr	r3, [pc, #592]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80e4 	beq.w	80021f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_RCC_OscConfig+0x4a>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	f040 808b 	bne.w	8002154 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b01      	cmp	r3, #1
 8002042:	f040 8087 	bne.w	8002154 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002046:	4b89      	ldr	r3, [pc, #548]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x62>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e3a2      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1a      	ldr	r2, [r3, #32]
 8002062:	4b82      	ldr	r3, [pc, #520]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <HAL_RCC_OscConfig+0x7c>
 800206e:	4b7f      	ldr	r3, [pc, #508]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002076:	e005      	b.n	8002084 <HAL_RCC_OscConfig+0x88>
 8002078:	4b7c      	ldr	r3, [pc, #496]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002084:	4293      	cmp	r3, r2
 8002086:	d223      	bcs.n	80020d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fd55 	bl	8002b3c <RCC_SetFlashLatencyFromMSIRange>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e383      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209c:	4b73      	ldr	r3, [pc, #460]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a72      	ldr	r2, [pc, #456]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b70      	ldr	r3, [pc, #448]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	496d      	ldr	r1, [pc, #436]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	4b6c      	ldr	r3, [pc, #432]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	4968      	ldr	r1, [pc, #416]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
 80020ce:	e025      	b.n	800211c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d0:	4b66      	ldr	r3, [pc, #408]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a65      	ldr	r2, [pc, #404]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b63      	ldr	r3, [pc, #396]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4960      	ldr	r1, [pc, #384]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ee:	4b5f      	ldr	r3, [pc, #380]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	495b      	ldr	r1, [pc, #364]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fd15 	bl	8002b3c <RCC_SetFlashLatencyFromMSIRange>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e343      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800211c:	f000 fc4a 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b52      	ldr	r3, [pc, #328]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	4950      	ldr	r1, [pc, #320]	@ (8002270 <HAL_RCC_OscConfig+0x274>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	4a4e      	ldr	r2, [pc, #312]	@ (8002274 <HAL_RCC_OscConfig+0x278>)
 800213a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800213c:	4b4e      	ldr	r3, [pc, #312]	@ (8002278 <HAL_RCC_OscConfig+0x27c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fe7d 	bl	8000e40 <HAL_InitTick>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d052      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	e327      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d032      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800215c:	4b43      	ldr	r3, [pc, #268]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a42      	ldr	r2, [pc, #264]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002168:	f7fe feba 	bl	8000ee0 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002170:	f7fe feb6 	bl	8000ee0 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e310      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002182:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218e:	4b37      	ldr	r3, [pc, #220]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a36      	ldr	r2, [pc, #216]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b34      	ldr	r3, [pc, #208]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4931      	ldr	r1, [pc, #196]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ac:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	492c      	ldr	r1, [pc, #176]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e01a      	b.n	80021f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021c2:	4b2a      	ldr	r3, [pc, #168]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a29      	ldr	r2, [pc, #164]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ce:	f7fe fe87 	bl	8000ee0 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d6:	f7fe fe83 	bl	8000ee0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e2dd      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021e8:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x1da>
 80021f4:	e000      	b.n	80021f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d074      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b08      	cmp	r3, #8
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x21a>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d10e      	bne.n	800222e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d10b      	bne.n	800222e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	4b15      	ldr	r3, [pc, #84]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d064      	beq.n	80022ec <HAL_RCC_OscConfig+0x2f0>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d160      	bne.n	80022ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e2ba      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x24a>
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e026      	b.n	8002294 <HAL_RCC_OscConfig+0x298>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800224e:	d115      	bne.n	800227c <HAL_RCC_OscConfig+0x280>
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a05      	ldr	r2, [pc, #20]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002256:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b03      	ldr	r3, [pc, #12]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a02      	ldr	r2, [pc, #8]	@ (800226c <HAL_RCC_OscConfig+0x270>)
 8002262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x298>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	08004a7c 	.word	0x08004a7c
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004
 800227c:	4ba0      	ldr	r3, [pc, #640]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a9f      	ldr	r2, [pc, #636]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b9d      	ldr	r3, [pc, #628]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a9c      	ldr	r2, [pc, #624]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fe20 	bl	8000ee0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe fe1c 	bl	8000ee0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e276      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b6:	4b92      	ldr	r3, [pc, #584]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2a8>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fe0c 	bl	8000ee0 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fe08 	bl	8000ee0 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	@ 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e262      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022de:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x2d0>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d060      	beq.n	80023bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x310>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d119      	bne.n	800233a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d116      	bne.n	800233a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230c:	4b7c      	ldr	r3, [pc, #496]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x328>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e23f      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b76      	ldr	r3, [pc, #472]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4973      	ldr	r1, [pc, #460]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	e040      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d023      	beq.n	800238a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002342:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6e      	ldr	r2, [pc, #440]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe fdc7 	bl	8000ee0 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe fdc3 	bl	8000ee0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e21d      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	4b65      	ldr	r3, [pc, #404]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b62      	ldr	r3, [pc, #392]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	495f      	ldr	r1, [pc, #380]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	e018      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b5d      	ldr	r3, [pc, #372]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a5c      	ldr	r2, [pc, #368]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe fda3 	bl	8000ee0 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe fd9f 	bl	8000ee0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1f9      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b0:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d03c      	beq.n	8002442 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01c      	beq.n	800240a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe fd7e 	bl	8000ee0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe fd7a 	bl	8000ee0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1d4      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023fa:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ef      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3ec>
 8002408:	e01b      	b.n	8002442 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 800240c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002410:	4a3b      	ldr	r2, [pc, #236]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7fe fd61 	bl	8000ee0 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002422:	f7fe fd5d 	bl	8000ee0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1b7      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002434:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ef      	bne.n	8002422 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80a6 	beq.w	800259c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002454:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10d      	bne.n	800247c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	4a26      	ldr	r2, [pc, #152]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	@ 0x58
 800246c:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002478:	2301      	movs	r3, #1
 800247a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4b21      	ldr	r3, [pc, #132]	@ (8002504 <HAL_RCC_OscConfig+0x508>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d118      	bne.n	80024ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002488:	4b1e      	ldr	r3, [pc, #120]	@ (8002504 <HAL_RCC_OscConfig+0x508>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1d      	ldr	r2, [pc, #116]	@ (8002504 <HAL_RCC_OscConfig+0x508>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002494:	f7fe fd24 	bl	8000ee0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7fe fd20 	bl	8000ee0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e17a      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_RCC_OscConfig+0x508>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4d8>
 80024c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d2:	e029      	b.n	8002528 <HAL_RCC_OscConfig+0x52c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d115      	bne.n	8002508 <HAL_RCC_OscConfig+0x50c>
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e2:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024ec:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f2:	4a03      	ldr	r2, [pc, #12]	@ (8002500 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x52c>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	4b9c      	ldr	r3, [pc, #624]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	4a9b      	ldr	r2, [pc, #620]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002518:	4b98      	ldr	r3, [pc, #608]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251e:	4a97      	ldr	r2, [pc, #604]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d016      	beq.n	800255e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fcd6 	bl	8000ee0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe fcd2 	bl	8000ee0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e12a      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254e:	4b8b      	ldr	r3, [pc, #556]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ed      	beq.n	8002538 <HAL_RCC_OscConfig+0x53c>
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe fcbf 	bl	8000ee0 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fcbb 	bl	8000ee0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e113      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800257c:	4b7f      	ldr	r3, [pc, #508]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ed      	bne.n	8002566 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7ffb      	ldrb	r3, [r7, #31]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b7a      	ldr	r3, [pc, #488]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002594:	4a79      	ldr	r2, [pc, #484]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800259a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80fe 	beq.w	80027a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f040 80d0 	bne.w	8002750 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025b0:	4b72      	ldr	r3, [pc, #456]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d130      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	3b01      	subs	r3, #1
 80025d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d127      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d11f      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025f0:	2a07      	cmp	r2, #7
 80025f2:	bf14      	ite	ne
 80025f4:	2201      	movne	r2, #1
 80025f6:	2200      	moveq	r2, #0
 80025f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d113      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d109      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d06e      	beq.n	8002704 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d069      	beq.n	8002700 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800262c:	4b53      	ldr	r3, [pc, #332]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002638:	4b50      	ldr	r3, [pc, #320]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0ad      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002648:	4b4c      	ldr	r3, [pc, #304]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a4b      	ldr	r2, [pc, #300]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800264e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002652:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002654:	f7fe fc44 	bl	8000ee0 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fc40 	bl	8000ee0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e09a      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266e:	4b43      	ldr	r3, [pc, #268]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267a:	4b40      	ldr	r3, [pc, #256]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b40      	ldr	r3, [pc, #256]	@ (8002780 <HAL_RCC_OscConfig+0x784>)
 8002680:	4013      	ands	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800268a:	3a01      	subs	r2, #1
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002694:	0212      	lsls	r2, r2, #8
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800269c:	0852      	lsrs	r2, r2, #1
 800269e:	3a01      	subs	r2, #1
 80026a0:	0552      	lsls	r2, r2, #21
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026a8:	0852      	lsrs	r2, r2, #1
 80026aa:	3a01      	subs	r2, #1
 80026ac:	0652      	lsls	r2, r2, #25
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026b4:	0912      	lsrs	r2, r2, #4
 80026b6:	0452      	lsls	r2, r2, #17
 80026b8:	430a      	orrs	r2, r1
 80026ba:	4930      	ldr	r1, [pc, #192]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026c0:	4b2e      	ldr	r3, [pc, #184]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2d      	ldr	r2, [pc, #180]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	4b2b      	ldr	r3, [pc, #172]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a2a      	ldr	r2, [pc, #168]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d8:	f7fe fc02 	bl	8000ee0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fbfe 	bl	8000ee0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e058      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026fe:	e050      	b.n	80027a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e04f      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002704:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d148      	bne.n	80027a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a19      	ldr	r2, [pc, #100]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800271c:	4b17      	ldr	r3, [pc, #92]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a16      	ldr	r2, [pc, #88]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002726:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002728:	f7fe fbda 	bl	8000ee0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fbd6 	bl	8000ee0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e030      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x734>
 800274e:	e028      	b.n	80027a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d023      	beq.n	800279e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a08      	ldr	r2, [pc, #32]	@ (800277c <HAL_RCC_OscConfig+0x780>)
 800275c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fbbd 	bl	8000ee0 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002768:	e00c      	b.n	8002784 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe fbb9 	bl	8000ee0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d905      	bls.n	8002784 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e013      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
 800277c:	40021000 	.word	0x40021000
 8002780:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002784:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_RCC_OscConfig+0x7b0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ec      	bne.n	800276a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_RCC_OscConfig+0x7b0>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	4905      	ldr	r1, [pc, #20]	@ (80027ac <HAL_RCC_OscConfig+0x7b0>)
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_RCC_OscConfig+0x7b4>)
 8002798:	4013      	ands	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
 800279c:	e001      	b.n	80027a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	feeefffc 	.word	0xfeeefffc

080027b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0e7      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c8:	4b75      	ldr	r3, [pc, #468]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d910      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b72      	ldr	r3, [pc, #456]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4970      	ldr	r1, [pc, #448]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b6e      	ldr	r3, [pc, #440]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cf      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	4b66      	ldr	r3, [pc, #408]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002810:	429a      	cmp	r2, r3
 8002812:	d908      	bls.n	8002826 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4960      	ldr	r1, [pc, #384]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d04c      	beq.n	80028cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283a:	4b5a      	ldr	r3, [pc, #360]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d121      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0a6      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	4b54      	ldr	r3, [pc, #336]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e09a      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800286a:	4b4e      	ldr	r3, [pc, #312]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e08e      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287a:	4b4a      	ldr	r3, [pc, #296]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e086      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b46      	ldr	r3, [pc, #280]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4943      	ldr	r1, [pc, #268]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe fb20 	bl	8000ee0 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe fb1c 	bl	8000ee0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e06e      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b3a      	ldr	r3, [pc, #232]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d208      	bcs.n	80028fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	492b      	ldr	r1, [pc, #172]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fa:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d210      	bcs.n	800292a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002908:	4b25      	ldr	r3, [pc, #148]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 0207 	bic.w	r2, r3, #7
 8002910:	4923      	ldr	r1, [pc, #140]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002918:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e036      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4918      	ldr	r1, [pc, #96]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4910      	ldr	r1, [pc, #64]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002968:	f000 f824 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	490b      	ldr	r1, [pc, #44]	@ (80029a8 <HAL_RCC_ClockConfig+0x1f4>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 8002986:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1fc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fa57 	bl	8000e40 <HAL_InitTick>
 8002992:	4603      	mov	r3, r0
 8002994:	72fb      	strb	r3, [r7, #11]

  return status;
 8002996:	7afb      	ldrb	r3, [r7, #11]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08004a7c 	.word	0x08004a7c
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	@ 0x24
 80029b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c2:	4b3e      	ldr	r3, [pc, #248]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029cc:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x34>
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d121      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d11e      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029e8:	4b34      	ldr	r3, [pc, #208]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029f4:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e005      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a04:	4b2d      	ldr	r3, [pc, #180]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a10:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e004      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a38:	4b23      	ldr	r3, [pc, #140]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d134      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d003      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0xac>
 8002a58:	e005      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5c:	617b      	str	r3, [r7, #20]
      break;
 8002a5e:	e005      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a60:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a62:	617b      	str	r3, [r7, #20]
      break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	617b      	str	r3, [r7, #20]
      break;
 8002a6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	fb03 f202 	mul.w	r2, r3, r2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	0e5b      	lsrs	r3, r3, #25
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aac:	69bb      	ldr	r3, [r7, #24]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	@ 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08004a94 	.word	0x08004a94
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	007a1200 	.word	0x007a1200

08002acc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ae8:	f7ff fff0 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4904      	ldr	r1, [pc, #16]	@ (8002b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08004a8c 	.word	0x08004a8c

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b14:	f7ff ffda 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0adb      	lsrs	r3, r3, #11
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4904      	ldr	r1, [pc, #16]	@ (8002b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08004a8c 	.word	0x08004a8c

08002b3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b48:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b54:	f7ff f9ee 	bl	8001f34 <HAL_PWREx_GetVoltageRange>
 8002b58:	6178      	str	r0, [r7, #20]
 8002b5a:	e014      	b.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	4a24      	ldr	r2, [pc, #144]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b74:	f7ff f9de 	bl	8001f34 <HAL_PWREx_GetVoltageRange>
 8002b78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8c:	d10b      	bne.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b80      	cmp	r3, #128	@ 0x80
 8002b92:	d919      	bls.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b98:	d902      	bls.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	e013      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e010      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b80      	cmp	r3, #128	@ 0x80
 8002baa:	d902      	bls.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bac:	2303      	movs	r3, #3
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e00a      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b80      	cmp	r3, #128	@ 0x80
 8002bb6:	d102      	bne.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb8:	2302      	movs	r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e004      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b70      	cmp	r3, #112	@ 0x70
 8002bc2:	d101      	bne.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 0207 	bic.w	r2, r3, #7
 8002bd0:	4909      	ldr	r1, [pc, #36]	@ (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bd8:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d001      	beq.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40022000 	.word	0x40022000

08002bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c04:	2300      	movs	r3, #0
 8002c06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d041      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c20:	d02a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c26:	d824      	bhi.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c2c:	d008      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c32:	d81e      	bhi.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c3c:	d010      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c3e:	e018      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c40:	4b86      	ldr	r3, [pc, #536]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a85      	ldr	r2, [pc, #532]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c4c:	e015      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fabb 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c5e:	e00c      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3320      	adds	r3, #32
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fba6 	bl	80033b8 <RCCEx_PLLSAI2_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c70:	e003      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	74fb      	strb	r3, [r7, #19]
      break;
 8002c76:	e000      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c80:	4b76      	ldr	r3, [pc, #472]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c8e:	4973      	ldr	r1, [pc, #460]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c96:	e001      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d041      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cb0:	d02a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cb2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cb6:	d824      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cc2:	d81e      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cce:	e018      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cd0:	4b62      	ldr	r3, [pc, #392]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a61      	ldr	r2, [pc, #388]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cdc:	e015      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fa73 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cee:	e00c      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3320      	adds	r3, #32
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fb5e 	bl	80033b8 <RCCEx_PLLSAI2_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d00:	e003      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	74fb      	strb	r3, [r7, #19]
      break;
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d10:	4b52      	ldr	r3, [pc, #328]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d1e:	494f      	ldr	r1, [pc, #316]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d26:	e001      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80a0 	beq.w	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	4b41      	ldr	r3, [pc, #260]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	4a40      	ldr	r2, [pc, #256]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d60:	4b3e      	ldr	r3, [pc, #248]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d70:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3a      	ldr	r2, [pc, #232]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d7c:	f7fe f8b0 	bl	8000ee0 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d82:	e009      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d84:	f7fe f8ac 	bl	8000ee0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	74fb      	strb	r3, [r7, #19]
        break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d98:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ef      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d15c      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002daa:	4b2c      	ldr	r3, [pc, #176]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01f      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d019      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dc8:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dd4:	4b21      	ldr	r3, [pc, #132]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dda:	4a20      	ldr	r2, [pc, #128]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	4a1c      	ldr	r2, [pc, #112]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002df4:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe f86b 	bl	8000ee0 <HAL_GetTick>
 8002e0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0c:	e00b      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe f867 	bl	8000ee0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d902      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	74fb      	strb	r3, [r7, #19]
            break;
 8002e24:	e006      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e26:	4b0d      	ldr	r3, [pc, #52]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ec      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e4a:	4904      	ldr	r1, [pc, #16]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e52:	e009      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	74bb      	strb	r3, [r7, #18]
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e68:	7c7b      	ldrb	r3, [r7, #17]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4b9e      	ldr	r3, [pc, #632]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e72:	4a9d      	ldr	r2, [pc, #628]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e86:	4b98      	ldr	r3, [pc, #608]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f023 0203 	bic.w	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	4994      	ldr	r1, [pc, #592]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ea8:	4b8f      	ldr	r3, [pc, #572]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f023 020c 	bic.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	498c      	ldr	r1, [pc, #560]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eca:	4b87      	ldr	r3, [pc, #540]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	4983      	ldr	r1, [pc, #524]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eec:	4b7e      	ldr	r3, [pc, #504]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	497b      	ldr	r1, [pc, #492]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f0e:	4b76      	ldr	r3, [pc, #472]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f1c:	4972      	ldr	r1, [pc, #456]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f30:	4b6d      	ldr	r3, [pc, #436]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3e:	496a      	ldr	r1, [pc, #424]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f52:	4b65      	ldr	r3, [pc, #404]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	4961      	ldr	r1, [pc, #388]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f74:	4b5c      	ldr	r3, [pc, #368]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f82:	4959      	ldr	r1, [pc, #356]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f96:	4b54      	ldr	r3, [pc, #336]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa4:	4950      	ldr	r1, [pc, #320]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc6:	4948      	ldr	r1, [pc, #288]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fda:	4b43      	ldr	r3, [pc, #268]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	493f      	ldr	r1, [pc, #252]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d028      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800300a:	4937      	ldr	r1, [pc, #220]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800301a:	d106      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301c:	4b32      	ldr	r3, [pc, #200]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a31      	ldr	r2, [pc, #196]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003026:	60d3      	str	r3, [r2, #12]
 8003028:	e011      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800302e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003032:	d10c      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f8c8 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d028      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800305a:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003060:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	491f      	ldr	r1, [pc, #124]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003078:	d106      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800307a:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4a1a      	ldr	r2, [pc, #104]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003084:	60d3      	str	r3, [r2, #12]
 8003086:	e011      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003090:	d10c      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	2101      	movs	r1, #1
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f899 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d02b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c6:	4908      	ldr	r1, [pc, #32]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030d6:	d109      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a02      	ldr	r2, [pc, #8]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e2:	60d3      	str	r3, [r2, #12]
 80030e4:	e014      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f867 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8003102:	4603      	mov	r3, r0
 8003104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800311c:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003122:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800312a:	4928      	ldr	r1, [pc, #160]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800313a:	d10d      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	2102      	movs	r1, #2
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f844 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d014      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	74bb      	strb	r3, [r7, #18]
 8003156:	e011      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800315c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003160:	d10c      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3320      	adds	r3, #32
 8003166:	2102      	movs	r1, #2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f925 	bl	80033b8 <RCCEx_PLLSAI2_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003188:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003196:	490d      	ldr	r1, [pc, #52]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031aa:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ba:	4904      	ldr	r1, [pc, #16]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000

080031d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031de:	4b75      	ldr	r3, [pc, #468]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031ea:	4b72      	ldr	r3, [pc, #456]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0203 	and.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10d      	bne.n	8003216 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
       ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003202:	4b6c      	ldr	r3, [pc, #432]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
       ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d047      	beq.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	e044      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d018      	beq.n	8003256 <RCCEx_PLLSAI1_Config+0x86>
 8003224:	2b03      	cmp	r3, #3
 8003226:	d825      	bhi.n	8003274 <RCCEx_PLLSAI1_Config+0xa4>
 8003228:	2b01      	cmp	r3, #1
 800322a:	d002      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0x62>
 800322c:	2b02      	cmp	r3, #2
 800322e:	d009      	beq.n	8003244 <RCCEx_PLLSAI1_Config+0x74>
 8003230:	e020      	b.n	8003274 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003232:	4b60      	ldr	r3, [pc, #384]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11d      	bne.n	800327a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003242:	e01a      	b.n	800327a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003244:	4b5b      	ldr	r3, [pc, #364]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e013      	b.n	800327e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003256:	4b57      	ldr	r3, [pc, #348]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003262:	4b54      	ldr	r3, [pc, #336]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003272:	e006      	b.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e004      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003282:	bf00      	nop
    }

    if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800328a:	4b4a      	ldr	r3, [pc, #296]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	430b      	orrs	r3, r1
 80032a0:	4944      	ldr	r1, [pc, #272]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d17d      	bne.n	80033a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032ac:	4b41      	ldr	r3, [pc, #260]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a40      	ldr	r2, [pc, #256]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fd fe12 	bl	8000ee0 <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032be:	e009      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c0:	f7fd fe0e 	bl	8000ee0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d902      	bls.n	80032d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	73fb      	strb	r3, [r7, #15]
        break;
 80032d2:	e005      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032d4:	4b37      	ldr	r3, [pc, #220]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ef      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d160      	bne.n	80033a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ec:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80032f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6892      	ldr	r2, [r2, #8]
 80032fc:	0211      	lsls	r1, r2, #8
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	0912      	lsrs	r2, r2, #4
 8003304:	0452      	lsls	r2, r2, #17
 8003306:	430a      	orrs	r2, r1
 8003308:	492a      	ldr	r1, [pc, #168]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	610b      	str	r3, [r1, #16]
 800330e:	e027      	b.n	8003360 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d112      	bne.n	800333c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003316:	4b27      	ldr	r3, [pc, #156]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800331e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6892      	ldr	r2, [r2, #8]
 8003326:	0211      	lsls	r1, r2, #8
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6912      	ldr	r2, [r2, #16]
 800332c:	0852      	lsrs	r2, r2, #1
 800332e:	3a01      	subs	r2, #1
 8003330:	0552      	lsls	r2, r2, #21
 8003332:	430a      	orrs	r2, r1
 8003334:	491f      	ldr	r1, [pc, #124]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	610b      	str	r3, [r1, #16]
 800333a:	e011      	b.n	8003360 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800333c:	4b1d      	ldr	r3, [pc, #116]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003344:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	0211      	lsls	r1, r2, #8
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6952      	ldr	r2, [r2, #20]
 8003352:	0852      	lsrs	r2, r2, #1
 8003354:	3a01      	subs	r2, #1
 8003356:	0652      	lsls	r2, r2, #25
 8003358:	430a      	orrs	r2, r1
 800335a:	4916      	ldr	r1, [pc, #88]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003360:	4b14      	ldr	r3, [pc, #80]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a13      	ldr	r2, [pc, #76]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003366:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800336a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fd fdb8 	bl	8000ee0 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003374:	f7fd fdb4 	bl	8000ee0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
          break;
 8003386:	e005      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003388:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ef      	beq.n	8003374 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	4904      	ldr	r1, [pc, #16]	@ (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000

080033b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d018      	beq.n	8003404 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033d2:	4b67      	ldr	r3, [pc, #412]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0203 	and.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d10d      	bne.n	80033fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
       ||
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033ea:	4b61      	ldr	r3, [pc, #388]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
       ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d047      	beq.n	800348e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e044      	b.n	800348e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d018      	beq.n	800343e <RCCEx_PLLSAI2_Config+0x86>
 800340c:	2b03      	cmp	r3, #3
 800340e:	d825      	bhi.n	800345c <RCCEx_PLLSAI2_Config+0xa4>
 8003410:	2b01      	cmp	r3, #1
 8003412:	d002      	beq.n	800341a <RCCEx_PLLSAI2_Config+0x62>
 8003414:	2b02      	cmp	r3, #2
 8003416:	d009      	beq.n	800342c <RCCEx_PLLSAI2_Config+0x74>
 8003418:	e020      	b.n	800345c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800341a:	4b55      	ldr	r3, [pc, #340]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11d      	bne.n	8003462 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800342a:	e01a      	b.n	8003462 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800342c:	4b50      	ldr	r3, [pc, #320]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d116      	bne.n	8003466 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343c:	e013      	b.n	8003466 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800343e:	4b4c      	ldr	r3, [pc, #304]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800344a:	4b49      	ldr	r3, [pc, #292]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800345a:	e006      	b.n	800346a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      break;
 8003460:	e004      	b.n	800346c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800346a:	bf00      	nop
    }

    if(status == HAL_OK)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003472:	4b3f      	ldr	r3, [pc, #252]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6819      	ldr	r1, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	430b      	orrs	r3, r1
 8003488:	4939      	ldr	r1, [pc, #228]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d167      	bne.n	8003564 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003494:	4b36      	ldr	r3, [pc, #216]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a35      	ldr	r2, [pc, #212]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800349e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fd fd1e 	bl	8000ee0 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034a6:	e009      	b.n	80034bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034a8:	f7fd fd1a 	bl	8000ee0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d902      	bls.n	80034bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ba:	e005      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ef      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d14a      	bne.n	8003564 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d111      	bne.n	80034f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034d4:	4b26      	ldr	r3, [pc, #152]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80034dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6892      	ldr	r2, [r2, #8]
 80034e4:	0211      	lsls	r1, r2, #8
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68d2      	ldr	r2, [r2, #12]
 80034ea:	0912      	lsrs	r2, r2, #4
 80034ec:	0452      	lsls	r2, r2, #17
 80034ee:	430a      	orrs	r2, r1
 80034f0:	491f      	ldr	r1, [pc, #124]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	614b      	str	r3, [r1, #20]
 80034f6:	e011      	b.n	800351c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003500:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	0211      	lsls	r1, r2, #8
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6912      	ldr	r2, [r2, #16]
 800350e:	0852      	lsrs	r2, r2, #1
 8003510:	3a01      	subs	r2, #1
 8003512:	0652      	lsls	r2, r2, #25
 8003514:	430a      	orrs	r2, r1
 8003516:	4916      	ldr	r1, [pc, #88]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003518:	4313      	orrs	r3, r2
 800351a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800351c:	4b14      	ldr	r3, [pc, #80]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a13      	ldr	r2, [pc, #76]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003526:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fd fcda 	bl	8000ee0 <HAL_GetTick>
 800352c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800352e:	e009      	b.n	8003544 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003530:	f7fd fcd6 	bl	8000ee0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d902      	bls.n	8003544 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	73fb      	strb	r3, [r7, #15]
          break;
 8003542:	e005      	b.n	8003550 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003544:	4b0a      	ldr	r3, [pc, #40]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ef      	beq.n	8003530 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	4904      	ldr	r1, [pc, #16]	@ (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003564:	7bfb      	ldrb	r3, [r7, #15]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000

08003574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e040      	b.n	8003608 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fbac 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	@ 0x24
 80035a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fb6a 	bl	8003c94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f8af 	bl	8003724 <UART_SetConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e01b      	b.n	8003608 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fbe9 	bl	8003dd8 <UART_CheckIdleState>
 8003606:	4603      	mov	r3, r0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003624:	2b20      	cmp	r3, #32
 8003626:	d177      	bne.n	8003718 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_UART_Transmit+0x24>
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e070      	b.n	800371a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2221      	movs	r2, #33	@ 0x21
 8003644:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003646:	f7fd fc4b 	bl	8000ee0 <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	88fa      	ldrh	r2, [r7, #6]
 8003650:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003664:	d108      	bne.n	8003678 <HAL_UART_Transmit+0x68>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e003      	b.n	8003680 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003680:	e02f      	b.n	80036e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	2180      	movs	r1, #128	@ 0x80
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fc4b 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e03b      	b.n	800371a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	881a      	ldrh	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b4:	b292      	uxth	r2, r2
 80036b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	3302      	adds	r3, #2
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	e007      	b.n	80036d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3301      	adds	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1c9      	bne.n	8003682 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2140      	movs	r1, #64	@ 0x40
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fc15 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e005      	b.n	800371a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b08a      	sub	sp, #40	@ 0x28
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	431a      	orrs	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	4313      	orrs	r3, r2
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4ba4      	ldr	r3, [pc, #656]	@ (80039e4 <UART_SetConfig+0x2c0>)
 8003754:	4013      	ands	r3, r2
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800375c:	430b      	orrs	r3, r1
 800375e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a99      	ldr	r2, [pc, #612]	@ (80039e8 <UART_SetConfig+0x2c4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378c:	4313      	orrs	r3, r2
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a90      	ldr	r2, [pc, #576]	@ (80039ec <UART_SetConfig+0x2c8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d126      	bne.n	80037fc <UART_SetConfig+0xd8>
 80037ae:	4b90      	ldr	r3, [pc, #576]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d81b      	bhi.n	80037f4 <UART_SetConfig+0xd0>
 80037bc:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <UART_SetConfig+0xa0>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037ed 	.word	0x080037ed
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037da:	e116      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80037dc:	2302      	movs	r3, #2
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e2:	e112      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80037e4:	2304      	movs	r3, #4
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ea:	e10e      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80037ec:	2308      	movs	r3, #8
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f2:	e10a      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80037f4:	2310      	movs	r3, #16
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fa:	e106      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7c      	ldr	r2, [pc, #496]	@ (80039f4 <UART_SetConfig+0x2d0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d138      	bne.n	8003878 <UART_SetConfig+0x154>
 8003806:	4b7a      	ldr	r3, [pc, #488]	@ (80039f0 <UART_SetConfig+0x2cc>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b0c      	cmp	r3, #12
 8003812:	d82d      	bhi.n	8003870 <UART_SetConfig+0x14c>
 8003814:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <UART_SetConfig+0xf8>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	08003851 	.word	0x08003851
 8003820:	08003871 	.word	0x08003871
 8003824:	08003871 	.word	0x08003871
 8003828:	08003871 	.word	0x08003871
 800382c:	08003861 	.word	0x08003861
 8003830:	08003871 	.word	0x08003871
 8003834:	08003871 	.word	0x08003871
 8003838:	08003871 	.word	0x08003871
 800383c:	08003859 	.word	0x08003859
 8003840:	08003871 	.word	0x08003871
 8003844:	08003871 	.word	0x08003871
 8003848:	08003871 	.word	0x08003871
 800384c:	08003869 	.word	0x08003869
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003856:	e0d8      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003858:	2302      	movs	r3, #2
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385e:	e0d4      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003860:	2304      	movs	r3, #4
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e0d0      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003868:	2308      	movs	r3, #8
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386e:	e0cc      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003870:	2310      	movs	r3, #16
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003876:	e0c8      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a5e      	ldr	r2, [pc, #376]	@ (80039f8 <UART_SetConfig+0x2d4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d125      	bne.n	80038ce <UART_SetConfig+0x1aa>
 8003882:	4b5b      	ldr	r3, [pc, #364]	@ (80039f0 <UART_SetConfig+0x2cc>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003888:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800388c:	2b30      	cmp	r3, #48	@ 0x30
 800388e:	d016      	beq.n	80038be <UART_SetConfig+0x19a>
 8003890:	2b30      	cmp	r3, #48	@ 0x30
 8003892:	d818      	bhi.n	80038c6 <UART_SetConfig+0x1a2>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d00a      	beq.n	80038ae <UART_SetConfig+0x18a>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d814      	bhi.n	80038c6 <UART_SetConfig+0x1a2>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <UART_SetConfig+0x182>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d008      	beq.n	80038b6 <UART_SetConfig+0x192>
 80038a4:	e00f      	b.n	80038c6 <UART_SetConfig+0x1a2>
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ac:	e0ad      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80038ae:	2302      	movs	r3, #2
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b4:	e0a9      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80038b6:	2304      	movs	r3, #4
 80038b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038bc:	e0a5      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80038be:	2308      	movs	r3, #8
 80038c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c4:	e0a1      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80038c6:	2310      	movs	r3, #16
 80038c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038cc:	e09d      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <UART_SetConfig+0x2d8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d125      	bne.n	8003924 <UART_SetConfig+0x200>
 80038d8:	4b45      	ldr	r3, [pc, #276]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038e4:	d016      	beq.n	8003914 <UART_SetConfig+0x1f0>
 80038e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038e8:	d818      	bhi.n	800391c <UART_SetConfig+0x1f8>
 80038ea:	2b80      	cmp	r3, #128	@ 0x80
 80038ec:	d00a      	beq.n	8003904 <UART_SetConfig+0x1e0>
 80038ee:	2b80      	cmp	r3, #128	@ 0x80
 80038f0:	d814      	bhi.n	800391c <UART_SetConfig+0x1f8>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <UART_SetConfig+0x1d8>
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d008      	beq.n	800390c <UART_SetConfig+0x1e8>
 80038fa:	e00f      	b.n	800391c <UART_SetConfig+0x1f8>
 80038fc:	2300      	movs	r3, #0
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003902:	e082      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003904:	2302      	movs	r3, #2
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390a:	e07e      	b.n	8003a0a <UART_SetConfig+0x2e6>
 800390c:	2304      	movs	r3, #4
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003912:	e07a      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003914:	2308      	movs	r3, #8
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391a:	e076      	b.n	8003a0a <UART_SetConfig+0x2e6>
 800391c:	2310      	movs	r3, #16
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003922:	e072      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a35      	ldr	r2, [pc, #212]	@ (8003a00 <UART_SetConfig+0x2dc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12a      	bne.n	8003984 <UART_SetConfig+0x260>
 800392e:	4b30      	ldr	r3, [pc, #192]	@ (80039f0 <UART_SetConfig+0x2cc>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003934:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003938:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800393c:	d01a      	beq.n	8003974 <UART_SetConfig+0x250>
 800393e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003942:	d81b      	bhi.n	800397c <UART_SetConfig+0x258>
 8003944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003948:	d00c      	beq.n	8003964 <UART_SetConfig+0x240>
 800394a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394e:	d815      	bhi.n	800397c <UART_SetConfig+0x258>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <UART_SetConfig+0x238>
 8003954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003958:	d008      	beq.n	800396c <UART_SetConfig+0x248>
 800395a:	e00f      	b.n	800397c <UART_SetConfig+0x258>
 800395c:	2300      	movs	r3, #0
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003962:	e052      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003964:	2302      	movs	r3, #2
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800396a:	e04e      	b.n	8003a0a <UART_SetConfig+0x2e6>
 800396c:	2304      	movs	r3, #4
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003972:	e04a      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003974:	2308      	movs	r3, #8
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397a:	e046      	b.n	8003a0a <UART_SetConfig+0x2e6>
 800397c:	2310      	movs	r3, #16
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003982:	e042      	b.n	8003a0a <UART_SetConfig+0x2e6>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <UART_SetConfig+0x2c4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d13a      	bne.n	8003a04 <UART_SetConfig+0x2e0>
 800398e:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <UART_SetConfig+0x2cc>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003994:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003998:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800399c:	d01a      	beq.n	80039d4 <UART_SetConfig+0x2b0>
 800399e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039a2:	d81b      	bhi.n	80039dc <UART_SetConfig+0x2b8>
 80039a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a8:	d00c      	beq.n	80039c4 <UART_SetConfig+0x2a0>
 80039aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ae:	d815      	bhi.n	80039dc <UART_SetConfig+0x2b8>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <UART_SetConfig+0x298>
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b8:	d008      	beq.n	80039cc <UART_SetConfig+0x2a8>
 80039ba:	e00f      	b.n	80039dc <UART_SetConfig+0x2b8>
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c2:	e022      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ca:	e01e      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80039cc:	2304      	movs	r3, #4
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d2:	e01a      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80039d4:	2308      	movs	r3, #8
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039da:	e016      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80039dc:	2310      	movs	r3, #16
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e2:	e012      	b.n	8003a0a <UART_SetConfig+0x2e6>
 80039e4:	efff69f3 	.word	0xefff69f3
 80039e8:	40008000 	.word	0x40008000
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40004400 	.word	0x40004400
 80039f8:	40004800 	.word	0x40004800
 80039fc:	40004c00 	.word	0x40004c00
 8003a00:	40005000 	.word	0x40005000
 8003a04:	2310      	movs	r3, #16
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a9f      	ldr	r2, [pc, #636]	@ (8003c8c <UART_SetConfig+0x568>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d17a      	bne.n	8003b0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d824      	bhi.n	8003a66 <UART_SetConfig+0x342>
 8003a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a24 <UART_SetConfig+0x300>)
 8003a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a22:	bf00      	nop
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a67 	.word	0x08003a67
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003a67 	.word	0x08003a67
 8003a34:	08003a57 	.word	0x08003a57
 8003a38:	08003a67 	.word	0x08003a67
 8003a3c:	08003a67 	.word	0x08003a67
 8003a40:	08003a67 	.word	0x08003a67
 8003a44:	08003a5f 	.word	0x08003a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7ff f84c 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003a4c:	61f8      	str	r0, [r7, #28]
        break;
 8003a4e:	e010      	b.n	8003a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a50:	4b8f      	ldr	r3, [pc, #572]	@ (8003c90 <UART_SetConfig+0x56c>)
 8003a52:	61fb      	str	r3, [r7, #28]
        break;
 8003a54:	e00d      	b.n	8003a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a56:	f7fe ffad 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8003a5a:	61f8      	str	r0, [r7, #28]
        break;
 8003a5c:	e009      	b.n	8003a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a62:	61fb      	str	r3, [r7, #28]
        break;
 8003a64:	e005      	b.n	8003a72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80fb 	beq.w	8003c70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d305      	bcc.n	8003a96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d903      	bls.n	8003a9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a9c:	e0e8      	b.n	8003c70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	461c      	mov	r4, r3
 8003aa4:	4615      	mov	r5, r2
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	022b      	lsls	r3, r5, #8
 8003ab0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ab4:	0222      	lsls	r2, r4, #8
 8003ab6:	68f9      	ldr	r1, [r7, #12]
 8003ab8:	6849      	ldr	r1, [r1, #4]
 8003aba:	0849      	lsrs	r1, r1, #1
 8003abc:	2000      	movs	r0, #0
 8003abe:	4688      	mov	r8, r1
 8003ac0:	4681      	mov	r9, r0
 8003ac2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ac6:	eb43 0b09 	adc.w	fp, r3, r9
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ad8:	4650      	mov	r0, sl
 8003ada:	4659      	mov	r1, fp
 8003adc:	f7fc fbc8 	bl	8000270 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aee:	d308      	bcc.n	8003b02 <UART_SetConfig+0x3de>
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af6:	d204      	bcs.n	8003b02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	e0b6      	b.n	8003c70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b08:	e0b2      	b.n	8003c70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b12:	d15e      	bne.n	8003bd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d828      	bhi.n	8003b6e <UART_SetConfig+0x44a>
 8003b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <UART_SetConfig+0x400>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b6f 	.word	0x08003b6f
 8003b34:	08003b5f 	.word	0x08003b5f
 8003b38:	08003b6f 	.word	0x08003b6f
 8003b3c:	08003b6f 	.word	0x08003b6f
 8003b40:	08003b6f 	.word	0x08003b6f
 8003b44:	08003b67 	.word	0x08003b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7fe ffcc 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	61f8      	str	r0, [r7, #28]
        break;
 8003b4e:	e014      	b.n	8003b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7fe ffde 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003b54:	61f8      	str	r0, [r7, #28]
        break;
 8003b56:	e010      	b.n	8003b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b58:	4b4d      	ldr	r3, [pc, #308]	@ (8003c90 <UART_SetConfig+0x56c>)
 8003b5a:	61fb      	str	r3, [r7, #28]
        break;
 8003b5c:	e00d      	b.n	8003b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5e:	f7fe ff29 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8003b62:	61f8      	str	r0, [r7, #28]
        break;
 8003b64:	e009      	b.n	8003b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b6a:	61fb      	str	r3, [r7, #28]
        break;
 8003b6c:	e005      	b.n	8003b7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d077      	beq.n	8003c70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	005a      	lsls	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d916      	bls.n	8003bca <UART_SetConfig+0x4a6>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba2:	d212      	bcs.n	8003bca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f023 030f 	bic.w	r3, r3, #15
 8003bac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	8afb      	ldrh	r3, [r7, #22]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	8afa      	ldrh	r2, [r7, #22]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	e052      	b.n	8003c70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003bd0:	e04e      	b.n	8003c70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d827      	bhi.n	8003c2a <UART_SetConfig+0x506>
 8003bda:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <UART_SetConfig+0x4bc>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c05 	.word	0x08003c05
 8003be4:	08003c0d 	.word	0x08003c0d
 8003be8:	08003c15 	.word	0x08003c15
 8003bec:	08003c2b 	.word	0x08003c2b
 8003bf0:	08003c1b 	.word	0x08003c1b
 8003bf4:	08003c2b 	.word	0x08003c2b
 8003bf8:	08003c2b 	.word	0x08003c2b
 8003bfc:	08003c2b 	.word	0x08003c2b
 8003c00:	08003c23 	.word	0x08003c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c04:	f7fe ff6e 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003c08:	61f8      	str	r0, [r7, #28]
        break;
 8003c0a:	e014      	b.n	8003c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7fe ff80 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003c10:	61f8      	str	r0, [r7, #28]
        break;
 8003c12:	e010      	b.n	8003c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c14:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <UART_SetConfig+0x56c>)
 8003c16:	61fb      	str	r3, [r7, #28]
        break;
 8003c18:	e00d      	b.n	8003c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe fecb 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8003c1e:	61f8      	str	r0, [r7, #28]
        break;
 8003c20:	e009      	b.n	8003c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c26:	61fb      	str	r3, [r7, #28]
        break;
 8003c28:	e005      	b.n	8003c36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c34:	bf00      	nop
    }

    if (pclk != 0U)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d019      	beq.n	8003c70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	085a      	lsrs	r2, r3, #1
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	441a      	add	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	d909      	bls.n	8003c6a <UART_SetConfig+0x546>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c5c:	d205      	bcs.n	8003c6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	e002      	b.n	8003c70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	@ 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40008000 	.word	0x40008000
 8003c90:	00f42400 	.word	0x00f42400

08003c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01a      	beq.n	8003daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d92:	d10a      	bne.n	8003daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b098      	sub	sp, #96	@ 0x60
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de8:	f7fd f87a 	bl	8000ee0 <HAL_GetTick>
 8003dec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d12e      	bne.n	8003e5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e04:	2200      	movs	r2, #0
 8003e06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f88c 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d021      	beq.n	8003e5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e6      	bne.n	8003e16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e062      	b.n	8003f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d149      	bne.n	8003efc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e70:	2200      	movs	r2, #0
 8003e72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f856 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d03c      	beq.n	8003efc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ed4:	61fa      	str	r2, [r7, #28]
 8003ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e011      	b.n	8003f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3758      	adds	r7, #88	@ 0x58
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f38:	e04f      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d04b      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fc ffcd 	bl	8000ee0 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e04e      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d037      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b80      	cmp	r3, #128	@ 0x80
 8003f6e:	d034      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d031      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d110      	bne.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2208      	movs	r2, #8
 8003f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f838 	bl	8004002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2208      	movs	r2, #8
 8003f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e029      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb4:	d111      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f81e 	bl	8004002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e00f      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d0a0      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004002:	b480      	push	{r7}
 8004004:	b095      	sub	sp, #84	@ 0x54
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800401e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004028:	643b      	str	r3, [r7, #64]	@ 0x40
 800402a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800402e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e6      	bne.n	800400a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	61fb      	str	r3, [r7, #28]
   return(result);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800405c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800405e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e5      	bne.n	800403c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004074:	2b01      	cmp	r3, #1
 8004076:	d118      	bne.n	80040aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	60bb      	str	r3, [r7, #8]
   return(result);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f023 0310 	bic.w	r3, r3, #16
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	613b      	str	r3, [r7, #16]
   return(result);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e6      	bne.n	8004078 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040be:	bf00      	nop
 80040c0:	3754      	adds	r7, #84	@ 0x54
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <sniprintf>:
 80040cc:	b40c      	push	{r2, r3}
 80040ce:	b530      	push	{r4, r5, lr}
 80040d0:	4b17      	ldr	r3, [pc, #92]	@ (8004130 <sniprintf+0x64>)
 80040d2:	1e0c      	subs	r4, r1, #0
 80040d4:	681d      	ldr	r5, [r3, #0]
 80040d6:	b09d      	sub	sp, #116	@ 0x74
 80040d8:	da08      	bge.n	80040ec <sniprintf+0x20>
 80040da:	238b      	movs	r3, #139	@ 0x8b
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	f04f 30ff 	mov.w	r0, #4294967295
 80040e2:	b01d      	add	sp, #116	@ 0x74
 80040e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040e8:	b002      	add	sp, #8
 80040ea:	4770      	bx	lr
 80040ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80040f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80040f4:	bf14      	ite	ne
 80040f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040fa:	4623      	moveq	r3, r4
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	9307      	str	r3, [sp, #28]
 8004100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004104:	9002      	str	r0, [sp, #8]
 8004106:	9006      	str	r0, [sp, #24]
 8004108:	f8ad 3016 	strh.w	r3, [sp, #22]
 800410c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800410e:	ab21      	add	r3, sp, #132	@ 0x84
 8004110:	a902      	add	r1, sp, #8
 8004112:	4628      	mov	r0, r5
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	f000 f995 	bl	8004444 <_svfiprintf_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	bfbc      	itt	lt
 800411e:	238b      	movlt	r3, #139	@ 0x8b
 8004120:	602b      	strlt	r3, [r5, #0]
 8004122:	2c00      	cmp	r4, #0
 8004124:	d0dd      	beq.n	80040e2 <sniprintf+0x16>
 8004126:	9b02      	ldr	r3, [sp, #8]
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e7d9      	b.n	80040e2 <sniprintf+0x16>
 800412e:	bf00      	nop
 8004130:	2000000c 	.word	0x2000000c

08004134 <memset>:
 8004134:	4402      	add	r2, r0
 8004136:	4603      	mov	r3, r0
 8004138:	4293      	cmp	r3, r2
 800413a:	d100      	bne.n	800413e <memset+0xa>
 800413c:	4770      	bx	lr
 800413e:	f803 1b01 	strb.w	r1, [r3], #1
 8004142:	e7f9      	b.n	8004138 <memset+0x4>

08004144 <__errno>:
 8004144:	4b01      	ldr	r3, [pc, #4]	@ (800414c <__errno+0x8>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	2000000c 	.word	0x2000000c

08004150 <__libc_init_array>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4d0d      	ldr	r5, [pc, #52]	@ (8004188 <__libc_init_array+0x38>)
 8004154:	4c0d      	ldr	r4, [pc, #52]	@ (800418c <__libc_init_array+0x3c>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	2600      	movs	r6, #0
 800415c:	42a6      	cmp	r6, r4
 800415e:	d109      	bne.n	8004174 <__libc_init_array+0x24>
 8004160:	4d0b      	ldr	r5, [pc, #44]	@ (8004190 <__libc_init_array+0x40>)
 8004162:	4c0c      	ldr	r4, [pc, #48]	@ (8004194 <__libc_init_array+0x44>)
 8004164:	f000 fc66 	bl	8004a34 <_init>
 8004168:	1b64      	subs	r4, r4, r5
 800416a:	10a4      	asrs	r4, r4, #2
 800416c:	2600      	movs	r6, #0
 800416e:	42a6      	cmp	r6, r4
 8004170:	d105      	bne.n	800417e <__libc_init_array+0x2e>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	f855 3b04 	ldr.w	r3, [r5], #4
 8004178:	4798      	blx	r3
 800417a:	3601      	adds	r6, #1
 800417c:	e7ee      	b.n	800415c <__libc_init_array+0xc>
 800417e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004182:	4798      	blx	r3
 8004184:	3601      	adds	r6, #1
 8004186:	e7f2      	b.n	800416e <__libc_init_array+0x1e>
 8004188:	08004b00 	.word	0x08004b00
 800418c:	08004b00 	.word	0x08004b00
 8004190:	08004b00 	.word	0x08004b00
 8004194:	08004b04 	.word	0x08004b04

08004198 <__retarget_lock_acquire_recursive>:
 8004198:	4770      	bx	lr

0800419a <__retarget_lock_release_recursive>:
 800419a:	4770      	bx	lr

0800419c <_free_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4605      	mov	r5, r0
 80041a0:	2900      	cmp	r1, #0
 80041a2:	d041      	beq.n	8004228 <_free_r+0x8c>
 80041a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a8:	1f0c      	subs	r4, r1, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bfb8      	it	lt
 80041ae:	18e4      	addlt	r4, r4, r3
 80041b0:	f000 f8e0 	bl	8004374 <__malloc_lock>
 80041b4:	4a1d      	ldr	r2, [pc, #116]	@ (800422c <_free_r+0x90>)
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	b933      	cbnz	r3, 80041c8 <_free_r+0x2c>
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	6014      	str	r4, [r2, #0]
 80041be:	4628      	mov	r0, r5
 80041c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041c4:	f000 b8dc 	b.w	8004380 <__malloc_unlock>
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d908      	bls.n	80041de <_free_r+0x42>
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	1821      	adds	r1, r4, r0
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf01      	itttt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	1809      	addeq	r1, r1, r0
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	e7ed      	b.n	80041ba <_free_r+0x1e>
 80041de:	461a      	mov	r2, r3
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b10b      	cbz	r3, 80041e8 <_free_r+0x4c>
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d9fa      	bls.n	80041de <_free_r+0x42>
 80041e8:	6811      	ldr	r1, [r2, #0]
 80041ea:	1850      	adds	r0, r2, r1
 80041ec:	42a0      	cmp	r0, r4
 80041ee:	d10b      	bne.n	8004208 <_free_r+0x6c>
 80041f0:	6820      	ldr	r0, [r4, #0]
 80041f2:	4401      	add	r1, r0
 80041f4:	1850      	adds	r0, r2, r1
 80041f6:	4283      	cmp	r3, r0
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	d1e0      	bne.n	80041be <_free_r+0x22>
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	6053      	str	r3, [r2, #4]
 8004202:	4408      	add	r0, r1
 8004204:	6010      	str	r0, [r2, #0]
 8004206:	e7da      	b.n	80041be <_free_r+0x22>
 8004208:	d902      	bls.n	8004210 <_free_r+0x74>
 800420a:	230c      	movs	r3, #12
 800420c:	602b      	str	r3, [r5, #0]
 800420e:	e7d6      	b.n	80041be <_free_r+0x22>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	1821      	adds	r1, r4, r0
 8004214:	428b      	cmp	r3, r1
 8004216:	bf04      	itt	eq
 8004218:	6819      	ldreq	r1, [r3, #0]
 800421a:	685b      	ldreq	r3, [r3, #4]
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	bf04      	itt	eq
 8004220:	1809      	addeq	r1, r1, r0
 8004222:	6021      	streq	r1, [r4, #0]
 8004224:	6054      	str	r4, [r2, #4]
 8004226:	e7ca      	b.n	80041be <_free_r+0x22>
 8004228:	bd38      	pop	{r3, r4, r5, pc}
 800422a:	bf00      	nop
 800422c:	200002a8 	.word	0x200002a8

08004230 <sbrk_aligned>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4e0f      	ldr	r6, [pc, #60]	@ (8004270 <sbrk_aligned+0x40>)
 8004234:	460c      	mov	r4, r1
 8004236:	6831      	ldr	r1, [r6, #0]
 8004238:	4605      	mov	r5, r0
 800423a:	b911      	cbnz	r1, 8004242 <sbrk_aligned+0x12>
 800423c:	f000 fba6 	bl	800498c <_sbrk_r>
 8004240:	6030      	str	r0, [r6, #0]
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f000 fba1 	bl	800498c <_sbrk_r>
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	d103      	bne.n	8004256 <sbrk_aligned+0x26>
 800424e:	f04f 34ff 	mov.w	r4, #4294967295
 8004252:	4620      	mov	r0, r4
 8004254:	bd70      	pop	{r4, r5, r6, pc}
 8004256:	1cc4      	adds	r4, r0, #3
 8004258:	f024 0403 	bic.w	r4, r4, #3
 800425c:	42a0      	cmp	r0, r4
 800425e:	d0f8      	beq.n	8004252 <sbrk_aligned+0x22>
 8004260:	1a21      	subs	r1, r4, r0
 8004262:	4628      	mov	r0, r5
 8004264:	f000 fb92 	bl	800498c <_sbrk_r>
 8004268:	3001      	adds	r0, #1
 800426a:	d1f2      	bne.n	8004252 <sbrk_aligned+0x22>
 800426c:	e7ef      	b.n	800424e <sbrk_aligned+0x1e>
 800426e:	bf00      	nop
 8004270:	200002a4 	.word	0x200002a4

08004274 <_malloc_r>:
 8004274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004278:	1ccd      	adds	r5, r1, #3
 800427a:	f025 0503 	bic.w	r5, r5, #3
 800427e:	3508      	adds	r5, #8
 8004280:	2d0c      	cmp	r5, #12
 8004282:	bf38      	it	cc
 8004284:	250c      	movcc	r5, #12
 8004286:	2d00      	cmp	r5, #0
 8004288:	4606      	mov	r6, r0
 800428a:	db01      	blt.n	8004290 <_malloc_r+0x1c>
 800428c:	42a9      	cmp	r1, r5
 800428e:	d904      	bls.n	800429a <_malloc_r+0x26>
 8004290:	230c      	movs	r3, #12
 8004292:	6033      	str	r3, [r6, #0]
 8004294:	2000      	movs	r0, #0
 8004296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800429a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004370 <_malloc_r+0xfc>
 800429e:	f000 f869 	bl	8004374 <__malloc_lock>
 80042a2:	f8d8 3000 	ldr.w	r3, [r8]
 80042a6:	461c      	mov	r4, r3
 80042a8:	bb44      	cbnz	r4, 80042fc <_malloc_r+0x88>
 80042aa:	4629      	mov	r1, r5
 80042ac:	4630      	mov	r0, r6
 80042ae:	f7ff ffbf 	bl	8004230 <sbrk_aligned>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	4604      	mov	r4, r0
 80042b6:	d158      	bne.n	800436a <_malloc_r+0xf6>
 80042b8:	f8d8 4000 	ldr.w	r4, [r8]
 80042bc:	4627      	mov	r7, r4
 80042be:	2f00      	cmp	r7, #0
 80042c0:	d143      	bne.n	800434a <_malloc_r+0xd6>
 80042c2:	2c00      	cmp	r4, #0
 80042c4:	d04b      	beq.n	800435e <_malloc_r+0xea>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	4639      	mov	r1, r7
 80042ca:	4630      	mov	r0, r6
 80042cc:	eb04 0903 	add.w	r9, r4, r3
 80042d0:	f000 fb5c 	bl	800498c <_sbrk_r>
 80042d4:	4581      	cmp	r9, r0
 80042d6:	d142      	bne.n	800435e <_malloc_r+0xea>
 80042d8:	6821      	ldr	r1, [r4, #0]
 80042da:	1a6d      	subs	r5, r5, r1
 80042dc:	4629      	mov	r1, r5
 80042de:	4630      	mov	r0, r6
 80042e0:	f7ff ffa6 	bl	8004230 <sbrk_aligned>
 80042e4:	3001      	adds	r0, #1
 80042e6:	d03a      	beq.n	800435e <_malloc_r+0xea>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	442b      	add	r3, r5
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	f8d8 3000 	ldr.w	r3, [r8]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	bb62      	cbnz	r2, 8004350 <_malloc_r+0xdc>
 80042f6:	f8c8 7000 	str.w	r7, [r8]
 80042fa:	e00f      	b.n	800431c <_malloc_r+0xa8>
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	1b52      	subs	r2, r2, r5
 8004300:	d420      	bmi.n	8004344 <_malloc_r+0xd0>
 8004302:	2a0b      	cmp	r2, #11
 8004304:	d917      	bls.n	8004336 <_malloc_r+0xc2>
 8004306:	1961      	adds	r1, r4, r5
 8004308:	42a3      	cmp	r3, r4
 800430a:	6025      	str	r5, [r4, #0]
 800430c:	bf18      	it	ne
 800430e:	6059      	strne	r1, [r3, #4]
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	bf08      	it	eq
 8004314:	f8c8 1000 	streq.w	r1, [r8]
 8004318:	5162      	str	r2, [r4, r5]
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	4630      	mov	r0, r6
 800431e:	f000 f82f 	bl	8004380 <__malloc_unlock>
 8004322:	f104 000b 	add.w	r0, r4, #11
 8004326:	1d23      	adds	r3, r4, #4
 8004328:	f020 0007 	bic.w	r0, r0, #7
 800432c:	1ac2      	subs	r2, r0, r3
 800432e:	bf1c      	itt	ne
 8004330:	1a1b      	subne	r3, r3, r0
 8004332:	50a3      	strne	r3, [r4, r2]
 8004334:	e7af      	b.n	8004296 <_malloc_r+0x22>
 8004336:	6862      	ldr	r2, [r4, #4]
 8004338:	42a3      	cmp	r3, r4
 800433a:	bf0c      	ite	eq
 800433c:	f8c8 2000 	streq.w	r2, [r8]
 8004340:	605a      	strne	r2, [r3, #4]
 8004342:	e7eb      	b.n	800431c <_malloc_r+0xa8>
 8004344:	4623      	mov	r3, r4
 8004346:	6864      	ldr	r4, [r4, #4]
 8004348:	e7ae      	b.n	80042a8 <_malloc_r+0x34>
 800434a:	463c      	mov	r4, r7
 800434c:	687f      	ldr	r7, [r7, #4]
 800434e:	e7b6      	b.n	80042be <_malloc_r+0x4a>
 8004350:	461a      	mov	r2, r3
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	42a3      	cmp	r3, r4
 8004356:	d1fb      	bne.n	8004350 <_malloc_r+0xdc>
 8004358:	2300      	movs	r3, #0
 800435a:	6053      	str	r3, [r2, #4]
 800435c:	e7de      	b.n	800431c <_malloc_r+0xa8>
 800435e:	230c      	movs	r3, #12
 8004360:	6033      	str	r3, [r6, #0]
 8004362:	4630      	mov	r0, r6
 8004364:	f000 f80c 	bl	8004380 <__malloc_unlock>
 8004368:	e794      	b.n	8004294 <_malloc_r+0x20>
 800436a:	6005      	str	r5, [r0, #0]
 800436c:	e7d6      	b.n	800431c <_malloc_r+0xa8>
 800436e:	bf00      	nop
 8004370:	200002a8 	.word	0x200002a8

08004374 <__malloc_lock>:
 8004374:	4801      	ldr	r0, [pc, #4]	@ (800437c <__malloc_lock+0x8>)
 8004376:	f7ff bf0f 	b.w	8004198 <__retarget_lock_acquire_recursive>
 800437a:	bf00      	nop
 800437c:	200002a0 	.word	0x200002a0

08004380 <__malloc_unlock>:
 8004380:	4801      	ldr	r0, [pc, #4]	@ (8004388 <__malloc_unlock+0x8>)
 8004382:	f7ff bf0a 	b.w	800419a <__retarget_lock_release_recursive>
 8004386:	bf00      	nop
 8004388:	200002a0 	.word	0x200002a0

0800438c <__ssputs_r>:
 800438c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004390:	688e      	ldr	r6, [r1, #8]
 8004392:	461f      	mov	r7, r3
 8004394:	42be      	cmp	r6, r7
 8004396:	680b      	ldr	r3, [r1, #0]
 8004398:	4682      	mov	sl, r0
 800439a:	460c      	mov	r4, r1
 800439c:	4690      	mov	r8, r2
 800439e:	d82d      	bhi.n	80043fc <__ssputs_r+0x70>
 80043a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043a8:	d026      	beq.n	80043f8 <__ssputs_r+0x6c>
 80043aa:	6965      	ldr	r5, [r4, #20]
 80043ac:	6909      	ldr	r1, [r1, #16]
 80043ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043b2:	eba3 0901 	sub.w	r9, r3, r1
 80043b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043ba:	1c7b      	adds	r3, r7, #1
 80043bc:	444b      	add	r3, r9
 80043be:	106d      	asrs	r5, r5, #1
 80043c0:	429d      	cmp	r5, r3
 80043c2:	bf38      	it	cc
 80043c4:	461d      	movcc	r5, r3
 80043c6:	0553      	lsls	r3, r2, #21
 80043c8:	d527      	bpl.n	800441a <__ssputs_r+0x8e>
 80043ca:	4629      	mov	r1, r5
 80043cc:	f7ff ff52 	bl	8004274 <_malloc_r>
 80043d0:	4606      	mov	r6, r0
 80043d2:	b360      	cbz	r0, 800442e <__ssputs_r+0xa2>
 80043d4:	6921      	ldr	r1, [r4, #16]
 80043d6:	464a      	mov	r2, r9
 80043d8:	f000 fae8 	bl	80049ac <memcpy>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	6126      	str	r6, [r4, #16]
 80043ea:	6165      	str	r5, [r4, #20]
 80043ec:	444e      	add	r6, r9
 80043ee:	eba5 0509 	sub.w	r5, r5, r9
 80043f2:	6026      	str	r6, [r4, #0]
 80043f4:	60a5      	str	r5, [r4, #8]
 80043f6:	463e      	mov	r6, r7
 80043f8:	42be      	cmp	r6, r7
 80043fa:	d900      	bls.n	80043fe <__ssputs_r+0x72>
 80043fc:	463e      	mov	r6, r7
 80043fe:	6820      	ldr	r0, [r4, #0]
 8004400:	4632      	mov	r2, r6
 8004402:	4641      	mov	r1, r8
 8004404:	f000 faa8 	bl	8004958 <memmove>
 8004408:	68a3      	ldr	r3, [r4, #8]
 800440a:	1b9b      	subs	r3, r3, r6
 800440c:	60a3      	str	r3, [r4, #8]
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	4433      	add	r3, r6
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	2000      	movs	r0, #0
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441a:	462a      	mov	r2, r5
 800441c:	f000 fad4 	bl	80049c8 <_realloc_r>
 8004420:	4606      	mov	r6, r0
 8004422:	2800      	cmp	r0, #0
 8004424:	d1e0      	bne.n	80043e8 <__ssputs_r+0x5c>
 8004426:	6921      	ldr	r1, [r4, #16]
 8004428:	4650      	mov	r0, sl
 800442a:	f7ff feb7 	bl	800419c <_free_r>
 800442e:	230c      	movs	r3, #12
 8004430:	f8ca 3000 	str.w	r3, [sl]
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	e7e9      	b.n	8004416 <__ssputs_r+0x8a>
	...

08004444 <_svfiprintf_r>:
 8004444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004448:	4698      	mov	r8, r3
 800444a:	898b      	ldrh	r3, [r1, #12]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	b09d      	sub	sp, #116	@ 0x74
 8004450:	4607      	mov	r7, r0
 8004452:	460d      	mov	r5, r1
 8004454:	4614      	mov	r4, r2
 8004456:	d510      	bpl.n	800447a <_svfiprintf_r+0x36>
 8004458:	690b      	ldr	r3, [r1, #16]
 800445a:	b973      	cbnz	r3, 800447a <_svfiprintf_r+0x36>
 800445c:	2140      	movs	r1, #64	@ 0x40
 800445e:	f7ff ff09 	bl	8004274 <_malloc_r>
 8004462:	6028      	str	r0, [r5, #0]
 8004464:	6128      	str	r0, [r5, #16]
 8004466:	b930      	cbnz	r0, 8004476 <_svfiprintf_r+0x32>
 8004468:	230c      	movs	r3, #12
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	b01d      	add	sp, #116	@ 0x74
 8004472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004476:	2340      	movs	r3, #64	@ 0x40
 8004478:	616b      	str	r3, [r5, #20]
 800447a:	2300      	movs	r3, #0
 800447c:	9309      	str	r3, [sp, #36]	@ 0x24
 800447e:	2320      	movs	r3, #32
 8004480:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004484:	f8cd 800c 	str.w	r8, [sp, #12]
 8004488:	2330      	movs	r3, #48	@ 0x30
 800448a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004628 <_svfiprintf_r+0x1e4>
 800448e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004492:	f04f 0901 	mov.w	r9, #1
 8004496:	4623      	mov	r3, r4
 8004498:	469a      	mov	sl, r3
 800449a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800449e:	b10a      	cbz	r2, 80044a4 <_svfiprintf_r+0x60>
 80044a0:	2a25      	cmp	r2, #37	@ 0x25
 80044a2:	d1f9      	bne.n	8004498 <_svfiprintf_r+0x54>
 80044a4:	ebba 0b04 	subs.w	fp, sl, r4
 80044a8:	d00b      	beq.n	80044c2 <_svfiprintf_r+0x7e>
 80044aa:	465b      	mov	r3, fp
 80044ac:	4622      	mov	r2, r4
 80044ae:	4629      	mov	r1, r5
 80044b0:	4638      	mov	r0, r7
 80044b2:	f7ff ff6b 	bl	800438c <__ssputs_r>
 80044b6:	3001      	adds	r0, #1
 80044b8:	f000 80a7 	beq.w	800460a <_svfiprintf_r+0x1c6>
 80044bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044be:	445a      	add	r2, fp
 80044c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80044c2:	f89a 3000 	ldrb.w	r3, [sl]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 809f 	beq.w	800460a <_svfiprintf_r+0x1c6>
 80044cc:	2300      	movs	r3, #0
 80044ce:	f04f 32ff 	mov.w	r2, #4294967295
 80044d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044d6:	f10a 0a01 	add.w	sl, sl, #1
 80044da:	9304      	str	r3, [sp, #16]
 80044dc:	9307      	str	r3, [sp, #28]
 80044de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80044e4:	4654      	mov	r4, sl
 80044e6:	2205      	movs	r2, #5
 80044e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ec:	484e      	ldr	r0, [pc, #312]	@ (8004628 <_svfiprintf_r+0x1e4>)
 80044ee:	f7fb fe6f 	bl	80001d0 <memchr>
 80044f2:	9a04      	ldr	r2, [sp, #16]
 80044f4:	b9d8      	cbnz	r0, 800452e <_svfiprintf_r+0xea>
 80044f6:	06d0      	lsls	r0, r2, #27
 80044f8:	bf44      	itt	mi
 80044fa:	2320      	movmi	r3, #32
 80044fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004500:	0711      	lsls	r1, r2, #28
 8004502:	bf44      	itt	mi
 8004504:	232b      	movmi	r3, #43	@ 0x2b
 8004506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800450a:	f89a 3000 	ldrb.w	r3, [sl]
 800450e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004510:	d015      	beq.n	800453e <_svfiprintf_r+0xfa>
 8004512:	9a07      	ldr	r2, [sp, #28]
 8004514:	4654      	mov	r4, sl
 8004516:	2000      	movs	r0, #0
 8004518:	f04f 0c0a 	mov.w	ip, #10
 800451c:	4621      	mov	r1, r4
 800451e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004522:	3b30      	subs	r3, #48	@ 0x30
 8004524:	2b09      	cmp	r3, #9
 8004526:	d94b      	bls.n	80045c0 <_svfiprintf_r+0x17c>
 8004528:	b1b0      	cbz	r0, 8004558 <_svfiprintf_r+0x114>
 800452a:	9207      	str	r2, [sp, #28]
 800452c:	e014      	b.n	8004558 <_svfiprintf_r+0x114>
 800452e:	eba0 0308 	sub.w	r3, r0, r8
 8004532:	fa09 f303 	lsl.w	r3, r9, r3
 8004536:	4313      	orrs	r3, r2
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	46a2      	mov	sl, r4
 800453c:	e7d2      	b.n	80044e4 <_svfiprintf_r+0xa0>
 800453e:	9b03      	ldr	r3, [sp, #12]
 8004540:	1d19      	adds	r1, r3, #4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	9103      	str	r1, [sp, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	bfbb      	ittet	lt
 800454a:	425b      	neglt	r3, r3
 800454c:	f042 0202 	orrlt.w	r2, r2, #2
 8004550:	9307      	strge	r3, [sp, #28]
 8004552:	9307      	strlt	r3, [sp, #28]
 8004554:	bfb8      	it	lt
 8004556:	9204      	strlt	r2, [sp, #16]
 8004558:	7823      	ldrb	r3, [r4, #0]
 800455a:	2b2e      	cmp	r3, #46	@ 0x2e
 800455c:	d10a      	bne.n	8004574 <_svfiprintf_r+0x130>
 800455e:	7863      	ldrb	r3, [r4, #1]
 8004560:	2b2a      	cmp	r3, #42	@ 0x2a
 8004562:	d132      	bne.n	80045ca <_svfiprintf_r+0x186>
 8004564:	9b03      	ldr	r3, [sp, #12]
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	9203      	str	r2, [sp, #12]
 800456c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004570:	3402      	adds	r4, #2
 8004572:	9305      	str	r3, [sp, #20]
 8004574:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004638 <_svfiprintf_r+0x1f4>
 8004578:	7821      	ldrb	r1, [r4, #0]
 800457a:	2203      	movs	r2, #3
 800457c:	4650      	mov	r0, sl
 800457e:	f7fb fe27 	bl	80001d0 <memchr>
 8004582:	b138      	cbz	r0, 8004594 <_svfiprintf_r+0x150>
 8004584:	9b04      	ldr	r3, [sp, #16]
 8004586:	eba0 000a 	sub.w	r0, r0, sl
 800458a:	2240      	movs	r2, #64	@ 0x40
 800458c:	4082      	lsls	r2, r0
 800458e:	4313      	orrs	r3, r2
 8004590:	3401      	adds	r4, #1
 8004592:	9304      	str	r3, [sp, #16]
 8004594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004598:	4824      	ldr	r0, [pc, #144]	@ (800462c <_svfiprintf_r+0x1e8>)
 800459a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800459e:	2206      	movs	r2, #6
 80045a0:	f7fb fe16 	bl	80001d0 <memchr>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d036      	beq.n	8004616 <_svfiprintf_r+0x1d2>
 80045a8:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <_svfiprintf_r+0x1ec>)
 80045aa:	bb1b      	cbnz	r3, 80045f4 <_svfiprintf_r+0x1b0>
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	3307      	adds	r3, #7
 80045b0:	f023 0307 	bic.w	r3, r3, #7
 80045b4:	3308      	adds	r3, #8
 80045b6:	9303      	str	r3, [sp, #12]
 80045b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045ba:	4433      	add	r3, r6
 80045bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80045be:	e76a      	b.n	8004496 <_svfiprintf_r+0x52>
 80045c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80045c4:	460c      	mov	r4, r1
 80045c6:	2001      	movs	r0, #1
 80045c8:	e7a8      	b.n	800451c <_svfiprintf_r+0xd8>
 80045ca:	2300      	movs	r3, #0
 80045cc:	3401      	adds	r4, #1
 80045ce:	9305      	str	r3, [sp, #20]
 80045d0:	4619      	mov	r1, r3
 80045d2:	f04f 0c0a 	mov.w	ip, #10
 80045d6:	4620      	mov	r0, r4
 80045d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045dc:	3a30      	subs	r2, #48	@ 0x30
 80045de:	2a09      	cmp	r2, #9
 80045e0:	d903      	bls.n	80045ea <_svfiprintf_r+0x1a6>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0c6      	beq.n	8004574 <_svfiprintf_r+0x130>
 80045e6:	9105      	str	r1, [sp, #20]
 80045e8:	e7c4      	b.n	8004574 <_svfiprintf_r+0x130>
 80045ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ee:	4604      	mov	r4, r0
 80045f0:	2301      	movs	r3, #1
 80045f2:	e7f0      	b.n	80045d6 <_svfiprintf_r+0x192>
 80045f4:	ab03      	add	r3, sp, #12
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	462a      	mov	r2, r5
 80045fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004634 <_svfiprintf_r+0x1f0>)
 80045fc:	a904      	add	r1, sp, #16
 80045fe:	4638      	mov	r0, r7
 8004600:	f3af 8000 	nop.w
 8004604:	1c42      	adds	r2, r0, #1
 8004606:	4606      	mov	r6, r0
 8004608:	d1d6      	bne.n	80045b8 <_svfiprintf_r+0x174>
 800460a:	89ab      	ldrh	r3, [r5, #12]
 800460c:	065b      	lsls	r3, r3, #25
 800460e:	f53f af2d 	bmi.w	800446c <_svfiprintf_r+0x28>
 8004612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004614:	e72c      	b.n	8004470 <_svfiprintf_r+0x2c>
 8004616:	ab03      	add	r3, sp, #12
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	462a      	mov	r2, r5
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <_svfiprintf_r+0x1f0>)
 800461e:	a904      	add	r1, sp, #16
 8004620:	4638      	mov	r0, r7
 8004622:	f000 f879 	bl	8004718 <_printf_i>
 8004626:	e7ed      	b.n	8004604 <_svfiprintf_r+0x1c0>
 8004628:	08004ac4 	.word	0x08004ac4
 800462c:	08004ace 	.word	0x08004ace
 8004630:	00000000 	.word	0x00000000
 8004634:	0800438d 	.word	0x0800438d
 8004638:	08004aca 	.word	0x08004aca

0800463c <_printf_common>:
 800463c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004640:	4616      	mov	r6, r2
 8004642:	4698      	mov	r8, r3
 8004644:	688a      	ldr	r2, [r1, #8]
 8004646:	690b      	ldr	r3, [r1, #16]
 8004648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800464c:	4293      	cmp	r3, r2
 800464e:	bfb8      	it	lt
 8004650:	4613      	movlt	r3, r2
 8004652:	6033      	str	r3, [r6, #0]
 8004654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004658:	4607      	mov	r7, r0
 800465a:	460c      	mov	r4, r1
 800465c:	b10a      	cbz	r2, 8004662 <_printf_common+0x26>
 800465e:	3301      	adds	r3, #1
 8004660:	6033      	str	r3, [r6, #0]
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	0699      	lsls	r1, r3, #26
 8004666:	bf42      	ittt	mi
 8004668:	6833      	ldrmi	r3, [r6, #0]
 800466a:	3302      	addmi	r3, #2
 800466c:	6033      	strmi	r3, [r6, #0]
 800466e:	6825      	ldr	r5, [r4, #0]
 8004670:	f015 0506 	ands.w	r5, r5, #6
 8004674:	d106      	bne.n	8004684 <_printf_common+0x48>
 8004676:	f104 0a19 	add.w	sl, r4, #25
 800467a:	68e3      	ldr	r3, [r4, #12]
 800467c:	6832      	ldr	r2, [r6, #0]
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	42ab      	cmp	r3, r5
 8004682:	dc26      	bgt.n	80046d2 <_printf_common+0x96>
 8004684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004688:	6822      	ldr	r2, [r4, #0]
 800468a:	3b00      	subs	r3, #0
 800468c:	bf18      	it	ne
 800468e:	2301      	movne	r3, #1
 8004690:	0692      	lsls	r2, r2, #26
 8004692:	d42b      	bmi.n	80046ec <_printf_common+0xb0>
 8004694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004698:	4641      	mov	r1, r8
 800469a:	4638      	mov	r0, r7
 800469c:	47c8      	blx	r9
 800469e:	3001      	adds	r0, #1
 80046a0:	d01e      	beq.n	80046e0 <_printf_common+0xa4>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	6922      	ldr	r2, [r4, #16]
 80046a6:	f003 0306 	and.w	r3, r3, #6
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	bf02      	ittt	eq
 80046ae:	68e5      	ldreq	r5, [r4, #12]
 80046b0:	6833      	ldreq	r3, [r6, #0]
 80046b2:	1aed      	subeq	r5, r5, r3
 80046b4:	68a3      	ldr	r3, [r4, #8]
 80046b6:	bf0c      	ite	eq
 80046b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046bc:	2500      	movne	r5, #0
 80046be:	4293      	cmp	r3, r2
 80046c0:	bfc4      	itt	gt
 80046c2:	1a9b      	subgt	r3, r3, r2
 80046c4:	18ed      	addgt	r5, r5, r3
 80046c6:	2600      	movs	r6, #0
 80046c8:	341a      	adds	r4, #26
 80046ca:	42b5      	cmp	r5, r6
 80046cc:	d11a      	bne.n	8004704 <_printf_common+0xc8>
 80046ce:	2000      	movs	r0, #0
 80046d0:	e008      	b.n	80046e4 <_printf_common+0xa8>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4652      	mov	r2, sl
 80046d6:	4641      	mov	r1, r8
 80046d8:	4638      	mov	r0, r7
 80046da:	47c8      	blx	r9
 80046dc:	3001      	adds	r0, #1
 80046de:	d103      	bne.n	80046e8 <_printf_common+0xac>
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e8:	3501      	adds	r5, #1
 80046ea:	e7c6      	b.n	800467a <_printf_common+0x3e>
 80046ec:	18e1      	adds	r1, r4, r3
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	2030      	movs	r0, #48	@ 0x30
 80046f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046f6:	4422      	add	r2, r4
 80046f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004700:	3302      	adds	r3, #2
 8004702:	e7c7      	b.n	8004694 <_printf_common+0x58>
 8004704:	2301      	movs	r3, #1
 8004706:	4622      	mov	r2, r4
 8004708:	4641      	mov	r1, r8
 800470a:	4638      	mov	r0, r7
 800470c:	47c8      	blx	r9
 800470e:	3001      	adds	r0, #1
 8004710:	d0e6      	beq.n	80046e0 <_printf_common+0xa4>
 8004712:	3601      	adds	r6, #1
 8004714:	e7d9      	b.n	80046ca <_printf_common+0x8e>
	...

08004718 <_printf_i>:
 8004718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800471c:	7e0f      	ldrb	r7, [r1, #24]
 800471e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004720:	2f78      	cmp	r7, #120	@ 0x78
 8004722:	4691      	mov	r9, r2
 8004724:	4680      	mov	r8, r0
 8004726:	460c      	mov	r4, r1
 8004728:	469a      	mov	sl, r3
 800472a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800472e:	d807      	bhi.n	8004740 <_printf_i+0x28>
 8004730:	2f62      	cmp	r7, #98	@ 0x62
 8004732:	d80a      	bhi.n	800474a <_printf_i+0x32>
 8004734:	2f00      	cmp	r7, #0
 8004736:	f000 80d2 	beq.w	80048de <_printf_i+0x1c6>
 800473a:	2f58      	cmp	r7, #88	@ 0x58
 800473c:	f000 80b9 	beq.w	80048b2 <_printf_i+0x19a>
 8004740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004748:	e03a      	b.n	80047c0 <_printf_i+0xa8>
 800474a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800474e:	2b15      	cmp	r3, #21
 8004750:	d8f6      	bhi.n	8004740 <_printf_i+0x28>
 8004752:	a101      	add	r1, pc, #4	@ (adr r1, 8004758 <_printf_i+0x40>)
 8004754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004758:	080047b1 	.word	0x080047b1
 800475c:	080047c5 	.word	0x080047c5
 8004760:	08004741 	.word	0x08004741
 8004764:	08004741 	.word	0x08004741
 8004768:	08004741 	.word	0x08004741
 800476c:	08004741 	.word	0x08004741
 8004770:	080047c5 	.word	0x080047c5
 8004774:	08004741 	.word	0x08004741
 8004778:	08004741 	.word	0x08004741
 800477c:	08004741 	.word	0x08004741
 8004780:	08004741 	.word	0x08004741
 8004784:	080048c5 	.word	0x080048c5
 8004788:	080047ef 	.word	0x080047ef
 800478c:	0800487f 	.word	0x0800487f
 8004790:	08004741 	.word	0x08004741
 8004794:	08004741 	.word	0x08004741
 8004798:	080048e7 	.word	0x080048e7
 800479c:	08004741 	.word	0x08004741
 80047a0:	080047ef 	.word	0x080047ef
 80047a4:	08004741 	.word	0x08004741
 80047a8:	08004741 	.word	0x08004741
 80047ac:	08004887 	.word	0x08004887
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6032      	str	r2, [r6, #0]
 80047b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047c0:	2301      	movs	r3, #1
 80047c2:	e09d      	b.n	8004900 <_printf_i+0x1e8>
 80047c4:	6833      	ldr	r3, [r6, #0]
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	1d19      	adds	r1, r3, #4
 80047ca:	6031      	str	r1, [r6, #0]
 80047cc:	0606      	lsls	r6, r0, #24
 80047ce:	d501      	bpl.n	80047d4 <_printf_i+0xbc>
 80047d0:	681d      	ldr	r5, [r3, #0]
 80047d2:	e003      	b.n	80047dc <_printf_i+0xc4>
 80047d4:	0645      	lsls	r5, r0, #25
 80047d6:	d5fb      	bpl.n	80047d0 <_printf_i+0xb8>
 80047d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047dc:	2d00      	cmp	r5, #0
 80047de:	da03      	bge.n	80047e8 <_printf_i+0xd0>
 80047e0:	232d      	movs	r3, #45	@ 0x2d
 80047e2:	426d      	negs	r5, r5
 80047e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e8:	4859      	ldr	r0, [pc, #356]	@ (8004950 <_printf_i+0x238>)
 80047ea:	230a      	movs	r3, #10
 80047ec:	e011      	b.n	8004812 <_printf_i+0xfa>
 80047ee:	6821      	ldr	r1, [r4, #0]
 80047f0:	6833      	ldr	r3, [r6, #0]
 80047f2:	0608      	lsls	r0, r1, #24
 80047f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80047f8:	d402      	bmi.n	8004800 <_printf_i+0xe8>
 80047fa:	0649      	lsls	r1, r1, #25
 80047fc:	bf48      	it	mi
 80047fe:	b2ad      	uxthmi	r5, r5
 8004800:	2f6f      	cmp	r7, #111	@ 0x6f
 8004802:	4853      	ldr	r0, [pc, #332]	@ (8004950 <_printf_i+0x238>)
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	bf14      	ite	ne
 8004808:	230a      	movne	r3, #10
 800480a:	2308      	moveq	r3, #8
 800480c:	2100      	movs	r1, #0
 800480e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004812:	6866      	ldr	r6, [r4, #4]
 8004814:	60a6      	str	r6, [r4, #8]
 8004816:	2e00      	cmp	r6, #0
 8004818:	bfa2      	ittt	ge
 800481a:	6821      	ldrge	r1, [r4, #0]
 800481c:	f021 0104 	bicge.w	r1, r1, #4
 8004820:	6021      	strge	r1, [r4, #0]
 8004822:	b90d      	cbnz	r5, 8004828 <_printf_i+0x110>
 8004824:	2e00      	cmp	r6, #0
 8004826:	d04b      	beq.n	80048c0 <_printf_i+0x1a8>
 8004828:	4616      	mov	r6, r2
 800482a:	fbb5 f1f3 	udiv	r1, r5, r3
 800482e:	fb03 5711 	mls	r7, r3, r1, r5
 8004832:	5dc7      	ldrb	r7, [r0, r7]
 8004834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004838:	462f      	mov	r7, r5
 800483a:	42bb      	cmp	r3, r7
 800483c:	460d      	mov	r5, r1
 800483e:	d9f4      	bls.n	800482a <_printf_i+0x112>
 8004840:	2b08      	cmp	r3, #8
 8004842:	d10b      	bne.n	800485c <_printf_i+0x144>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	07df      	lsls	r7, r3, #31
 8004848:	d508      	bpl.n	800485c <_printf_i+0x144>
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	6861      	ldr	r1, [r4, #4]
 800484e:	4299      	cmp	r1, r3
 8004850:	bfde      	ittt	le
 8004852:	2330      	movle	r3, #48	@ 0x30
 8004854:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004858:	f106 36ff 	addle.w	r6, r6, #4294967295
 800485c:	1b92      	subs	r2, r2, r6
 800485e:	6122      	str	r2, [r4, #16]
 8004860:	f8cd a000 	str.w	sl, [sp]
 8004864:	464b      	mov	r3, r9
 8004866:	aa03      	add	r2, sp, #12
 8004868:	4621      	mov	r1, r4
 800486a:	4640      	mov	r0, r8
 800486c:	f7ff fee6 	bl	800463c <_printf_common>
 8004870:	3001      	adds	r0, #1
 8004872:	d14a      	bne.n	800490a <_printf_i+0x1f2>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	b004      	add	sp, #16
 800487a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f043 0320 	orr.w	r3, r3, #32
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	4833      	ldr	r0, [pc, #204]	@ (8004954 <_printf_i+0x23c>)
 8004888:	2778      	movs	r7, #120	@ 0x78
 800488a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	6831      	ldr	r1, [r6, #0]
 8004892:	061f      	lsls	r7, r3, #24
 8004894:	f851 5b04 	ldr.w	r5, [r1], #4
 8004898:	d402      	bmi.n	80048a0 <_printf_i+0x188>
 800489a:	065f      	lsls	r7, r3, #25
 800489c:	bf48      	it	mi
 800489e:	b2ad      	uxthmi	r5, r5
 80048a0:	6031      	str	r1, [r6, #0]
 80048a2:	07d9      	lsls	r1, r3, #31
 80048a4:	bf44      	itt	mi
 80048a6:	f043 0320 	orrmi.w	r3, r3, #32
 80048aa:	6023      	strmi	r3, [r4, #0]
 80048ac:	b11d      	cbz	r5, 80048b6 <_printf_i+0x19e>
 80048ae:	2310      	movs	r3, #16
 80048b0:	e7ac      	b.n	800480c <_printf_i+0xf4>
 80048b2:	4827      	ldr	r0, [pc, #156]	@ (8004950 <_printf_i+0x238>)
 80048b4:	e7e9      	b.n	800488a <_printf_i+0x172>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	f023 0320 	bic.w	r3, r3, #32
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	e7f6      	b.n	80048ae <_printf_i+0x196>
 80048c0:	4616      	mov	r6, r2
 80048c2:	e7bd      	b.n	8004840 <_printf_i+0x128>
 80048c4:	6833      	ldr	r3, [r6, #0]
 80048c6:	6825      	ldr	r5, [r4, #0]
 80048c8:	6961      	ldr	r1, [r4, #20]
 80048ca:	1d18      	adds	r0, r3, #4
 80048cc:	6030      	str	r0, [r6, #0]
 80048ce:	062e      	lsls	r6, r5, #24
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	d501      	bpl.n	80048d8 <_printf_i+0x1c0>
 80048d4:	6019      	str	r1, [r3, #0]
 80048d6:	e002      	b.n	80048de <_printf_i+0x1c6>
 80048d8:	0668      	lsls	r0, r5, #25
 80048da:	d5fb      	bpl.n	80048d4 <_printf_i+0x1bc>
 80048dc:	8019      	strh	r1, [r3, #0]
 80048de:	2300      	movs	r3, #0
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	4616      	mov	r6, r2
 80048e4:	e7bc      	b.n	8004860 <_printf_i+0x148>
 80048e6:	6833      	ldr	r3, [r6, #0]
 80048e8:	1d1a      	adds	r2, r3, #4
 80048ea:	6032      	str	r2, [r6, #0]
 80048ec:	681e      	ldr	r6, [r3, #0]
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	2100      	movs	r1, #0
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7fb fc6c 	bl	80001d0 <memchr>
 80048f8:	b108      	cbz	r0, 80048fe <_printf_i+0x1e6>
 80048fa:	1b80      	subs	r0, r0, r6
 80048fc:	6060      	str	r0, [r4, #4]
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	2300      	movs	r3, #0
 8004904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004908:	e7aa      	b.n	8004860 <_printf_i+0x148>
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	4632      	mov	r2, r6
 800490e:	4649      	mov	r1, r9
 8004910:	4640      	mov	r0, r8
 8004912:	47d0      	blx	sl
 8004914:	3001      	adds	r0, #1
 8004916:	d0ad      	beq.n	8004874 <_printf_i+0x15c>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	079b      	lsls	r3, r3, #30
 800491c:	d413      	bmi.n	8004946 <_printf_i+0x22e>
 800491e:	68e0      	ldr	r0, [r4, #12]
 8004920:	9b03      	ldr	r3, [sp, #12]
 8004922:	4298      	cmp	r0, r3
 8004924:	bfb8      	it	lt
 8004926:	4618      	movlt	r0, r3
 8004928:	e7a6      	b.n	8004878 <_printf_i+0x160>
 800492a:	2301      	movs	r3, #1
 800492c:	4632      	mov	r2, r6
 800492e:	4649      	mov	r1, r9
 8004930:	4640      	mov	r0, r8
 8004932:	47d0      	blx	sl
 8004934:	3001      	adds	r0, #1
 8004936:	d09d      	beq.n	8004874 <_printf_i+0x15c>
 8004938:	3501      	adds	r5, #1
 800493a:	68e3      	ldr	r3, [r4, #12]
 800493c:	9903      	ldr	r1, [sp, #12]
 800493e:	1a5b      	subs	r3, r3, r1
 8004940:	42ab      	cmp	r3, r5
 8004942:	dcf2      	bgt.n	800492a <_printf_i+0x212>
 8004944:	e7eb      	b.n	800491e <_printf_i+0x206>
 8004946:	2500      	movs	r5, #0
 8004948:	f104 0619 	add.w	r6, r4, #25
 800494c:	e7f5      	b.n	800493a <_printf_i+0x222>
 800494e:	bf00      	nop
 8004950:	08004ad5 	.word	0x08004ad5
 8004954:	08004ae6 	.word	0x08004ae6

08004958 <memmove>:
 8004958:	4288      	cmp	r0, r1
 800495a:	b510      	push	{r4, lr}
 800495c:	eb01 0402 	add.w	r4, r1, r2
 8004960:	d902      	bls.n	8004968 <memmove+0x10>
 8004962:	4284      	cmp	r4, r0
 8004964:	4623      	mov	r3, r4
 8004966:	d807      	bhi.n	8004978 <memmove+0x20>
 8004968:	1e43      	subs	r3, r0, #1
 800496a:	42a1      	cmp	r1, r4
 800496c:	d008      	beq.n	8004980 <memmove+0x28>
 800496e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004976:	e7f8      	b.n	800496a <memmove+0x12>
 8004978:	4402      	add	r2, r0
 800497a:	4601      	mov	r1, r0
 800497c:	428a      	cmp	r2, r1
 800497e:	d100      	bne.n	8004982 <memmove+0x2a>
 8004980:	bd10      	pop	{r4, pc}
 8004982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800498a:	e7f7      	b.n	800497c <memmove+0x24>

0800498c <_sbrk_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4d06      	ldr	r5, [pc, #24]	@ (80049a8 <_sbrk_r+0x1c>)
 8004990:	2300      	movs	r3, #0
 8004992:	4604      	mov	r4, r0
 8004994:	4608      	mov	r0, r1
 8004996:	602b      	str	r3, [r5, #0]
 8004998:	f7fc f934 	bl	8000c04 <_sbrk>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d102      	bne.n	80049a6 <_sbrk_r+0x1a>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	b103      	cbz	r3, 80049a6 <_sbrk_r+0x1a>
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	2000029c 	.word	0x2000029c

080049ac <memcpy>:
 80049ac:	440a      	add	r2, r1
 80049ae:	4291      	cmp	r1, r2
 80049b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80049b4:	d100      	bne.n	80049b8 <memcpy+0xc>
 80049b6:	4770      	bx	lr
 80049b8:	b510      	push	{r4, lr}
 80049ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049c2:	4291      	cmp	r1, r2
 80049c4:	d1f9      	bne.n	80049ba <memcpy+0xe>
 80049c6:	bd10      	pop	{r4, pc}

080049c8 <_realloc_r>:
 80049c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049cc:	4680      	mov	r8, r0
 80049ce:	4615      	mov	r5, r2
 80049d0:	460c      	mov	r4, r1
 80049d2:	b921      	cbnz	r1, 80049de <_realloc_r+0x16>
 80049d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049d8:	4611      	mov	r1, r2
 80049da:	f7ff bc4b 	b.w	8004274 <_malloc_r>
 80049de:	b92a      	cbnz	r2, 80049ec <_realloc_r+0x24>
 80049e0:	f7ff fbdc 	bl	800419c <_free_r>
 80049e4:	2400      	movs	r4, #0
 80049e6:	4620      	mov	r0, r4
 80049e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ec:	f000 f81a 	bl	8004a24 <_malloc_usable_size_r>
 80049f0:	4285      	cmp	r5, r0
 80049f2:	4606      	mov	r6, r0
 80049f4:	d802      	bhi.n	80049fc <_realloc_r+0x34>
 80049f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049fa:	d8f4      	bhi.n	80049e6 <_realloc_r+0x1e>
 80049fc:	4629      	mov	r1, r5
 80049fe:	4640      	mov	r0, r8
 8004a00:	f7ff fc38 	bl	8004274 <_malloc_r>
 8004a04:	4607      	mov	r7, r0
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d0ec      	beq.n	80049e4 <_realloc_r+0x1c>
 8004a0a:	42b5      	cmp	r5, r6
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	4621      	mov	r1, r4
 8004a10:	bf28      	it	cs
 8004a12:	4632      	movcs	r2, r6
 8004a14:	f7ff ffca 	bl	80049ac <memcpy>
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f7ff fbbe 	bl	800419c <_free_r>
 8004a20:	463c      	mov	r4, r7
 8004a22:	e7e0      	b.n	80049e6 <_realloc_r+0x1e>

08004a24 <_malloc_usable_size_r>:
 8004a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a28:	1f18      	subs	r0, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bfbc      	itt	lt
 8004a2e:	580b      	ldrlt	r3, [r1, r0]
 8004a30:	18c0      	addlt	r0, r0, r3
 8004a32:	4770      	bx	lr

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
